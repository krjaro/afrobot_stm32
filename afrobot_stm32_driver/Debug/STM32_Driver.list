
STM32_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab30  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  0800ace0  0800ace0  0001ace0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b050  0800b050  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800b050  0800b050  0001b050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b058  0800b058  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b058  0800b058  0001b058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b060  0800b060  0001b060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800b064  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00005738  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200057c0  200057c0  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025134  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004475  00000000  00000000  000451ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c00  00000000  00000000  00049668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001ab8  00000000  00000000  0004b268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006695  00000000  00000000  0004cd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f42f  00000000  00000000  000533b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000faf9d  00000000  00000000  000727e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016d781  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007c8c  00000000  00000000  0016d7d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800acc8 	.word	0x0800acc8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	0800acc8 	.word	0x0800acc8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b974 	b.w	8000500 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468e      	mov	lr, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14d      	bne.n	80002da <__udivmoddi4+0xaa>
 800023e:	428a      	cmp	r2, r1
 8000240:	4694      	mov	ip, r2
 8000242:	d969      	bls.n	8000318 <__udivmoddi4+0xe8>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b152      	cbz	r2, 8000260 <__udivmoddi4+0x30>
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	f1c2 0120 	rsb	r1, r2, #32
 8000252:	fa20 f101 	lsr.w	r1, r0, r1
 8000256:	fa0c fc02 	lsl.w	ip, ip, r2
 800025a:	ea41 0e03 	orr.w	lr, r1, r3
 800025e:	4094      	lsls	r4, r2
 8000260:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000264:	0c21      	lsrs	r1, r4, #16
 8000266:	fbbe f6f8 	udiv	r6, lr, r8
 800026a:	fa1f f78c 	uxth.w	r7, ip
 800026e:	fb08 e316 	mls	r3, r8, r6, lr
 8000272:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000276:	fb06 f107 	mul.w	r1, r6, r7
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 811f 	bcs.w	80004c8 <__udivmoddi4+0x298>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 811c 	bls.w	80004c8 <__udivmoddi4+0x298>
 8000290:	3e02      	subs	r6, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 f707 	mul.w	r7, r0, r7
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x92>
 80002ac:	eb1c 0404 	adds.w	r4, ip, r4
 80002b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b4:	f080 810a 	bcs.w	80004cc <__udivmoddi4+0x29c>
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	f240 8107 	bls.w	80004cc <__udivmoddi4+0x29c>
 80002be:	4464      	add	r4, ip
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c6:	1be4      	subs	r4, r4, r7
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa4>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xc2>
 80002de:	2d00      	cmp	r5, #0
 80002e0:	f000 80ef 	beq.w	80004c2 <__udivmoddi4+0x292>
 80002e4:	2600      	movs	r6, #0
 80002e6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ea:	4630      	mov	r0, r6
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f683 	clz	r6, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d14a      	bne.n	8000390 <__udivmoddi4+0x160>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd4>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80f9 	bhi.w	80004f6 <__udivmoddi4+0x2c6>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	469e      	mov	lr, r3
 800030e:	2d00      	cmp	r5, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa4>
 8000312:	e9c5 4e00 	strd	r4, lr, [r5]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa4>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xec>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 8092 	bne.w	800044a <__udivmoddi4+0x21a>
 8000326:	eba1 010c 	sub.w	r1, r1, ip
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2601      	movs	r6, #1
 8000334:	0c20      	lsrs	r0, r4, #16
 8000336:	fbb1 f3f7 	udiv	r3, r1, r7
 800033a:	fb07 1113 	mls	r1, r7, r3, r1
 800033e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000342:	fb0e f003 	mul.w	r0, lr, r3
 8000346:	4288      	cmp	r0, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x12c>
 800034a:	eb1c 0101 	adds.w	r1, ip, r1
 800034e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x12a>
 8000354:	4288      	cmp	r0, r1
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2c0>
 800035a:	4643      	mov	r3, r8
 800035c:	1a09      	subs	r1, r1, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb1 f0f7 	udiv	r0, r1, r7
 8000364:	fb07 1110 	mls	r1, r7, r0, r1
 8000368:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x156>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 31ff 	add.w	r1, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x154>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 8000384:	4608      	mov	r0, r1
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038e:	e79c      	b.n	80002ca <__udivmoddi4+0x9a>
 8000390:	f1c6 0720 	rsb	r7, r6, #32
 8000394:	40b3      	lsls	r3, r6
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa20 f407 	lsr.w	r4, r0, r7
 80003a2:	fa01 f306 	lsl.w	r3, r1, r6
 80003a6:	431c      	orrs	r4, r3
 80003a8:	40f9      	lsrs	r1, r7
 80003aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ae:	fa00 f306 	lsl.w	r3, r0, r6
 80003b2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b6:	0c20      	lsrs	r0, r4, #16
 80003b8:	fa1f fe8c 	uxth.w	lr, ip
 80003bc:	fb09 1118 	mls	r1, r9, r8, r1
 80003c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c4:	fb08 f00e 	mul.w	r0, r8, lr
 80003c8:	4288      	cmp	r0, r1
 80003ca:	fa02 f206 	lsl.w	r2, r2, r6
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b8>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2bc>
 80003dc:	4288      	cmp	r0, r1
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2bc>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4461      	add	r1, ip
 80003e8:	1a09      	subs	r1, r1, r0
 80003ea:	b2a4      	uxth	r4, r4
 80003ec:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f0:	fb09 1110 	mls	r1, r9, r0, r1
 80003f4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003fc:	458e      	cmp	lr, r1
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1e2>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f100 34ff 	add.w	r4, r0, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2b4>
 800040a:	458e      	cmp	lr, r1
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2b4>
 800040e:	3802      	subs	r0, #2
 8000410:	4461      	add	r1, ip
 8000412:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000416:	fba0 9402 	umull	r9, r4, r0, r2
 800041a:	eba1 010e 	sub.w	r1, r1, lr
 800041e:	42a1      	cmp	r1, r4
 8000420:	46c8      	mov	r8, r9
 8000422:	46a6      	mov	lr, r4
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x2a4>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x2a0>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x212>
 800042a:	ebb3 0208 	subs.w	r2, r3, r8
 800042e:	eb61 010e 	sbc.w	r1, r1, lr
 8000432:	fa01 f707 	lsl.w	r7, r1, r7
 8000436:	fa22 f306 	lsr.w	r3, r2, r6
 800043a:	40f1      	lsrs	r1, r6
 800043c:	431f      	orrs	r7, r3
 800043e:	e9c5 7100 	strd	r7, r1, [r5]
 8000442:	2600      	movs	r6, #0
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	f1c2 0320 	rsb	r3, r2, #32
 800044e:	40d8      	lsrs	r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa21 f303 	lsr.w	r3, r1, r3
 8000458:	4091      	lsls	r1, r2
 800045a:	4301      	orrs	r1, r0
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb3 f0f7 	udiv	r0, r3, r7
 8000468:	fb07 3610 	mls	r6, r7, r0, r3
 800046c:	0c0b      	lsrs	r3, r1, #16
 800046e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000472:	fb00 f60e 	mul.w	r6, r0, lr
 8000476:	429e      	cmp	r6, r3
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x260>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b8>
 8000488:	429e      	cmp	r6, r3
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b8>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1b9b      	subs	r3, r3, r6
 8000492:	b289      	uxth	r1, r1
 8000494:	fbb3 f6f7 	udiv	r6, r3, r7
 8000498:	fb07 3316 	mls	r3, r7, r6, r3
 800049c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a0:	fb06 f30e 	mul.w	r3, r6, lr
 80004a4:	428b      	cmp	r3, r1
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x28a>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 80004b6:	3e02      	subs	r6, #2
 80004b8:	4461      	add	r1, ip
 80004ba:	1ac9      	subs	r1, r1, r3
 80004bc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0x104>
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e705      	b.n	80002d4 <__udivmoddi4+0xa4>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e3      	b.n	8000294 <__udivmoddi4+0x64>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6f8      	b.n	80002c2 <__udivmoddi4+0x92>
 80004d0:	454b      	cmp	r3, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f8>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004dc:	3801      	subs	r0, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f8>
 80004e0:	4646      	mov	r6, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x28a>
 80004e4:	4620      	mov	r0, r4
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1e2>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x260>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b8>
 80004f0:	3b02      	subs	r3, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x12c>
 80004f6:	4630      	mov	r0, r6
 80004f8:	e709      	b.n	800030e <__udivmoddi4+0xde>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x156>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	0a5a      	lsrs	r2, r3, #9
 8000514:	490f      	ldr	r1, [pc, #60]	; (8000554 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000516:	fba1 1202 	umull	r1, r2, r1, r2
 800051a:	09d2      	lsrs	r2, r2, #7
 800051c:	490e      	ldr	r1, [pc, #56]	; (8000558 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800051e:	fb01 f202 	mul.w	r2, r1, r2
 8000522:	1a9b      	subs	r3, r3, r2
 8000524:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	0a5b      	lsrs	r3, r3, #9
 800052c:	4a09      	ldr	r2, [pc, #36]	; (8000554 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800052e:	fba2 2303 	umull	r2, r3, r2, r3
 8000532:	09db      	lsrs	r3, r3, #7
 8000534:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681a      	ldr	r2, [r3, #0]
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	441a      	add	r2, r3
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	68fa      	ldr	r2, [r7, #12]
 8000546:	601a      	str	r2, [r3, #0]
}
 8000548:	bf00      	nop
 800054a:	3714      	adds	r7, #20
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	00044b83 	.word	0x00044b83
 8000558:	3b9aca00 	.word	0x3b9aca00

0800055c <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2200      	movs	r2, #0
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4618      	mov	r0, r3
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
	...

08000580 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	4a04      	ldr	r2, [pc, #16]	; (800059c <_ZN3ros3MsgC1Ev+0x1c>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4618      	mov	r0, r3
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr
 800059c:	0800b020 	.word	0x0800b020

080005a0 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
      data()
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff ffe8 	bl	8000580 <_ZN3ros3MsgC1Ev>
 80005b0:	4a06      	ldr	r2, [pc, #24]	; (80005cc <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	3304      	adds	r3, #4
 80005ba:	4618      	mov	r0, r3
 80005bc:	f7ff ffce 	bl	800055c <_ZN3ros4TimeC1Ev>
    {
    }
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4618      	mov	r0, r3
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	0800b008 	.word	0x0800b008

080005d0 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	6859      	ldr	r1, [r3, #4]
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	683a      	ldr	r2, [r7, #0]
 80005e6:	4413      	add	r3, r2
 80005e8:	b2ca      	uxtb	r2, r1
 80005ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	0a19      	lsrs	r1, r3, #8
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	3301      	adds	r3, #1
 80005f6:	683a      	ldr	r2, [r7, #0]
 80005f8:	4413      	add	r3, r2
 80005fa:	b2ca      	uxtb	r2, r1
 80005fc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	0c19      	lsrs	r1, r3, #16
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	3302      	adds	r3, #2
 8000608:	683a      	ldr	r2, [r7, #0]
 800060a:	4413      	add	r3, r2
 800060c:	b2ca      	uxtb	r2, r1
 800060e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	0e19      	lsrs	r1, r3, #24
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	3303      	adds	r3, #3
 800061a:	683a      	ldr	r2, [r7, #0]
 800061c:	4413      	add	r3, r2
 800061e:	b2ca      	uxtb	r2, r1
 8000620:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	3304      	adds	r3, #4
 8000626:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	6899      	ldr	r1, [r3, #8]
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	683a      	ldr	r2, [r7, #0]
 8000630:	4413      	add	r3, r2
 8000632:	b2ca      	uxtb	r2, r1
 8000634:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	689b      	ldr	r3, [r3, #8]
 800063a:	0a19      	lsrs	r1, r3, #8
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	3301      	adds	r3, #1
 8000640:	683a      	ldr	r2, [r7, #0]
 8000642:	4413      	add	r3, r2
 8000644:	b2ca      	uxtb	r2, r1
 8000646:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	689b      	ldr	r3, [r3, #8]
 800064c:	0c19      	lsrs	r1, r3, #16
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	3302      	adds	r3, #2
 8000652:	683a      	ldr	r2, [r7, #0]
 8000654:	4413      	add	r3, r2
 8000656:	b2ca      	uxtb	r2, r1
 8000658:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	689b      	ldr	r3, [r3, #8]
 800065e:	0e19      	lsrs	r1, r3, #24
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	3303      	adds	r3, #3
 8000664:	683a      	ldr	r2, [r7, #0]
 8000666:	4413      	add	r3, r2
 8000668:	b2ca      	uxtb	r2, r1
 800066a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	3304      	adds	r3, #4
 8000670:	60fb      	str	r3, [r7, #12]
      return offset;
 8000672:	68fb      	ldr	r3, [r7, #12]
    }
 8000674:	4618      	mov	r0, r3
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	683a      	ldr	r2, [r7, #0]
 8000692:	4413      	add	r3, r2
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	461a      	mov	r2, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	685a      	ldr	r2, [r3, #4]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	3301      	adds	r3, #1
 80006a4:	6839      	ldr	r1, [r7, #0]
 80006a6:	440b      	add	r3, r1
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	021b      	lsls	r3, r3, #8
 80006ac:	431a      	orrs	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	685a      	ldr	r2, [r3, #4]
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3302      	adds	r3, #2
 80006ba:	6839      	ldr	r1, [r7, #0]
 80006bc:	440b      	add	r3, r1
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	041b      	lsls	r3, r3, #16
 80006c2:	431a      	orrs	r2, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	685a      	ldr	r2, [r3, #4]
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	3303      	adds	r3, #3
 80006d0:	6839      	ldr	r1, [r7, #0]
 80006d2:	440b      	add	r3, r1
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	061b      	lsls	r3, r3, #24
 80006d8:	431a      	orrs	r2, r3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	3304      	adds	r3, #4
 80006e2:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	683a      	ldr	r2, [r7, #0]
 80006e8:	4413      	add	r3, r2
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	461a      	mov	r2, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	689a      	ldr	r2, [r3, #8]
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	3301      	adds	r3, #1
 80006fa:	6839      	ldr	r1, [r7, #0]
 80006fc:	440b      	add	r3, r1
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	021b      	lsls	r3, r3, #8
 8000702:	431a      	orrs	r2, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	689a      	ldr	r2, [r3, #8]
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	3302      	adds	r3, #2
 8000710:	6839      	ldr	r1, [r7, #0]
 8000712:	440b      	add	r3, r1
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	041b      	lsls	r3, r3, #16
 8000718:	431a      	orrs	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	689a      	ldr	r2, [r3, #8]
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	3303      	adds	r3, #3
 8000726:	6839      	ldr	r1, [r7, #0]
 8000728:	440b      	add	r3, r1
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	061b      	lsls	r3, r3, #24
 800072e:	431a      	orrs	r2, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	3304      	adds	r3, #4
 8000738:	60fb      	str	r3, [r7, #12]
     return offset;
 800073a:	68fb      	ldr	r3, [r7, #12]
    }
 800073c:	4618      	mov	r0, r3
 800073e:	3714      	adds	r7, #20
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr

08000748 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	4b03      	ldr	r3, [pc, #12]	; (8000760 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8000752:	4618      	mov	r0, r3
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	0800ace0 	.word	0x0800ace0

08000764 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	4b03      	ldr	r3, [pc, #12]	; (800077c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800076e:	4618      	mov	r0, r3
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	0800acf0 	.word	0x0800acf0

08000780 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff fef8 	bl	8000580 <_ZN3ros3MsgC1Ev>
 8000790:	4a0b      	ldr	r2, [pc, #44]	; (80007c0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2200      	movs	r2, #0
 800079a:	809a      	strh	r2, [r3, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	4a09      	ldr	r2, [pc, #36]	; (80007c4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4a07      	ldr	r2, [pc, #28]	; (80007c4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4a06      	ldr	r2, [pc, #24]	; (80007c4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80007ac:	611a      	str	r2, [r3, #16]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2200      	movs	r2, #0
 80007b2:	615a      	str	r2, [r3, #20]
    {
    }
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4618      	mov	r0, r3
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	0800aff0 	.word	0x0800aff0
 80007c4:	0800ad14 	.word	0x0800ad14

080007c8 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	8899      	ldrh	r1, [r3, #4]
 80007da:	69fb      	ldr	r3, [r7, #28]
 80007dc:	683a      	ldr	r2, [r7, #0]
 80007de:	4413      	add	r3, r2
 80007e0:	b2ca      	uxtb	r2, r1
 80007e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	889b      	ldrh	r3, [r3, #4]
 80007e8:	0a1b      	lsrs	r3, r3, #8
 80007ea:	b299      	uxth	r1, r3
 80007ec:	69fb      	ldr	r3, [r7, #28]
 80007ee:	3301      	adds	r3, #1
 80007f0:	683a      	ldr	r2, [r7, #0]
 80007f2:	4413      	add	r3, r2
 80007f4:	b2ca      	uxtb	r2, r1
 80007f6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80007f8:	69fb      	ldr	r3, [r7, #28]
 80007fa:	3302      	adds	r3, #2
 80007fc:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	689b      	ldr	r3, [r3, #8]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff fcf4 	bl	80001f0 <strlen>
 8000808:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	683a      	ldr	r2, [r7, #0]
 800080e:	4413      	add	r3, r2
 8000810:	69b9      	ldr	r1, [r7, #24]
 8000812:	4618      	mov	r0, r3
 8000814:	f001 fdc7 	bl	80023a6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000818:	69fb      	ldr	r3, [r7, #28]
 800081a:	3304      	adds	r3, #4
 800081c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	683a      	ldr	r2, [r7, #0]
 8000822:	18d0      	adds	r0, r2, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	69ba      	ldr	r2, [r7, #24]
 800082a:	4619      	mov	r1, r3
 800082c:	f00a f8b4 	bl	800a998 <memcpy>
      offset += length_topic_name;
 8000830:	69fa      	ldr	r2, [r7, #28]
 8000832:	69bb      	ldr	r3, [r7, #24]
 8000834:	4413      	add	r3, r2
 8000836:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff fcd7 	bl	80001f0 <strlen>
 8000842:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000844:	69fb      	ldr	r3, [r7, #28]
 8000846:	683a      	ldr	r2, [r7, #0]
 8000848:	4413      	add	r3, r2
 800084a:	6979      	ldr	r1, [r7, #20]
 800084c:	4618      	mov	r0, r3
 800084e:	f001 fdaa 	bl	80023a6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	3304      	adds	r3, #4
 8000856:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	683a      	ldr	r2, [r7, #0]
 800085c:	18d0      	adds	r0, r2, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	68db      	ldr	r3, [r3, #12]
 8000862:	697a      	ldr	r2, [r7, #20]
 8000864:	4619      	mov	r1, r3
 8000866:	f00a f897 	bl	800a998 <memcpy>
      offset += length_message_type;
 800086a:	69fa      	ldr	r2, [r7, #28]
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	4413      	add	r3, r2
 8000870:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	691b      	ldr	r3, [r3, #16]
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fcba 	bl	80001f0 <strlen>
 800087c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	683a      	ldr	r2, [r7, #0]
 8000882:	4413      	add	r3, r2
 8000884:	6939      	ldr	r1, [r7, #16]
 8000886:	4618      	mov	r0, r3
 8000888:	f001 fd8d 	bl	80023a6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	3304      	adds	r3, #4
 8000890:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	683a      	ldr	r2, [r7, #0]
 8000896:	18d0      	adds	r0, r2, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	691b      	ldr	r3, [r3, #16]
 800089c:	693a      	ldr	r2, [r7, #16]
 800089e:	4619      	mov	r1, r3
 80008a0:	f00a f87a 	bl	800a998 <memcpy>
      offset += length_md5sum;
 80008a4:	69fa      	ldr	r2, [r7, #28]
 80008a6:	693b      	ldr	r3, [r7, #16]
 80008a8:	4413      	add	r3, r2
 80008aa:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	695b      	ldr	r3, [r3, #20]
 80008b0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80008b2:	68f9      	ldr	r1, [r7, #12]
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	683a      	ldr	r2, [r7, #0]
 80008b8:	4413      	add	r3, r2
 80008ba:	b2ca      	uxtb	r2, r1
 80008bc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	0a19      	lsrs	r1, r3, #8
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	3301      	adds	r3, #1
 80008c6:	683a      	ldr	r2, [r7, #0]
 80008c8:	4413      	add	r3, r2
 80008ca:	b2ca      	uxtb	r2, r1
 80008cc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	0c19      	lsrs	r1, r3, #16
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	3302      	adds	r3, #2
 80008d6:	683a      	ldr	r2, [r7, #0]
 80008d8:	4413      	add	r3, r2
 80008da:	b2ca      	uxtb	r2, r1
 80008dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	0e19      	lsrs	r1, r3, #24
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	3303      	adds	r3, #3
 80008e6:	683a      	ldr	r2, [r7, #0]
 80008e8:	4413      	add	r3, r2
 80008ea:	b2ca      	uxtb	r2, r1
 80008ec:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	3304      	adds	r3, #4
 80008f2:	61fb      	str	r3, [r7, #28]
      return offset;
 80008f4:	69fb      	ldr	r3, [r7, #28]
    }
 80008f6:	4618      	mov	r0, r3
 80008f8:	3720      	adds	r7, #32
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80008fe:	b580      	push	{r7, lr}
 8000900:	b08a      	sub	sp, #40	; 0x28
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
 8000906:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800090c:	69bb      	ldr	r3, [r7, #24]
 800090e:	683a      	ldr	r2, [r7, #0]
 8000910:	4413      	add	r3, r2
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	b29a      	uxth	r2, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	889b      	ldrh	r3, [r3, #4]
 800091e:	b21a      	sxth	r2, r3
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	3301      	adds	r3, #1
 8000924:	6839      	ldr	r1, [r7, #0]
 8000926:	440b      	add	r3, r1
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	021b      	lsls	r3, r3, #8
 800092c:	b21b      	sxth	r3, r3
 800092e:	4313      	orrs	r3, r2
 8000930:	b21b      	sxth	r3, r3
 8000932:	b29a      	uxth	r2, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	3302      	adds	r3, #2
 800093c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800093e:	69bb      	ldr	r3, [r7, #24]
 8000940:	683a      	ldr	r2, [r7, #0]
 8000942:	441a      	add	r2, r3
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	4611      	mov	r1, r2
 800094a:	4618      	mov	r0, r3
 800094c:	f001 fd49 	bl	80023e2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	3304      	adds	r3, #4
 8000954:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000956:	69bb      	ldr	r3, [r7, #24]
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
 800095a:	69ba      	ldr	r2, [r7, #24]
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	4413      	add	r3, r2
 8000960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000962:	429a      	cmp	r2, r3
 8000964:	d20c      	bcs.n	8000980 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8000966:	683a      	ldr	r2, [r7, #0]
 8000968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096a:	441a      	add	r2, r3
 800096c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096e:	3b01      	subs	r3, #1
 8000970:	6839      	ldr	r1, [r7, #0]
 8000972:	440b      	add	r3, r1
 8000974:	7812      	ldrb	r2, [r2, #0]
 8000976:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097a:	3301      	adds	r3, #1
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
 800097e:	e7ec      	b.n	800095a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	4413      	add	r3, r2
 8000986:	3b01      	subs	r3, #1
 8000988:	683a      	ldr	r2, [r7, #0]
 800098a:	4413      	add	r3, r2
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000990:	69bb      	ldr	r3, [r7, #24]
 8000992:	3b01      	subs	r3, #1
 8000994:	683a      	ldr	r2, [r7, #0]
 8000996:	441a      	add	r2, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	4413      	add	r3, r2
 80009a2:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80009a4:	69bb      	ldr	r3, [r7, #24]
 80009a6:	683a      	ldr	r2, [r7, #0]
 80009a8:	441a      	add	r2, r3
 80009aa:	f107 0310 	add.w	r3, r7, #16
 80009ae:	4611      	mov	r1, r2
 80009b0:	4618      	mov	r0, r3
 80009b2:	f001 fd16 	bl	80023e2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80009b6:	69bb      	ldr	r3, [r7, #24]
 80009b8:	3304      	adds	r3, #4
 80009ba:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	623b      	str	r3, [r7, #32]
 80009c0:	69ba      	ldr	r2, [r7, #24]
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	4413      	add	r3, r2
 80009c6:	6a3a      	ldr	r2, [r7, #32]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d20c      	bcs.n	80009e6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80009cc:	683a      	ldr	r2, [r7, #0]
 80009ce:	6a3b      	ldr	r3, [r7, #32]
 80009d0:	441a      	add	r2, r3
 80009d2:	6a3b      	ldr	r3, [r7, #32]
 80009d4:	3b01      	subs	r3, #1
 80009d6:	6839      	ldr	r1, [r7, #0]
 80009d8:	440b      	add	r3, r1
 80009da:	7812      	ldrb	r2, [r2, #0]
 80009dc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80009de:	6a3b      	ldr	r3, [r7, #32]
 80009e0:	3301      	adds	r3, #1
 80009e2:	623b      	str	r3, [r7, #32]
 80009e4:	e7ec      	b.n	80009c0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80009e6:	69ba      	ldr	r2, [r7, #24]
 80009e8:	693b      	ldr	r3, [r7, #16]
 80009ea:	4413      	add	r3, r2
 80009ec:	3b01      	subs	r3, #1
 80009ee:	683a      	ldr	r2, [r7, #0]
 80009f0:	4413      	add	r3, r2
 80009f2:	2200      	movs	r2, #0
 80009f4:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80009f6:	69bb      	ldr	r3, [r7, #24]
 80009f8:	3b01      	subs	r3, #1
 80009fa:	683a      	ldr	r2, [r7, #0]
 80009fc:	441a      	add	r2, r3
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8000a02:	69ba      	ldr	r2, [r7, #24]
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	4413      	add	r3, r2
 8000a08:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000a0a:	69bb      	ldr	r3, [r7, #24]
 8000a0c:	683a      	ldr	r2, [r7, #0]
 8000a0e:	441a      	add	r2, r3
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	4611      	mov	r1, r2
 8000a16:	4618      	mov	r0, r3
 8000a18:	f001 fce3 	bl	80023e2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	3304      	adds	r3, #4
 8000a20:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000a22:	69bb      	ldr	r3, [r7, #24]
 8000a24:	61fb      	str	r3, [r7, #28]
 8000a26:	69ba      	ldr	r2, [r7, #24]
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	69fa      	ldr	r2, [r7, #28]
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	d20c      	bcs.n	8000a4c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8000a32:	683a      	ldr	r2, [r7, #0]
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	441a      	add	r2, r3
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	6839      	ldr	r1, [r7, #0]
 8000a3e:	440b      	add	r3, r1
 8000a40:	7812      	ldrb	r2, [r2, #0]
 8000a42:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	3301      	adds	r3, #1
 8000a48:	61fb      	str	r3, [r7, #28]
 8000a4a:	e7ec      	b.n	8000a26 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000a4c:	69ba      	ldr	r2, [r7, #24]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	4413      	add	r3, r2
 8000a52:	3b01      	subs	r3, #1
 8000a54:	683a      	ldr	r2, [r7, #0]
 8000a56:	4413      	add	r3, r2
 8000a58:	2200      	movs	r2, #0
 8000a5a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000a5c:	69bb      	ldr	r3, [r7, #24]
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	683a      	ldr	r2, [r7, #0]
 8000a62:	441a      	add	r2, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000a68:	69ba      	ldr	r2, [r7, #24]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	69ba      	ldr	r2, [r7, #24]
 8000a78:	6839      	ldr	r1, [r7, #0]
 8000a7a:	440a      	add	r2, r1
 8000a7c:	7812      	ldrb	r2, [r2, #0]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000a82:	68ba      	ldr	r2, [r7, #8]
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	3301      	adds	r3, #1
 8000a88:	6839      	ldr	r1, [r7, #0]
 8000a8a:	440b      	add	r3, r1
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	021b      	lsls	r3, r3, #8
 8000a90:	4313      	orrs	r3, r2
 8000a92:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000a94:	68ba      	ldr	r2, [r7, #8]
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	3302      	adds	r3, #2
 8000a9a:	6839      	ldr	r1, [r7, #0]
 8000a9c:	440b      	add	r3, r1
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	041b      	lsls	r3, r3, #16
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	3303      	adds	r3, #3
 8000aac:	6839      	ldr	r1, [r7, #0]
 8000aae:	440b      	add	r3, r1
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	061b      	lsls	r3, r3, #24
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000ab8:	68ba      	ldr	r2, [r7, #8]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000abe:	69bb      	ldr	r3, [r7, #24]
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	61bb      	str	r3, [r7, #24]
     return offset;
 8000ac4:	69bb      	ldr	r3, [r7, #24]
    }
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3728      	adds	r7, #40	; 0x28
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000ada:	4618      	mov	r0, r3
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	0800ad18 	.word	0x0800ad18

08000aec <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000af6:	4618      	mov	r0, r3
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	0800ad34 	.word	0x0800ad34

08000b08 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fd34 	bl	8000580 <_ZN3ros3MsgC1Ev>
 8000b18:	4a06      	ldr	r2, [pc, #24]	; (8000b34 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2200      	movs	r2, #0
 8000b22:	711a      	strb	r2, [r3, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a04      	ldr	r2, [pc, #16]	; (8000b38 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000b28:	609a      	str	r2, [r3, #8]
    {
    }
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	0800afd8 	.word	0x0800afd8
 8000b38:	0800ad14 	.word	0x0800ad14

08000b3c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	683a      	ldr	r2, [r7, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	7912      	ldrb	r2, [r2, #4]
 8000b54:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff fb45 	bl	80001f0 <strlen>
 8000b66:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	683a      	ldr	r2, [r7, #0]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	68b9      	ldr	r1, [r7, #8]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f001 fc18 	bl	80023a6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	3304      	adds	r3, #4
 8000b7a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	683a      	ldr	r2, [r7, #0]
 8000b80:	18d0      	adds	r0, r2, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f009 ff05 	bl	800a998 <memcpy>
      offset += length_msg;
 8000b8e:	68fa      	ldr	r2, [r7, #12]
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	4413      	add	r3, r2
 8000b94:	60fb      	str	r3, [r7, #12]
      return offset;
 8000b96:	68fb      	ldr	r3, [r7, #12]
    }
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	683a      	ldr	r2, [r7, #0]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	781a      	ldrb	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	683a      	ldr	r2, [r7, #0]
 8000bc4:	441a      	add	r2, r3
 8000bc6:	f107 030c 	add.w	r3, r7, #12
 8000bca:	4611      	mov	r1, r2
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f001 fc08 	bl	80023e2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	3304      	adds	r3, #4
 8000bd6:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	4413      	add	r3, r2
 8000be2:	697a      	ldr	r2, [r7, #20]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d20c      	bcs.n	8000c02 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8000be8:	683a      	ldr	r2, [r7, #0]
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	441a      	add	r2, r3
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	6839      	ldr	r1, [r7, #0]
 8000bf4:	440b      	add	r3, r1
 8000bf6:	7812      	ldrb	r2, [r2, #0]
 8000bf8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	e7ec      	b.n	8000bdc <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	4413      	add	r3, r2
 8000c08:	3b01      	subs	r3, #1
 8000c0a:	683a      	ldr	r2, [r7, #0]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	2200      	movs	r2, #0
 8000c10:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	3b01      	subs	r3, #1
 8000c16:	683a      	ldr	r2, [r7, #0]
 8000c18:	441a      	add	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	4413      	add	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
     return offset;
 8000c26:	693b      	ldr	r3, [r7, #16]
    }
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3718      	adds	r7, #24
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	4b03      	ldr	r3, [pc, #12]	; (8000c48 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	0800ad58 	.word	0x0800ad58

08000c4c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	4b03      	ldr	r3, [pc, #12]	; (8000c64 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8000c56:	4618      	mov	r0, r3
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	0800ad6c 	.word	0x0800ad6c

08000c68 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fc84 	bl	8000580 <_ZN3ros3MsgC1Ev>
 8000c78:	4a0c      	ldr	r2, [pc, #48]	; (8000cac <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2200      	movs	r2, #0
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2200      	movs	r2, #0
 8000c94:	619a      	str	r2, [r3, #24]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2200      	movs	r2, #0
 8000c9a:	61da      	str	r2, [r3, #28]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	0800afc0 	.word	0x0800afc0

08000cb0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	; 0x28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6859      	ldr	r1, [r3, #4]
 8000cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc4:	683a      	ldr	r2, [r7, #0]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	b2ca      	uxtb	r2, r1
 8000cca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	0a19      	lsrs	r1, r3, #8
 8000cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	683a      	ldr	r2, [r7, #0]
 8000cd8:	4413      	add	r3, r2
 8000cda:	b2ca      	uxtb	r2, r1
 8000cdc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	0c19      	lsrs	r1, r3, #16
 8000ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce6:	3302      	adds	r3, #2
 8000ce8:	683a      	ldr	r2, [r7, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	b2ca      	uxtb	r2, r1
 8000cee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	0e19      	lsrs	r1, r3, #24
 8000cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf8:	3303      	adds	r3, #3
 8000cfa:	683a      	ldr	r2, [r7, #0]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	b2ca      	uxtb	r2, r1
 8000d00:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d04:	3304      	adds	r3, #4
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000d08:	2300      	movs	r3, #0
 8000d0a:	623b      	str	r3, [r7, #32]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	6a3a      	ldr	r2, [r7, #32]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d22b      	bcs.n	8000d6e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	68da      	ldr	r2, [r3, #12]
 8000d1a:	6a3b      	ldr	r3, [r7, #32]
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	4413      	add	r3, r2
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000d24:	6939      	ldr	r1, [r7, #16]
 8000d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d28:	683a      	ldr	r2, [r7, #0]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	b2ca      	uxtb	r2, r1
 8000d2e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	0a19      	lsrs	r1, r3, #8
 8000d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d36:	3301      	adds	r3, #1
 8000d38:	683a      	ldr	r2, [r7, #0]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	b2ca      	uxtb	r2, r1
 8000d3e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	0c19      	lsrs	r1, r3, #16
 8000d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d46:	3302      	adds	r3, #2
 8000d48:	683a      	ldr	r2, [r7, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	b2ca      	uxtb	r2, r1
 8000d4e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	0e19      	lsrs	r1, r3, #24
 8000d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d56:	3303      	adds	r3, #3
 8000d58:	683a      	ldr	r2, [r7, #0]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	b2ca      	uxtb	r2, r1
 8000d5e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d62:	3304      	adds	r3, #4
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000d66:	6a3b      	ldr	r3, [r7, #32]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	623b      	str	r3, [r7, #32]
 8000d6c:	e7ce      	b.n	8000d0c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6919      	ldr	r1, [r3, #16]
 8000d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d74:	683a      	ldr	r2, [r7, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	b2ca      	uxtb	r2, r1
 8000d7a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	691b      	ldr	r3, [r3, #16]
 8000d80:	0a19      	lsrs	r1, r3, #8
 8000d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d84:	3301      	adds	r3, #1
 8000d86:	683a      	ldr	r2, [r7, #0]
 8000d88:	4413      	add	r3, r2
 8000d8a:	b2ca      	uxtb	r2, r1
 8000d8c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	691b      	ldr	r3, [r3, #16]
 8000d92:	0c19      	lsrs	r1, r3, #16
 8000d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d96:	3302      	adds	r3, #2
 8000d98:	683a      	ldr	r2, [r7, #0]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	b2ca      	uxtb	r2, r1
 8000d9e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	691b      	ldr	r3, [r3, #16]
 8000da4:	0e19      	lsrs	r1, r3, #24
 8000da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da8:	3303      	adds	r3, #3
 8000daa:	683a      	ldr	r2, [r7, #0]
 8000dac:	4413      	add	r3, r2
 8000dae:	b2ca      	uxtb	r2, r1
 8000db0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db4:	3304      	adds	r3, #4
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	691b      	ldr	r3, [r3, #16]
 8000dc0:	69fa      	ldr	r2, [r7, #28]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d22b      	bcs.n	8000e1e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	699a      	ldr	r2, [r3, #24]
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	4413      	add	r3, r2
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000dd4:	68f9      	ldr	r1, [r7, #12]
 8000dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd8:	683a      	ldr	r2, [r7, #0]
 8000dda:	4413      	add	r3, r2
 8000ddc:	b2ca      	uxtb	r2, r1
 8000dde:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	0a19      	lsrs	r1, r3, #8
 8000de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de6:	3301      	adds	r3, #1
 8000de8:	683a      	ldr	r2, [r7, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	b2ca      	uxtb	r2, r1
 8000dee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	0c19      	lsrs	r1, r3, #16
 8000df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df6:	3302      	adds	r3, #2
 8000df8:	683a      	ldr	r2, [r7, #0]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	b2ca      	uxtb	r2, r1
 8000dfe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	0e19      	lsrs	r1, r3, #24
 8000e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e06:	3303      	adds	r3, #3
 8000e08:	683a      	ldr	r2, [r7, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	b2ca      	uxtb	r2, r1
 8000e0e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e12:	3304      	adds	r3, #4
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	61fb      	str	r3, [r7, #28]
 8000e1c:	e7ce      	b.n	8000dbc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	69d9      	ldr	r1, [r3, #28]
 8000e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e24:	683a      	ldr	r2, [r7, #0]
 8000e26:	4413      	add	r3, r2
 8000e28:	b2ca      	uxtb	r2, r1
 8000e2a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	69db      	ldr	r3, [r3, #28]
 8000e30:	0a19      	lsrs	r1, r3, #8
 8000e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e34:	3301      	adds	r3, #1
 8000e36:	683a      	ldr	r2, [r7, #0]
 8000e38:	4413      	add	r3, r2
 8000e3a:	b2ca      	uxtb	r2, r1
 8000e3c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	69db      	ldr	r3, [r3, #28]
 8000e42:	0c19      	lsrs	r1, r3, #16
 8000e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e46:	3302      	adds	r3, #2
 8000e48:	683a      	ldr	r2, [r7, #0]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	b2ca      	uxtb	r2, r1
 8000e4e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	69db      	ldr	r3, [r3, #28]
 8000e54:	0e19      	lsrs	r1, r3, #24
 8000e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e58:	3303      	adds	r3, #3
 8000e5a:	683a      	ldr	r2, [r7, #0]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	b2ca      	uxtb	r2, r1
 8000e60:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8000e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e64:	3304      	adds	r3, #4
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61bb      	str	r3, [r7, #24]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	69db      	ldr	r3, [r3, #28]
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d228      	bcs.n	8000ec8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff f9b4 	bl	80001f0 <strlen>
 8000e88:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8000e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8c:	683a      	ldr	r2, [r7, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	6979      	ldr	r1, [r7, #20]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f001 fa87 	bl	80023a6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9a:	3304      	adds	r3, #4
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea0:	683a      	ldr	r2, [r7, #0]
 8000ea2:	18d0      	adds	r0, r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	4413      	add	r3, r2
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	697a      	ldr	r2, [r7, #20]
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f009 fd70 	bl	800a998 <memcpy>
      offset += length_stringsi;
 8000eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	61bb      	str	r3, [r7, #24]
 8000ec6:	e7d1      	b.n	8000e6c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8000ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3728      	adds	r7, #40	; 0x28
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b08e      	sub	sp, #56	; 0x38
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
 8000eda:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ee2:	683a      	ldr	r2, [r7, #0]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eec:	3301      	adds	r3, #1
 8000eee:	683a      	ldr	r2, [r7, #0]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	021b      	lsls	r3, r3, #8
 8000ef6:	6a3a      	ldr	r2, [r7, #32]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000efe:	3302      	adds	r3, #2
 8000f00:	683a      	ldr	r2, [r7, #0]
 8000f02:	4413      	add	r3, r2
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	041b      	lsls	r3, r3, #16
 8000f08:	6a3a      	ldr	r2, [r7, #32]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f10:	3303      	adds	r3, #3
 8000f12:	683a      	ldr	r2, [r7, #0]
 8000f14:	4413      	add	r3, r2
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	061b      	lsls	r3, r3, #24
 8000f1a:	6a3a      	ldr	r2, [r7, #32]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8000f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f22:	3304      	adds	r3, #4
 8000f24:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	6a3a      	ldr	r2, [r7, #32]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d90a      	bls.n	8000f46 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	68da      	ldr	r2, [r3, #12]
 8000f34:	6a3b      	ldr	r3, [r7, #32]
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4610      	mov	r0, r2
 8000f3c:	f009 fd42 	bl	800a9c4 <realloc>
 8000f40:	4602      	mov	r2, r0
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6a3a      	ldr	r2, [r7, #32]
 8000f4a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	633b      	str	r3, [r7, #48]	; 0x30
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d236      	bcs.n	8000fc8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f62:	6839      	ldr	r1, [r7, #0]
 8000f64:	440a      	add	r2, r1
 8000f66:	7812      	ldrb	r2, [r2, #0]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f70:	3301      	adds	r3, #1
 8000f72:	6839      	ldr	r1, [r7, #0]
 8000f74:	440b      	add	r3, r1
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	021b      	lsls	r3, r3, #8
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f82:	3302      	adds	r3, #2
 8000f84:	6839      	ldr	r1, [r7, #0]
 8000f86:	440b      	add	r3, r1
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	041b      	lsls	r3, r3, #16
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000f90:	697a      	ldr	r2, [r7, #20]
 8000f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f94:	3303      	adds	r3, #3
 8000f96:	6839      	ldr	r1, [r7, #0]
 8000f98:	440b      	add	r3, r1
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	061b      	lsls	r3, r3, #24
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8000fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000faa:	3304      	adds	r3, #4
 8000fac:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	68da      	ldr	r2, [r3, #12]
 8000fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	3208      	adds	r2, #8
 8000fbc:	6812      	ldr	r2, [r2, #0]
 8000fbe:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8000fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	633b      	str	r3, [r7, #48]	; 0x30
 8000fc6:	e7c3      	b.n	8000f50 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fca:	683a      	ldr	r2, [r7, #0]
 8000fcc:	4413      	add	r3, r2
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	683a      	ldr	r2, [r7, #0]
 8000fd8:	4413      	add	r3, r2
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	021b      	lsls	r3, r3, #8
 8000fde:	69fa      	ldr	r2, [r7, #28]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fe6:	3302      	adds	r3, #2
 8000fe8:	683a      	ldr	r2, [r7, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	041b      	lsls	r3, r3, #16
 8000ff0:	69fa      	ldr	r2, [r7, #28]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff8:	3303      	adds	r3, #3
 8000ffa:	683a      	ldr	r2, [r7, #0]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	061b      	lsls	r3, r3, #24
 8001002:	69fa      	ldr	r2, [r7, #28]
 8001004:	4313      	orrs	r3, r2
 8001006:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800100a:	3304      	adds	r3, #4
 800100c:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	69fa      	ldr	r2, [r7, #28]
 8001014:	429a      	cmp	r2, r3
 8001016:	d90a      	bls.n	800102e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	699a      	ldr	r2, [r3, #24]
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4619      	mov	r1, r3
 8001022:	4610      	mov	r0, r2
 8001024:	f009 fcce 	bl	800a9c4 <realloc>
 8001028:	4602      	mov	r2, r0
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69fa      	ldr	r2, [r7, #28]
 8001032:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001034:	2300      	movs	r3, #0
 8001036:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	691b      	ldr	r3, [r3, #16]
 800103c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800103e:	429a      	cmp	r2, r3
 8001040:	d236      	bcs.n	80010b0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800104a:	6839      	ldr	r1, [r7, #0]
 800104c:	440a      	add	r2, r1
 800104e:	7812      	ldrb	r2, [r2, #0]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001058:	3301      	adds	r3, #1
 800105a:	6839      	ldr	r1, [r7, #0]
 800105c:	440b      	add	r3, r1
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	021b      	lsls	r3, r3, #8
 8001062:	4313      	orrs	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800106a:	3302      	adds	r3, #2
 800106c:	6839      	ldr	r1, [r7, #0]
 800106e:	440b      	add	r3, r1
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	041b      	lsls	r3, r3, #16
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800107c:	3303      	adds	r3, #3
 800107e:	6839      	ldr	r1, [r7, #0]
 8001080:	440b      	add	r3, r1
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	061b      	lsls	r3, r3, #24
 8001086:	4313      	orrs	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001092:	3304      	adds	r3, #4
 8001094:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	699a      	ldr	r2, [r3, #24]
 800109a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4413      	add	r3, r2
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	3214      	adds	r2, #20
 80010a4:	6812      	ldr	r2, [r2, #0]
 80010a6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80010a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010aa:	3301      	adds	r3, #1
 80010ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010ae:	e7c3      	b.n	8001038 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80010b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010b2:	683a      	ldr	r2, [r7, #0]
 80010b4:	4413      	add	r3, r2
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80010ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010bc:	3301      	adds	r3, #1
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	4413      	add	r3, r2
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80010cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ce:	3302      	adds	r3, #2
 80010d0:	683a      	ldr	r2, [r7, #0]
 80010d2:	4413      	add	r3, r2
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	041b      	lsls	r3, r3, #16
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80010de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010e0:	3303      	adds	r3, #3
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	4413      	add	r3, r2
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	061b      	lsls	r3, r3, #24
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80010f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010f2:	3304      	adds	r3, #4
 80010f4:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d90a      	bls.n	8001116 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4619      	mov	r1, r3
 800110a:	4610      	mov	r0, r2
 800110c:	f009 fc5a 	bl	800a9c4 <realloc>
 8001110:	4602      	mov	r2, r0
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 800111c:	2300      	movs	r3, #0
 800111e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	69db      	ldr	r3, [r3, #28]
 8001124:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001126:	429a      	cmp	r2, r3
 8001128:	d23f      	bcs.n	80011aa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800112a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	441a      	add	r2, r3
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	4611      	mov	r1, r2
 8001136:	4618      	mov	r0, r3
 8001138:	f001 f953 	bl	80023e2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800113c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800113e:	3304      	adds	r3, #4
 8001140:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
 8001146:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4413      	add	r3, r2
 800114c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800114e:	429a      	cmp	r2, r3
 8001150:	d20c      	bcs.n	800116c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001156:	441a      	add	r2, r3
 8001158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115a:	3b01      	subs	r3, #1
 800115c:	6839      	ldr	r1, [r7, #0]
 800115e:	440b      	add	r3, r1
 8001160:	7812      	ldrb	r2, [r2, #0]
 8001162:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001166:	3301      	adds	r3, #1
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
 800116a:	e7ec      	b.n	8001146 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800116c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	4413      	add	r3, r2
 8001172:	3b01      	subs	r3, #1
 8001174:	683a      	ldr	r2, [r7, #0]
 8001176:	4413      	add	r3, r2
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800117c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800117e:	3b01      	subs	r3, #1
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	441a      	add	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001188:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	4413      	add	r3, r2
 800118e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4413      	add	r3, r2
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	3220      	adds	r2, #32
 800119e:	6812      	ldr	r2, [r2, #0]
 80011a0:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80011a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a4:	3301      	adds	r3, #1
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80011a8:	e7ba      	b.n	8001120 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80011aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80011ac:	4618      	mov	r0, r3
 80011ae:	3738      	adds	r7, #56	; 0x38
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	4b03      	ldr	r3, [pc, #12]	; (80011cc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	0800aea8 	.word	0x0800aea8

080011d0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	4b03      	ldr	r3, [pc, #12]	; (80011e8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80011da:	4618      	mov	r0, r3
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	0800ad90 	.word	0x0800ad90

080011ec <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
 80011f8:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	68ba      	ldr	r2, [r7, #8]
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	611a      	str	r2, [r3, #16]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4618      	mov	r0, r3
 8001210:	3714      	adds	r7, #20
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	68d8      	ldr	r0, [r3, #12]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	6891      	ldr	r1, [r2, #8]
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	4798      	blx	r3
 8001238:	4603      	mov	r3, r0
  };
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001242:	b480      	push	{r7}
 8001244:	b083      	sub	sp, #12
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	691b      	ldr	r3, [r3, #16]
  }
 800124e:	4618      	mov	r0, r3
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800125a:	b480      	push	{r7}
 800125c:	b083      	sub	sp, #12
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001274:	4618      	mov	r0, r3
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <_ZN13STM32HardwareC1Ev+0x34>)
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4618      	mov	r0, r3
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	20000348 	.word	0x20000348

080012b8 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f000 f804 	bl	80012ce <_ZN13STM32Hardware10reset_rbufEv>
    }
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6818      	ldr	r0, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	3304      	adds	r3, #4
 80012de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012e2:	4619      	mov	r1, r3
 80012e4:	f005 fc6c 	bl	8006bc0 <HAL_UART_Receive_DMA>
    }
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <_ZN13STM32Hardware4readEv>:

    int read(){
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
      int c = -1;
 80012f8:	f04f 33ff 	mov.w	r3, #4294967295
 80012fc:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ffa8 	bl	800125a <_ZN13STM32Hardware10getRdmaIndEv>
 800130a:	4603      	mov	r3, r0
 800130c:	429c      	cmp	r4, r3
 800130e:	bf14      	ite	ne
 8001310:	2301      	movne	r3, #1
 8001312:	2300      	moveq	r3, #0
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b00      	cmp	r3, #0
 8001318:	d012      	beq.n	8001340 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001320:	1c59      	adds	r1, r3, #1
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	4413      	add	r3, r2
 800132c:	791b      	ldrb	r3, [r3, #4]
 800132e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001336:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001340:	68fb      	ldr	r3, [r7, #12]
    }
 8001342:	4618      	mov	r0, r3
 8001344:	3714      	adds	r7, #20
 8001346:	46bd      	mov	sp, r7
 8001348:	bd90      	pop	{r4, r7, pc}
	...

0800134c <_ZN13STM32Hardware5flushEv>:
//        }
//        mutex = false;
//      }
//    }

    void flush(void){
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b20      	cmp	r3, #32
 8001360:	d108      	bne.n	8001374 <_ZN13STM32Hardware5flushEv+0x28>
 8001362:	4b28      	ldr	r3, [pc, #160]	; (8001404 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	f083 0301 	eor.w	r3, r3, #1
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <_ZN13STM32Hardware5flushEv+0x28>
 8001370:	2301      	movs	r3, #1
 8001372:	e000      	b.n	8001376 <_ZN13STM32Hardware5flushEv+0x2a>
 8001374:	2300      	movs	r3, #0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d03f      	beq.n	80013fa <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 800137a:	4b22      	ldr	r3, [pc, #136]	; (8001404 <_ZN13STM32Hardware5flushEv+0xb8>)
 800137c:	2201      	movs	r2, #1
 800137e:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800138c:	429a      	cmp	r2, r3
 800138e:	d031      	beq.n	80013f4 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800139c:	429a      	cmp	r2, r3
 800139e:	d20a      	bcs.n	80013b6 <_ZN13STM32Hardware5flushEv+0x6a>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	e006      	b.n	80013c4 <_ZN13STM32Hardware5flushEv+0x78>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80013bc:	b29b      	uxth	r3, r3
 80013be:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6818      	ldr	r0, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80013d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	4413      	add	r3, r2
 80013d8:	89fa      	ldrh	r2, [r7, #14]
 80013da:	4619      	mov	r1, r3
 80013dc:	f005 fb72 	bl	8006ac4 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80013e6:	89fb      	ldrh	r3, [r7, #14]
 80013e8:	4413      	add	r3, r2
 80013ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 80013f4:	4b03      	ldr	r3, [pc, #12]	; (8001404 <_ZN13STM32Hardware5flushEv+0xb8>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	701a      	strb	r2, [r3, #0]
      }
    }
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200000a4 	.word	0x200000a4

08001408 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
      uint16_t n = length;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	b29b      	uxth	r3, r3
 8001418:	827b      	strh	r3, [r7, #18]
      n = n <= tbuflen ? n : tbuflen;
 800141a:	8a7b      	ldrh	r3, [r7, #18]
 800141c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001420:	d803      	bhi.n	800142a <_ZN13STM32Hardware5writeEPhi+0x22>
 8001422:	f107 0312 	add.w	r3, r7, #18
 8001426:	881b      	ldrh	r3, [r3, #0]
 8001428:	e001      	b.n	800142e <_ZN13STM32Hardware5writeEPhi+0x26>
 800142a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800142e:	827b      	strh	r3, [r7, #18]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001430:	8a7b      	ldrh	r3, [r7, #18]
 8001432:	461a      	mov	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800143a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800143e:	4293      	cmp	r3, r2
 8001440:	bf28      	it	cs
 8001442:	4613      	movcs	r3, r2
 8001444:	617b      	str	r3, [r7, #20]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800144c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	4413      	add	r3, r2
 8001454:	697a      	ldr	r2, [r7, #20]
 8001456:	68b9      	ldr	r1, [r7, #8]
 8001458:	4618      	mov	r0, r3
 800145a:	f009 fa9d 	bl	800a998 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001464:	8a7a      	ldrh	r2, [r7, #18]
 8001466:	4413      	add	r3, r2
 8001468:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8001472:	8a7b      	ldrh	r3, [r7, #18]
 8001474:	461a      	mov	r2, r3
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	4293      	cmp	r3, r2
 800147a:	d00c      	beq.n	8001496 <_ZN13STM32Hardware5writeEPhi+0x8e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	68ba      	ldr	r2, [r7, #8]
 8001486:	18d1      	adds	r1, r2, r3
 8001488:	8a7b      	ldrh	r3, [r7, #18]
 800148a:	461a      	mov	r2, r3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	461a      	mov	r2, r3
 8001492:	f009 fa81 	bl	800a998 <memcpy>
      }

      flush();
 8001496:	68f8      	ldr	r0, [r7, #12]
 8001498:	f7ff ff58 	bl	800134c <_ZN13STM32Hardware5flushEv>
    }
 800149c:	bf00      	nop
 800149e:	3718      	adds	r7, #24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	f002 faa0 	bl	80039f0 <HAL_GetTick>
 80014b0:	4603      	mov	r3, r0
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
      data("")
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff f85a 	bl	8000580 <_ZN3ros3MsgC1Ev>
 80014cc:	4a05      	ldr	r2, [pc, #20]	; (80014e4 <_ZN8std_msgs6StringC1Ev+0x28>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <_ZN8std_msgs6StringC1Ev+0x2c>)
 80014d6:	605a      	str	r2, [r3, #4]
    {
    }
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	0800af7c 	.word	0x0800af7c
 80014e8:	0800ad14 	.word	0x0800ad14

080014ec <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7fe fe76 	bl	80001f0 <strlen>
 8001504:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	4413      	add	r3, r2
 800150c:	68b9      	ldr	r1, [r7, #8]
 800150e:	4618      	mov	r0, r3
 8001510:	f000 ff49 	bl	80023a6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	3304      	adds	r3, #4
 8001518:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	18d0      	adds	r0, r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	68ba      	ldr	r2, [r7, #8]
 8001526:	4619      	mov	r1, r3
 8001528:	f009 fa36 	bl	800a998 <memcpy>
      offset += length_data;
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	4413      	add	r3, r2
 8001532:	60fb      	str	r3, [r7, #12]
      return offset;
 8001534:	68fb      	ldr	r3, [r7, #12]
    }
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800153e:	b580      	push	{r7, lr}
 8001540:	b086      	sub	sp, #24
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
 8001546:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	441a      	add	r2, r3
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	4611      	mov	r1, r2
 8001558:	4618      	mov	r0, r3
 800155a:	f000 ff42 	bl	80023e2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	3304      	adds	r3, #4
 8001562:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	4413      	add	r3, r2
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	429a      	cmp	r2, r3
 8001572:	d20c      	bcs.n	800158e <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	441a      	add	r2, r3
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	3b01      	subs	r3, #1
 800157e:	6839      	ldr	r1, [r7, #0]
 8001580:	440b      	add	r3, r1
 8001582:	7812      	ldrb	r2, [r2, #0]
 8001584:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	3301      	adds	r3, #1
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	e7ec      	b.n	8001568 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	4413      	add	r3, r2
 8001594:	3b01      	subs	r3, #1
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	4413      	add	r3, r2
 800159a:	2200      	movs	r2, #0
 800159c:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	3b01      	subs	r3, #1
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	441a      	add	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	605a      	str	r2, [r3, #4]
      offset += length_data;
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4413      	add	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
     return offset;
 80015b2:	693b      	ldr	r3, [r7, #16]
    }
 80015b4:	4618      	mov	r0, r3
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <_ZN8std_msgs6String7getTypeEv+0x18>)
 80015c6:	4618      	mov	r0, r3
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	0800adb4 	.word	0x0800adb4

080015d8 <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	4b03      	ldr	r3, [pc, #12]	; (80015f0 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 80015e2:	4618      	mov	r0, r3
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	0800adc4 	.word	0x0800adc4

080015f4 <_ZN8std_msgs4BoolC1Ev>:
  {
    public:
      typedef bool _data_type;
      _data_type data;

    Bool():
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
      data(0)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe ffbe 	bl	8000580 <_ZN3ros3MsgC1Ev>
 8001604:	4a05      	ldr	r2, [pc, #20]	; (800161c <_ZN8std_msgs4BoolC1Ev+0x28>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	711a      	strb	r2, [r3, #4]
    {
    }
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	0800af64 	.word	0x0800af64

08001620 <_ZNK8std_msgs4Bool9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	791b      	ldrb	r3, [r3, #4]
 8001632:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	4413      	add	r3, r2
 800163a:	7a3a      	ldrb	r2, [r7, #8]
 800163c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	3301      	adds	r3, #1
 8001642:	60fb      	str	r3, [r7, #12]
      return offset;
 8001644:	68fb      	ldr	r3, [r7, #12]
    }
 8001646:	4618      	mov	r0, r3
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <_ZN8std_msgs4Bool11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001652:	b480      	push	{r7}
 8001654:	b085      	sub	sp, #20
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
 800165a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001664:	7a3a      	ldrb	r2, [r7, #8]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6839      	ldr	r1, [r7, #0]
 800166a:	440b      	add	r3, r1
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	4313      	orrs	r3, r2
 8001670:	b2db      	uxtb	r3, r3
 8001672:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8001674:	7a3a      	ldrb	r2, [r7, #8]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	3301      	adds	r3, #1
 800167e:	60fb      	str	r3, [r7, #12]
     return offset;
 8001680:	68fb      	ldr	r3, [r7, #12]
    }
 8001682:	4618      	mov	r0, r3
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <_ZN8std_msgs4Bool7getTypeEv>:

    const char * getType(){ return "std_msgs/Bool"; };
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	4b03      	ldr	r3, [pc, #12]	; (80016a8 <_ZN8std_msgs4Bool7getTypeEv+0x18>)
 800169a:	4618      	mov	r0, r3
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	0800ade8 	.word	0x0800ade8

080016ac <_ZN8std_msgs4Bool6getMD5Ev>:
    const char * getMD5(){ return "8b94c1b53db61fb6aed406028ad6332a"; };
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	4b03      	ldr	r3, [pc, #12]	; (80016c4 <_ZN8std_msgs4Bool6getMD5Ev+0x18>)
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	0800adf8 	.word	0x0800adf8

080016c8 <_Z16kierunekCallbackRKN8std_msgs4BoolE>:
ros::Publisher chatter("chatter", &str_msg);
char hello[] = "Hello jetson" ;

ros::Subscriber<std_msgs::Bool> kierunek("kierunek", &kierunekCallback);

void kierunekCallback(const std_msgs::Bool& msg){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	if (msg.data == 1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	791b      	ldrb	r3, [r3, #4]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d106      	bne.n	80016e6 <_Z16kierunekCallbackRKN8std_msgs4BoolE+0x1e>
		HAL_GPIO_WritePin (GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 80016d8:	2201      	movs	r2, #1
 80016da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016de:	4809      	ldr	r0, [pc, #36]	; (8001704 <_Z16kierunekCallbackRKN8std_msgs4BoolE+0x3c>)
 80016e0:	f003 faac 	bl	8004c3c <HAL_GPIO_WritePin>
	else if (msg.data == 0)
		HAL_GPIO_WritePin (GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);

}
 80016e4:	e009      	b.n	80016fa <_Z16kierunekCallbackRKN8std_msgs4BoolE+0x32>
	else if (msg.data == 0)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	791b      	ldrb	r3, [r3, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d105      	bne.n	80016fa <_Z16kierunekCallbackRKN8std_msgs4BoolE+0x32>
		HAL_GPIO_WritePin (GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 80016ee:	2200      	movs	r2, #0
 80016f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016f4:	4803      	ldr	r0, [pc, #12]	; (8001704 <_Z16kierunekCallbackRKN8std_msgs4BoolE+0x3c>)
 80016f6:	f003 faa1 	bl	8004c3c <HAL_GPIO_WritePin>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40021800 	.word	0x40021800

08001708 <HAL_UART_TxCpltCallback>:



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	nh.getHardware()->flush();
 8001710:	4805      	ldr	r0, [pc, #20]	; (8001728 <HAL_UART_TxCpltCallback+0x20>)
 8001712:	f000 ff4f 	bl	80025b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8001716:	4603      	mov	r3, r0
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fe17 	bl	800134c <_ZN13STM32Hardware5flushEv>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	2000049c 	.word	0x2000049c

0800172c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8001734:	4805      	ldr	r0, [pc, #20]	; (800174c <HAL_UART_RxCpltCallback+0x20>)
 8001736:	f000 ff3d 	bl	80025b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800173a:	4603      	mov	r3, r0
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fdc6 	bl	80012ce <_ZN13STM32Hardware10reset_rbufEv>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	2000049c 	.word	0x2000049c

08001750 <setup>:

void setup(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
	 nh.initNode();
 8001754:	4806      	ldr	r0, [pc, #24]	; (8001770 <setup+0x20>)
 8001756:	f000 ff39 	bl	80025cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	 nh.advertise(chatter);
 800175a:	4906      	ldr	r1, [pc, #24]	; (8001774 <setup+0x24>)
 800175c:	4804      	ldr	r0, [pc, #16]	; (8001770 <setup+0x20>)
 800175e:	f000 ff52 	bl	8002606 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	 nh.subscribe(kierunek);
 8001762:	4905      	ldr	r1, [pc, #20]	; (8001778 <setup+0x28>)
 8001764:	4802      	ldr	r0, [pc, #8]	; (8001770 <setup+0x20>)
 8001766:	f000 ff7e 	bl	8002666 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_>
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	2000049c 	.word	0x2000049c
 8001774:	20000de0 	.word	0x20000de0
 8001778:	20000df4 	.word	0x20000df4

0800177c <loop>:

void loop(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001780:	2180      	movs	r1, #128	; 0x80
 8001782:	4807      	ldr	r0, [pc, #28]	; (80017a0 <loop+0x24>)
 8001784:	f003 fa73 	bl	8004c6e <HAL_GPIO_TogglePin>

	str_msg.data = hello;
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <loop+0x28>)
 800178a:	4a07      	ldr	r2, [pc, #28]	; (80017a8 <loop+0x2c>)
 800178c:	605a      	str	r2, [r3, #4]
	chatter.publish(&str_msg);
 800178e:	4905      	ldr	r1, [pc, #20]	; (80017a4 <loop+0x28>)
 8001790:	4806      	ldr	r0, [pc, #24]	; (80017ac <loop+0x30>)
 8001792:	f7ff fd42 	bl	800121a <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	nh.spinOnce();
 8001796:	4806      	ldr	r0, [pc, #24]	; (80017b0 <loop+0x34>)
 8001798:	f000 ff90 	bl	80026bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40020400 	.word	0x40020400
 80017a4:	20000dd8 	.word	0x20000dd8
 80017a8:	20000000 	.word	0x20000000
 80017ac:	20000de0 	.word	0x20000de0
 80017b0:	2000049c 	.word	0x2000049c

080017b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017b8:	f002 f8e4 	bl	8003984 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017bc:	f000 f84c 	bl	8001858 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017c0:	f000 fcc0 	bl	8002144 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80017c4:	f000 fc96 	bl	80020f4 <_ZL11MX_DMA_Initv>
  MX_USART3_UART_Init();
 80017c8:	f000 fc66 	bl	8002098 <_ZL19MX_USART3_UART_Initv>
  MX_I2C1_Init();
 80017cc:	f000 f914 	bl	80019f8 <_ZL12MX_I2C1_Initv>
  MX_I2C2_Init();
 80017d0:	f000 f962 	bl	8001a98 <_ZL12MX_I2C2_Initv>
  MX_TIM2_Init();
 80017d4:	f000 fa7a 	bl	8001ccc <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 80017d8:	f000 fad6 	bl	8001d88 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 80017dc:	f000 fb32 	bl	8001e44 <_ZL12MX_TIM4_Initv>
  MX_USART1_UART_Init();
 80017e0:	f000 fc2c 	bl	800203c <_ZL19MX_USART1_UART_Initv>
  MX_ADC1_Init();
 80017e4:	f000 f8ac 	bl	8001940 <_ZL12MX_ADC1_Initv>
  MX_TIM1_Init();
 80017e8:	f000 f9a6 	bl	8001b38 <_ZL12MX_TIM1_Initv>
  MX_TIM5_Init();
 80017ec:	f000 fb88 	bl	8001f00 <_ZL12MX_TIM5_Initv>
  MX_TIM6_Init();
 80017f0:	f000 fbe4 	bl	8001fbc <_ZL12MX_TIM6_Initv>
  /* USER CODE BEGIN 2 */
  setup();
 80017f4:	f7ff ffac 	bl	8001750 <setup>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80017f8:	f006 fb36 	bl	8007e68 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80017fc:	4a0d      	ldr	r2, [pc, #52]	; (8001834 <main+0x80>)
 80017fe:	2100      	movs	r1, #0
 8001800:	480d      	ldr	r0, [pc, #52]	; (8001838 <main+0x84>)
 8001802:	f006 fb7b 	bl	8007efc <osThreadNew>
 8001806:	4603      	mov	r3, r0
 8001808:	4a0c      	ldr	r2, [pc, #48]	; (800183c <main+0x88>)
 800180a:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 800180c:	4a0c      	ldr	r2, [pc, #48]	; (8001840 <main+0x8c>)
 800180e:	2100      	movs	r1, #0
 8001810:	480c      	ldr	r0, [pc, #48]	; (8001844 <main+0x90>)
 8001812:	f006 fb73 	bl	8007efc <osThreadNew>
 8001816:	4603      	mov	r3, r0
 8001818:	4a0b      	ldr	r2, [pc, #44]	; (8001848 <main+0x94>)
 800181a:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 800181c:	4a0b      	ldr	r2, [pc, #44]	; (800184c <main+0x98>)
 800181e:	2100      	movs	r1, #0
 8001820:	480b      	ldr	r0, [pc, #44]	; (8001850 <main+0x9c>)
 8001822:	f006 fb6b 	bl	8007efc <osThreadNew>
 8001826:	4603      	mov	r3, r0
 8001828:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <main+0xa0>)
 800182a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800182c:	f006 fb40 	bl	8007eb0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001830:	e7fe      	b.n	8001830 <main+0x7c>
 8001832:	bf00      	nop
 8001834:	0800aec4 	.word	0x0800aec4
 8001838:	080022f9 	.word	0x080022f9
 800183c:	20000490 	.word	0x20000490
 8001840:	0800aee8 	.word	0x0800aee8
 8001844:	08002351 	.word	0x08002351
 8001848:	20000494 	.word	0x20000494
 800184c:	0800af0c 	.word	0x0800af0c
 8001850:	08002367 	.word	0x08002367
 8001854:	20000498 	.word	0x20000498

08001858 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b094      	sub	sp, #80	; 0x50
 800185c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800185e:	f107 0320 	add.w	r3, r7, #32
 8001862:	2230      	movs	r2, #48	; 0x30
 8001864:	2100      	movs	r1, #0
 8001866:	4618      	mov	r0, r3
 8001868:	f009 f8a4 	bl	800a9b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800186c:	f107 030c 	add.w	r3, r7, #12
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800187c:	2300      	movs	r3, #0
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	4b2d      	ldr	r3, [pc, #180]	; (8001938 <_Z18SystemClock_Configv+0xe0>)
 8001882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001884:	4a2c      	ldr	r2, [pc, #176]	; (8001938 <_Z18SystemClock_Configv+0xe0>)
 8001886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800188a:	6413      	str	r3, [r2, #64]	; 0x40
 800188c:	4b2a      	ldr	r3, [pc, #168]	; (8001938 <_Z18SystemClock_Configv+0xe0>)
 800188e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001898:	2300      	movs	r3, #0
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	4b27      	ldr	r3, [pc, #156]	; (800193c <_Z18SystemClock_Configv+0xe4>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a26      	ldr	r2, [pc, #152]	; (800193c <_Z18SystemClock_Configv+0xe4>)
 80018a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018a6:	6013      	str	r3, [r2, #0]
 80018a8:	4b24      	ldr	r3, [pc, #144]	; (800193c <_Z18SystemClock_Configv+0xe4>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018b0:	607b      	str	r3, [r7, #4]
 80018b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018b4:	2301      	movs	r3, #1
 80018b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018be:	2302      	movs	r3, #2
 80018c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018c8:	2304      	movs	r3, #4
 80018ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80018cc:	23a8      	movs	r3, #168	; 0xa8
 80018ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018d0:	2302      	movs	r3, #2
 80018d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80018d4:	2307      	movs	r3, #7
 80018d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018d8:	f107 0320 	add.w	r3, r7, #32
 80018dc:	4618      	mov	r0, r3
 80018de:	f003 fba1 	bl	8005024 <HAL_RCC_OscConfig>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	bf14      	ite	ne
 80018e8:	2301      	movne	r3, #1
 80018ea:	2300      	moveq	r3, #0
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80018f2:	f000 fd53 	bl	800239c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018f6:	230f      	movs	r3, #15
 80018f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018fa:	2302      	movs	r3, #2
 80018fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001902:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001906:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800190c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800190e:	f107 030c 	add.w	r3, r7, #12
 8001912:	2105      	movs	r1, #5
 8001914:	4618      	mov	r0, r3
 8001916:	f003 fdfd 	bl	8005514 <HAL_RCC_ClockConfig>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	bf14      	ite	ne
 8001920:	2301      	movne	r3, #1
 8001922:	2300      	moveq	r3, #0
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 800192a:	f000 fd37 	bl	800239c <Error_Handler>
  }
}
 800192e:	bf00      	nop
 8001930:	3750      	adds	r7, #80	; 0x50
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40023800 	.word	0x40023800
 800193c:	40007000 	.word	0x40007000

08001940 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001946:	463b      	mov	r3, r7
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001952:	4b26      	ldr	r3, [pc, #152]	; (80019ec <_ZL12MX_ADC1_Initv+0xac>)
 8001954:	4a26      	ldr	r2, [pc, #152]	; (80019f0 <_ZL12MX_ADC1_Initv+0xb0>)
 8001956:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001958:	4b24      	ldr	r3, [pc, #144]	; (80019ec <_ZL12MX_ADC1_Initv+0xac>)
 800195a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800195e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001960:	4b22      	ldr	r3, [pc, #136]	; (80019ec <_ZL12MX_ADC1_Initv+0xac>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001966:	4b21      	ldr	r3, [pc, #132]	; (80019ec <_ZL12MX_ADC1_Initv+0xac>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800196c:	4b1f      	ldr	r3, [pc, #124]	; (80019ec <_ZL12MX_ADC1_Initv+0xac>)
 800196e:	2200      	movs	r2, #0
 8001970:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001972:	4b1e      	ldr	r3, [pc, #120]	; (80019ec <_ZL12MX_ADC1_Initv+0xac>)
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800197a:	4b1c      	ldr	r3, [pc, #112]	; (80019ec <_ZL12MX_ADC1_Initv+0xac>)
 800197c:	2200      	movs	r2, #0
 800197e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001980:	4b1a      	ldr	r3, [pc, #104]	; (80019ec <_ZL12MX_ADC1_Initv+0xac>)
 8001982:	4a1c      	ldr	r2, [pc, #112]	; (80019f4 <_ZL12MX_ADC1_Initv+0xb4>)
 8001984:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001986:	4b19      	ldr	r3, [pc, #100]	; (80019ec <_ZL12MX_ADC1_Initv+0xac>)
 8001988:	2200      	movs	r2, #0
 800198a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800198c:	4b17      	ldr	r3, [pc, #92]	; (80019ec <_ZL12MX_ADC1_Initv+0xac>)
 800198e:	2201      	movs	r2, #1
 8001990:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001992:	4b16      	ldr	r3, [pc, #88]	; (80019ec <_ZL12MX_ADC1_Initv+0xac>)
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800199a:	4b14      	ldr	r3, [pc, #80]	; (80019ec <_ZL12MX_ADC1_Initv+0xac>)
 800199c:	2201      	movs	r2, #1
 800199e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019a0:	4812      	ldr	r0, [pc, #72]	; (80019ec <_ZL12MX_ADC1_Initv+0xac>)
 80019a2:	f002 f831 	bl	8003a08 <HAL_ADC_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	bf14      	ite	ne
 80019ac:	2301      	movne	r3, #1
 80019ae:	2300      	moveq	r3, #0
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <_ZL12MX_ADC1_Initv+0x7a>
  {
    Error_Handler();
 80019b6:	f000 fcf1 	bl	800239c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80019ba:	2303      	movs	r3, #3
 80019bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019be:	2301      	movs	r3, #1
 80019c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019c6:	463b      	mov	r3, r7
 80019c8:	4619      	mov	r1, r3
 80019ca:	4808      	ldr	r0, [pc, #32]	; (80019ec <_ZL12MX_ADC1_Initv+0xac>)
 80019cc:	f002 f860 	bl	8003a90 <HAL_ADC_ConfigChannel>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	bf14      	ite	ne
 80019d6:	2301      	movne	r3, #1
 80019d8:	2300      	moveq	r3, #0
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <_ZL12MX_ADC1_Initv+0xa4>
  {
    Error_Handler();
 80019e0:	f000 fcdc 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019e4:	bf00      	nop
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	200000a8 	.word	0x200000a8
 80019f0:	40012000 	.word	0x40012000
 80019f4:	0f000001 	.word	0x0f000001

080019f8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019fc:	4b23      	ldr	r3, [pc, #140]	; (8001a8c <_ZL12MX_I2C1_Initv+0x94>)
 80019fe:	4a24      	ldr	r2, [pc, #144]	; (8001a90 <_ZL12MX_I2C1_Initv+0x98>)
 8001a00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a02:	4b22      	ldr	r3, [pc, #136]	; (8001a8c <_ZL12MX_I2C1_Initv+0x94>)
 8001a04:	4a23      	ldr	r2, [pc, #140]	; (8001a94 <_ZL12MX_I2C1_Initv+0x9c>)
 8001a06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a08:	4b20      	ldr	r3, [pc, #128]	; (8001a8c <_ZL12MX_I2C1_Initv+0x94>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a0e:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <_ZL12MX_I2C1_Initv+0x94>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a14:	4b1d      	ldr	r3, [pc, #116]	; (8001a8c <_ZL12MX_I2C1_Initv+0x94>)
 8001a16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <_ZL12MX_I2C1_Initv+0x94>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a22:	4b1a      	ldr	r3, [pc, #104]	; (8001a8c <_ZL12MX_I2C1_Initv+0x94>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a28:	4b18      	ldr	r3, [pc, #96]	; (8001a8c <_ZL12MX_I2C1_Initv+0x94>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a2e:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <_ZL12MX_I2C1_Initv+0x94>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a34:	4815      	ldr	r0, [pc, #84]	; (8001a8c <_ZL12MX_I2C1_Initv+0x94>)
 8001a36:	f003 f935 	bl	8004ca4 <HAL_I2C_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	bf14      	ite	ne
 8001a40:	2301      	movne	r3, #1
 8001a42:	2300      	moveq	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001a4a:	f000 fca7 	bl	800239c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a4e:	2100      	movs	r1, #0
 8001a50:	480e      	ldr	r0, [pc, #56]	; (8001a8c <_ZL12MX_I2C1_Initv+0x94>)
 8001a52:	f003 fa6b 	bl	8004f2c <HAL_I2CEx_ConfigAnalogFilter>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	bf14      	ite	ne
 8001a5c:	2301      	movne	r3, #1
 8001a5e:	2300      	moveq	r3, #0
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <_ZL12MX_I2C1_Initv+0x72>
  {
    Error_Handler();
 8001a66:	f000 fc99 	bl	800239c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	4807      	ldr	r0, [pc, #28]	; (8001a8c <_ZL12MX_I2C1_Initv+0x94>)
 8001a6e:	f003 fa99 	bl	8004fa4 <HAL_I2CEx_ConfigDigitalFilter>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	bf14      	ite	ne
 8001a78:	2301      	movne	r3, #1
 8001a7a:	2300      	moveq	r3, #0
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <_ZL12MX_I2C1_Initv+0x8e>
  {
    Error_Handler();
 8001a82:	f000 fc8b 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	200000f0 	.word	0x200000f0
 8001a90:	40005400 	.word	0x40005400
 8001a94:	000186a0 	.word	0x000186a0

08001a98 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a9c:	4b23      	ldr	r3, [pc, #140]	; (8001b2c <_ZL12MX_I2C2_Initv+0x94>)
 8001a9e:	4a24      	ldr	r2, [pc, #144]	; (8001b30 <_ZL12MX_I2C2_Initv+0x98>)
 8001aa0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001aa2:	4b22      	ldr	r3, [pc, #136]	; (8001b2c <_ZL12MX_I2C2_Initv+0x94>)
 8001aa4:	4a23      	ldr	r2, [pc, #140]	; (8001b34 <_ZL12MX_I2C2_Initv+0x9c>)
 8001aa6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001aa8:	4b20      	ldr	r3, [pc, #128]	; (8001b2c <_ZL12MX_I2C2_Initv+0x94>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001aae:	4b1f      	ldr	r3, [pc, #124]	; (8001b2c <_ZL12MX_I2C2_Initv+0x94>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ab4:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <_ZL12MX_I2C2_Initv+0x94>)
 8001ab6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001aba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001abc:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <_ZL12MX_I2C2_Initv+0x94>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001ac2:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <_ZL12MX_I2C2_Initv+0x94>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ac8:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <_ZL12MX_I2C2_Initv+0x94>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ace:	4b17      	ldr	r3, [pc, #92]	; (8001b2c <_ZL12MX_I2C2_Initv+0x94>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ad4:	4815      	ldr	r0, [pc, #84]	; (8001b2c <_ZL12MX_I2C2_Initv+0x94>)
 8001ad6:	f003 f8e5 	bl	8004ca4 <HAL_I2C_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	bf14      	ite	ne
 8001ae0:	2301      	movne	r3, #1
 8001ae2:	2300      	moveq	r3, #0
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 8001aea:	f000 fc57 	bl	800239c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001aee:	2100      	movs	r1, #0
 8001af0:	480e      	ldr	r0, [pc, #56]	; (8001b2c <_ZL12MX_I2C2_Initv+0x94>)
 8001af2:	f003 fa1b 	bl	8004f2c <HAL_I2CEx_ConfigAnalogFilter>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	bf14      	ite	ne
 8001afc:	2301      	movne	r3, #1
 8001afe:	2300      	moveq	r3, #0
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <_ZL12MX_I2C2_Initv+0x72>
  {
    Error_Handler();
 8001b06:	f000 fc49 	bl	800239c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4807      	ldr	r0, [pc, #28]	; (8001b2c <_ZL12MX_I2C2_Initv+0x94>)
 8001b0e:	f003 fa49 	bl	8004fa4 <HAL_I2CEx_ConfigDigitalFilter>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	bf14      	ite	ne
 8001b18:	2301      	movne	r3, #1
 8001b1a:	2300      	moveq	r3, #0
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <_ZL12MX_I2C2_Initv+0x8e>
  {
    Error_Handler();
 8001b22:	f000 fc3b 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000144 	.word	0x20000144
 8001b30:	40005800 	.word	0x40005800
 8001b34:	000186a0 	.word	0x000186a0

08001b38 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b092      	sub	sp, #72	; 0x48
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
 8001b58:	615a      	str	r2, [r3, #20]
 8001b5a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	2220      	movs	r2, #32
 8001b60:	2100      	movs	r1, #0
 8001b62:	4618      	mov	r0, r3
 8001b64:	f008 ff26 	bl	800a9b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b68:	4b56      	ldr	r3, [pc, #344]	; (8001cc4 <_ZL12MX_TIM1_Initv+0x18c>)
 8001b6a:	4a57      	ldr	r2, [pc, #348]	; (8001cc8 <_ZL12MX_TIM1_Initv+0x190>)
 8001b6c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 8001b6e:	4b55      	ldr	r3, [pc, #340]	; (8001cc4 <_ZL12MX_TIM1_Initv+0x18c>)
 8001b70:	2209      	movs	r2, #9
 8001b72:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b74:	4b53      	ldr	r3, [pc, #332]	; (8001cc4 <_ZL12MX_TIM1_Initv+0x18c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001b7a:	4b52      	ldr	r3, [pc, #328]	; (8001cc4 <_ZL12MX_TIM1_Initv+0x18c>)
 8001b7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b80:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b82:	4b50      	ldr	r3, [pc, #320]	; (8001cc4 <_ZL12MX_TIM1_Initv+0x18c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b88:	4b4e      	ldr	r3, [pc, #312]	; (8001cc4 <_ZL12MX_TIM1_Initv+0x18c>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b8e:	4b4d      	ldr	r3, [pc, #308]	; (8001cc4 <_ZL12MX_TIM1_Initv+0x18c>)
 8001b90:	2280      	movs	r2, #128	; 0x80
 8001b92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b94:	484b      	ldr	r0, [pc, #300]	; (8001cc4 <_ZL12MX_TIM1_Initv+0x18c>)
 8001b96:	f003 ffcf 	bl	8005b38 <HAL_TIM_PWM_Init>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	bf14      	ite	ne
 8001ba0:	2301      	movne	r3, #1
 8001ba2:	2300      	moveq	r3, #0
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 8001baa:	f000 fbf7 	bl	800239c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bb6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4841      	ldr	r0, [pc, #260]	; (8001cc4 <_ZL12MX_TIM1_Initv+0x18c>)
 8001bbe:	f004 fe51 	bl	8006864 <HAL_TIMEx_MasterConfigSynchronization>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	bf14      	ite	ne
 8001bc8:	2301      	movne	r3, #1
 8001bca:	2300      	moveq	r3, #0
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8001bd2:	f000 fbe3 	bl	800239c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bd6:	2360      	movs	r3, #96	; 0x60
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bde:	2300      	movs	r3, #0
 8001be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001be2:	2300      	movs	r3, #0
 8001be4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001be6:	2300      	movs	r3, #0
 8001be8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bea:	2300      	movs	r3, #0
 8001bec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4832      	ldr	r0, [pc, #200]	; (8001cc4 <_ZL12MX_TIM1_Initv+0x18c>)
 8001bfc:	f004 fad2 	bl	80061a4 <HAL_TIM_PWM_ConfigChannel>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	bf14      	ite	ne
 8001c06:	2301      	movne	r3, #1
 8001c08:	2300      	moveq	r3, #0
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8001c10:	f000 fbc4 	bl	800239c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c18:	2204      	movs	r2, #4
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4829      	ldr	r0, [pc, #164]	; (8001cc4 <_ZL12MX_TIM1_Initv+0x18c>)
 8001c1e:	f004 fac1 	bl	80061a4 <HAL_TIM_PWM_ConfigChannel>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	bf14      	ite	ne
 8001c28:	2301      	movne	r3, #1
 8001c2a:	2300      	moveq	r3, #0
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 8001c32:	f000 fbb3 	bl	800239c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c3a:	2208      	movs	r2, #8
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4821      	ldr	r0, [pc, #132]	; (8001cc4 <_ZL12MX_TIM1_Initv+0x18c>)
 8001c40:	f004 fab0 	bl	80061a4 <HAL_TIM_PWM_ConfigChannel>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	bf14      	ite	ne
 8001c4a:	2301      	movne	r3, #1
 8001c4c:	2300      	moveq	r3, #0
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 8001c54:	f000 fba2 	bl	800239c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c5c:	220c      	movs	r2, #12
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4818      	ldr	r0, [pc, #96]	; (8001cc4 <_ZL12MX_TIM1_Initv+0x18c>)
 8001c62:	f004 fa9f 	bl	80061a4 <HAL_TIM_PWM_ConfigChannel>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	bf14      	ite	ne
 8001c6c:	2301      	movne	r3, #1
 8001c6e:	2300      	moveq	r3, #0
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <_ZL12MX_TIM1_Initv+0x142>
  {
    Error_Handler();
 8001c76:	f000 fb91 	bl	800239c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c92:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c94:	2300      	movs	r3, #0
 8001c96:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c98:	1d3b      	adds	r3, r7, #4
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4809      	ldr	r0, [pc, #36]	; (8001cc4 <_ZL12MX_TIM1_Initv+0x18c>)
 8001c9e:	f004 fe5d 	bl	800695c <HAL_TIMEx_ConfigBreakDeadTime>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	bf14      	ite	ne
 8001ca8:	2301      	movne	r3, #1
 8001caa:	2300      	moveq	r3, #0
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <_ZL12MX_TIM1_Initv+0x17e>
  {
    Error_Handler();
 8001cb2:	f000 fb73 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001cb6:	4803      	ldr	r0, [pc, #12]	; (8001cc4 <_ZL12MX_TIM1_Initv+0x18c>)
 8001cb8:	f001 fbe6 	bl	8003488 <HAL_TIM_MspPostInit>

}
 8001cbc:	bf00      	nop
 8001cbe:	3748      	adds	r7, #72	; 0x48
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20000198 	.word	0x20000198
 8001cc8:	40010000 	.word	0x40010000

08001ccc <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08c      	sub	sp, #48	; 0x30
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cd2:	f107 030c 	add.w	r3, r7, #12
 8001cd6:	2224      	movs	r2, #36	; 0x24
 8001cd8:	2100      	movs	r1, #0
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f008 fe6a 	bl	800a9b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce0:	1d3b      	adds	r3, r7, #4
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ce8:	4b26      	ldr	r3, [pc, #152]	; (8001d84 <_ZL12MX_TIM2_Initv+0xb8>)
 8001cea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001cf0:	4b24      	ldr	r3, [pc, #144]	; (8001d84 <_ZL12MX_TIM2_Initv+0xb8>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf6:	4b23      	ldr	r3, [pc, #140]	; (8001d84 <_ZL12MX_TIM2_Initv+0xb8>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001cfc:	4b21      	ldr	r3, [pc, #132]	; (8001d84 <_ZL12MX_TIM2_Initv+0xb8>)
 8001cfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d04:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <_ZL12MX_TIM2_Initv+0xb8>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d0a:	4b1e      	ldr	r3, [pc, #120]	; (8001d84 <_ZL12MX_TIM2_Initv+0xb8>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d10:	2303      	movs	r3, #3
 8001d12:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d14:	2300      	movs	r3, #0
 8001d16:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d24:	2300      	movs	r3, #0
 8001d26:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001d34:	f107 030c 	add.w	r3, r7, #12
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4812      	ldr	r0, [pc, #72]	; (8001d84 <_ZL12MX_TIM2_Initv+0xb8>)
 8001d3c:	f004 f884 	bl	8005e48 <HAL_TIM_Encoder_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	bf14      	ite	ne
 8001d46:	2301      	movne	r3, #1
 8001d48:	2300      	moveq	r3, #0
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 8001d50:	f000 fb24 	bl	800239c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d54:	2300      	movs	r3, #0
 8001d56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d5c:	1d3b      	adds	r3, r7, #4
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4808      	ldr	r0, [pc, #32]	; (8001d84 <_ZL12MX_TIM2_Initv+0xb8>)
 8001d62:	f004 fd7f 	bl	8006864 <HAL_TIMEx_MasterConfigSynchronization>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	bf14      	ite	ne
 8001d6c:	2301      	movne	r3, #1
 8001d6e:	2300      	moveq	r3, #0
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 8001d76:	f000 fb11 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d7a:	bf00      	nop
 8001d7c:	3730      	adds	r7, #48	; 0x30
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	200001e0 	.word	0x200001e0

08001d88 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08c      	sub	sp, #48	; 0x30
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d8e:	f107 030c 	add.w	r3, r7, #12
 8001d92:	2224      	movs	r2, #36	; 0x24
 8001d94:	2100      	movs	r1, #0
 8001d96:	4618      	mov	r0, r3
 8001d98:	f008 fe0c 	bl	800a9b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d9c:	1d3b      	adds	r3, r7, #4
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001da4:	4b25      	ldr	r3, [pc, #148]	; (8001e3c <_ZL12MX_TIM3_Initv+0xb4>)
 8001da6:	4a26      	ldr	r2, [pc, #152]	; (8001e40 <_ZL12MX_TIM3_Initv+0xb8>)
 8001da8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001daa:	4b24      	ldr	r3, [pc, #144]	; (8001e3c <_ZL12MX_TIM3_Initv+0xb4>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db0:	4b22      	ldr	r3, [pc, #136]	; (8001e3c <_ZL12MX_TIM3_Initv+0xb4>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001db6:	4b21      	ldr	r3, [pc, #132]	; (8001e3c <_ZL12MX_TIM3_Initv+0xb4>)
 8001db8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dbc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dbe:	4b1f      	ldr	r3, [pc, #124]	; (8001e3c <_ZL12MX_TIM3_Initv+0xb4>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc4:	4b1d      	ldr	r3, [pc, #116]	; (8001e3c <_ZL12MX_TIM3_Initv+0xb4>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001dde:	2300      	movs	r3, #0
 8001de0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001de2:	2301      	movs	r3, #1
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001de6:	2300      	movs	r3, #0
 8001de8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001dee:	f107 030c 	add.w	r3, r7, #12
 8001df2:	4619      	mov	r1, r3
 8001df4:	4811      	ldr	r0, [pc, #68]	; (8001e3c <_ZL12MX_TIM3_Initv+0xb4>)
 8001df6:	f004 f827 	bl	8005e48 <HAL_TIM_Encoder_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	bf14      	ite	ne
 8001e00:	2301      	movne	r3, #1
 8001e02:	2300      	moveq	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 8001e0a:	f000 fac7 	bl	800239c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e12:	2300      	movs	r3, #0
 8001e14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e16:	1d3b      	adds	r3, r7, #4
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4808      	ldr	r0, [pc, #32]	; (8001e3c <_ZL12MX_TIM3_Initv+0xb4>)
 8001e1c:	f004 fd22 	bl	8006864 <HAL_TIMEx_MasterConfigSynchronization>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	bf14      	ite	ne
 8001e26:	2301      	movne	r3, #1
 8001e28:	2300      	moveq	r3, #0
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 8001e30:	f000 fab4 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e34:	bf00      	nop
 8001e36:	3730      	adds	r7, #48	; 0x30
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20000228 	.word	0x20000228
 8001e40:	40000400 	.word	0x40000400

08001e44 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08c      	sub	sp, #48	; 0x30
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e4a:	f107 030c 	add.w	r3, r7, #12
 8001e4e:	2224      	movs	r2, #36	; 0x24
 8001e50:	2100      	movs	r1, #0
 8001e52:	4618      	mov	r0, r3
 8001e54:	f008 fdae 	bl	800a9b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e58:	1d3b      	adds	r3, r7, #4
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e60:	4b25      	ldr	r3, [pc, #148]	; (8001ef8 <_ZL12MX_TIM4_Initv+0xb4>)
 8001e62:	4a26      	ldr	r2, [pc, #152]	; (8001efc <_ZL12MX_TIM4_Initv+0xb8>)
 8001e64:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001e66:	4b24      	ldr	r3, [pc, #144]	; (8001ef8 <_ZL12MX_TIM4_Initv+0xb4>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e6c:	4b22      	ldr	r3, [pc, #136]	; (8001ef8 <_ZL12MX_TIM4_Initv+0xb4>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001e72:	4b21      	ldr	r3, [pc, #132]	; (8001ef8 <_ZL12MX_TIM4_Initv+0xb4>)
 8001e74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e78:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e7a:	4b1f      	ldr	r3, [pc, #124]	; (8001ef8 <_ZL12MX_TIM4_Initv+0xb4>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e80:	4b1d      	ldr	r3, [pc, #116]	; (8001ef8 <_ZL12MX_TIM4_Initv+0xb4>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e86:	2303      	movs	r3, #3
 8001e88:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e92:	2300      	movs	r3, #0
 8001e94:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001eaa:	f107 030c 	add.w	r3, r7, #12
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4811      	ldr	r0, [pc, #68]	; (8001ef8 <_ZL12MX_TIM4_Initv+0xb4>)
 8001eb2:	f003 ffc9 	bl	8005e48 <HAL_TIM_Encoder_Init>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	bf14      	ite	ne
 8001ebc:	2301      	movne	r3, #1
 8001ebe:	2300      	moveq	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 8001ec6:	f000 fa69 	bl	800239c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ed2:	1d3b      	adds	r3, r7, #4
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4808      	ldr	r0, [pc, #32]	; (8001ef8 <_ZL12MX_TIM4_Initv+0xb4>)
 8001ed8:	f004 fcc4 	bl	8006864 <HAL_TIMEx_MasterConfigSynchronization>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	bf14      	ite	ne
 8001ee2:	2301      	movne	r3, #1
 8001ee4:	2300      	moveq	r3, #0
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 8001eec:	f000 fa56 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ef0:	bf00      	nop
 8001ef2:	3730      	adds	r7, #48	; 0x30
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000270 	.word	0x20000270
 8001efc:	40000800 	.word	0x40000800

08001f00 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08c      	sub	sp, #48	; 0x30
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f06:	f107 030c 	add.w	r3, r7, #12
 8001f0a:	2224      	movs	r2, #36	; 0x24
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f008 fd50 	bl	800a9b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f14:	1d3b      	adds	r3, r7, #4
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001f1c:	4b25      	ldr	r3, [pc, #148]	; (8001fb4 <_ZL12MX_TIM5_Initv+0xb4>)
 8001f1e:	4a26      	ldr	r2, [pc, #152]	; (8001fb8 <_ZL12MX_TIM5_Initv+0xb8>)
 8001f20:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001f22:	4b24      	ldr	r3, [pc, #144]	; (8001fb4 <_ZL12MX_TIM5_Initv+0xb4>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f28:	4b22      	ldr	r3, [pc, #136]	; (8001fb4 <_ZL12MX_TIM5_Initv+0xb4>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001f2e:	4b21      	ldr	r3, [pc, #132]	; (8001fb4 <_ZL12MX_TIM5_Initv+0xb4>)
 8001f30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f34:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f36:	4b1f      	ldr	r3, [pc, #124]	; (8001fb4 <_ZL12MX_TIM5_Initv+0xb4>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f3c:	4b1d      	ldr	r3, [pc, #116]	; (8001fb4 <_ZL12MX_TIM5_Initv+0xb4>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f42:	2303      	movs	r3, #3
 8001f44:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f56:	2300      	movs	r3, #0
 8001f58:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001f66:	f107 030c 	add.w	r3, r7, #12
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4811      	ldr	r0, [pc, #68]	; (8001fb4 <_ZL12MX_TIM5_Initv+0xb4>)
 8001f6e:	f003 ff6b 	bl	8005e48 <HAL_TIM_Encoder_Init>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	bf14      	ite	ne
 8001f78:	2301      	movne	r3, #1
 8001f7a:	2300      	moveq	r3, #0
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <_ZL12MX_TIM5_Initv+0x86>
  {
    Error_Handler();
 8001f82:	f000 fa0b 	bl	800239c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f86:	2300      	movs	r3, #0
 8001f88:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f8e:	1d3b      	adds	r3, r7, #4
 8001f90:	4619      	mov	r1, r3
 8001f92:	4808      	ldr	r0, [pc, #32]	; (8001fb4 <_ZL12MX_TIM5_Initv+0xb4>)
 8001f94:	f004 fc66 	bl	8006864 <HAL_TIMEx_MasterConfigSynchronization>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	bf14      	ite	ne
 8001f9e:	2301      	movne	r3, #1
 8001fa0:	2300      	moveq	r3, #0
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <_ZL12MX_TIM5_Initv+0xac>
  {
    Error_Handler();
 8001fa8:	f000 f9f8 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001fac:	bf00      	nop
 8001fae:	3730      	adds	r7, #48	; 0x30
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	200002b8 	.word	0x200002b8
 8001fb8:	40000c00 	.word	0x40000c00

08001fbc <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fc2:	463b      	mov	r3, r7
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001fca:	4b1a      	ldr	r3, [pc, #104]	; (8002034 <_ZL12MX_TIM6_Initv+0x78>)
 8001fcc:	4a1a      	ldr	r2, [pc, #104]	; (8002038 <_ZL12MX_TIM6_Initv+0x7c>)
 8001fce:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4199;
 8001fd0:	4b18      	ldr	r3, [pc, #96]	; (8002034 <_ZL12MX_TIM6_Initv+0x78>)
 8001fd2:	f241 0267 	movw	r2, #4199	; 0x1067
 8001fd6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fd8:	4b16      	ldr	r3, [pc, #88]	; (8002034 <_ZL12MX_TIM6_Initv+0x78>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200;
 8001fde:	4b15      	ldr	r3, [pc, #84]	; (8002034 <_ZL12MX_TIM6_Initv+0x78>)
 8001fe0:	22c8      	movs	r2, #200	; 0xc8
 8001fe2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe4:	4b13      	ldr	r3, [pc, #76]	; (8002034 <_ZL12MX_TIM6_Initv+0x78>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001fea:	4812      	ldr	r0, [pc, #72]	; (8002034 <_ZL12MX_TIM6_Initv+0x78>)
 8001fec:	f003 fce4 	bl	80059b8 <HAL_TIM_Base_Init>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	bf14      	ite	ne
 8001ff6:	2301      	movne	r3, #1
 8001ff8:	2300      	moveq	r3, #0
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <_ZL12MX_TIM6_Initv+0x48>
  {
    Error_Handler();
 8002000:	f000 f9cc 	bl	800239c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002004:	2300      	movs	r3, #0
 8002006:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002008:	2300      	movs	r3, #0
 800200a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800200c:	463b      	mov	r3, r7
 800200e:	4619      	mov	r1, r3
 8002010:	4808      	ldr	r0, [pc, #32]	; (8002034 <_ZL12MX_TIM6_Initv+0x78>)
 8002012:	f004 fc27 	bl	8006864 <HAL_TIMEx_MasterConfigSynchronization>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	bf14      	ite	ne
 800201c:	2301      	movne	r3, #1
 800201e:	2300      	moveq	r3, #0
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <_ZL12MX_TIM6_Initv+0x6e>
  {
    Error_Handler();
 8002026:	f000 f9b9 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20000300 	.word	0x20000300
 8002038:	40001000 	.word	0x40001000

0800203c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002040:	4b13      	ldr	r3, [pc, #76]	; (8002090 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002042:	4a14      	ldr	r2, [pc, #80]	; (8002094 <_ZL19MX_USART1_UART_Initv+0x58>)
 8002044:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002046:	4b12      	ldr	r3, [pc, #72]	; (8002090 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002048:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800204c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800204e:	4b10      	ldr	r3, [pc, #64]	; (8002090 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002050:	2200      	movs	r2, #0
 8002052:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002054:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002056:	2200      	movs	r2, #0
 8002058:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800205a:	4b0d      	ldr	r3, [pc, #52]	; (8002090 <_ZL19MX_USART1_UART_Initv+0x54>)
 800205c:	2200      	movs	r2, #0
 800205e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002060:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002062:	220c      	movs	r2, #12
 8002064:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002066:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002068:	2200      	movs	r2, #0
 800206a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800206c:	4b08      	ldr	r3, [pc, #32]	; (8002090 <_ZL19MX_USART1_UART_Initv+0x54>)
 800206e:	2200      	movs	r2, #0
 8002070:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002072:	4807      	ldr	r0, [pc, #28]	; (8002090 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002074:	f004 fcd8 	bl	8006a28 <HAL_UART_Init>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	bf14      	ite	ne
 800207e:	2301      	movne	r3, #1
 8002080:	2300      	moveq	r3, #0
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8002088:	f000 f988 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20000348 	.word	0x20000348
 8002094:	40011000 	.word	0x40011000

08002098 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800209c:	4b13      	ldr	r3, [pc, #76]	; (80020ec <_ZL19MX_USART3_UART_Initv+0x54>)
 800209e:	4a14      	ldr	r2, [pc, #80]	; (80020f0 <_ZL19MX_USART3_UART_Initv+0x58>)
 80020a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80020a2:	4b12      	ldr	r3, [pc, #72]	; (80020ec <_ZL19MX_USART3_UART_Initv+0x54>)
 80020a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020aa:	4b10      	ldr	r3, [pc, #64]	; (80020ec <_ZL19MX_USART3_UART_Initv+0x54>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020b0:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <_ZL19MX_USART3_UART_Initv+0x54>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <_ZL19MX_USART3_UART_Initv+0x54>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020bc:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <_ZL19MX_USART3_UART_Initv+0x54>)
 80020be:	220c      	movs	r2, #12
 80020c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020c2:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <_ZL19MX_USART3_UART_Initv+0x54>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020c8:	4b08      	ldr	r3, [pc, #32]	; (80020ec <_ZL19MX_USART3_UART_Initv+0x54>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020ce:	4807      	ldr	r0, [pc, #28]	; (80020ec <_ZL19MX_USART3_UART_Initv+0x54>)
 80020d0:	f004 fcaa 	bl	8006a28 <HAL_UART_Init>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	bf14      	ite	ne
 80020da:	2301      	movne	r3, #1
 80020dc:	2300      	moveq	r3, #0
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 80020e4:	f000 f95a 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	2000038c 	.word	0x2000038c
 80020f0:	40004800 	.word	0x40004800

080020f4 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	607b      	str	r3, [r7, #4]
 80020fe:	4b10      	ldr	r3, [pc, #64]	; (8002140 <_ZL11MX_DMA_Initv+0x4c>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	4a0f      	ldr	r2, [pc, #60]	; (8002140 <_ZL11MX_DMA_Initv+0x4c>)
 8002104:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002108:	6313      	str	r3, [r2, #48]	; 0x30
 800210a:	4b0d      	ldr	r3, [pc, #52]	; (8002140 <_ZL11MX_DMA_Initv+0x4c>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002112:	607b      	str	r3, [r7, #4]
 8002114:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002116:	2200      	movs	r2, #0
 8002118:	2105      	movs	r1, #5
 800211a:	203a      	movs	r0, #58	; 0x3a
 800211c:	f001 ff9e 	bl	800405c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002120:	203a      	movs	r0, #58	; 0x3a
 8002122:	f001 ffb7 	bl	8004094 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8002126:	2200      	movs	r2, #0
 8002128:	2105      	movs	r1, #5
 800212a:	2046      	movs	r0, #70	; 0x46
 800212c:	f001 ff96 	bl	800405c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002130:	2046      	movs	r0, #70	; 0x46
 8002132:	f001 ffaf 	bl	8004094 <HAL_NVIC_EnableIRQ>

}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40023800 	.word	0x40023800

08002144 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08e      	sub	sp, #56	; 0x38
 8002148:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	605a      	str	r2, [r3, #4]
 8002154:	609a      	str	r2, [r3, #8]
 8002156:	60da      	str	r2, [r3, #12]
 8002158:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	623b      	str	r3, [r7, #32]
 800215e:	4b61      	ldr	r3, [pc, #388]	; (80022e4 <_ZL12MX_GPIO_Initv+0x1a0>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	4a60      	ldr	r2, [pc, #384]	; (80022e4 <_ZL12MX_GPIO_Initv+0x1a0>)
 8002164:	f043 0304 	orr.w	r3, r3, #4
 8002168:	6313      	str	r3, [r2, #48]	; 0x30
 800216a:	4b5e      	ldr	r3, [pc, #376]	; (80022e4 <_ZL12MX_GPIO_Initv+0x1a0>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	623b      	str	r3, [r7, #32]
 8002174:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	61fb      	str	r3, [r7, #28]
 800217a:	4b5a      	ldr	r3, [pc, #360]	; (80022e4 <_ZL12MX_GPIO_Initv+0x1a0>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	4a59      	ldr	r2, [pc, #356]	; (80022e4 <_ZL12MX_GPIO_Initv+0x1a0>)
 8002180:	f043 0320 	orr.w	r3, r3, #32
 8002184:	6313      	str	r3, [r2, #48]	; 0x30
 8002186:	4b57      	ldr	r3, [pc, #348]	; (80022e4 <_ZL12MX_GPIO_Initv+0x1a0>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f003 0320 	and.w	r3, r3, #32
 800218e:	61fb      	str	r3, [r7, #28]
 8002190:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	61bb      	str	r3, [r7, #24]
 8002196:	4b53      	ldr	r3, [pc, #332]	; (80022e4 <_ZL12MX_GPIO_Initv+0x1a0>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	4a52      	ldr	r2, [pc, #328]	; (80022e4 <_ZL12MX_GPIO_Initv+0x1a0>)
 800219c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021a0:	6313      	str	r3, [r2, #48]	; 0x30
 80021a2:	4b50      	ldr	r3, [pc, #320]	; (80022e4 <_ZL12MX_GPIO_Initv+0x1a0>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021aa:	61bb      	str	r3, [r7, #24]
 80021ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	4b4c      	ldr	r3, [pc, #304]	; (80022e4 <_ZL12MX_GPIO_Initv+0x1a0>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	4a4b      	ldr	r2, [pc, #300]	; (80022e4 <_ZL12MX_GPIO_Initv+0x1a0>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6313      	str	r3, [r2, #48]	; 0x30
 80021be:	4b49      	ldr	r3, [pc, #292]	; (80022e4 <_ZL12MX_GPIO_Initv+0x1a0>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	613b      	str	r3, [r7, #16]
 80021ce:	4b45      	ldr	r3, [pc, #276]	; (80022e4 <_ZL12MX_GPIO_Initv+0x1a0>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	4a44      	ldr	r2, [pc, #272]	; (80022e4 <_ZL12MX_GPIO_Initv+0x1a0>)
 80021d4:	f043 0302 	orr.w	r3, r3, #2
 80021d8:	6313      	str	r3, [r2, #48]	; 0x30
 80021da:	4b42      	ldr	r3, [pc, #264]	; (80022e4 <_ZL12MX_GPIO_Initv+0x1a0>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	4b3e      	ldr	r3, [pc, #248]	; (80022e4 <_ZL12MX_GPIO_Initv+0x1a0>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	4a3d      	ldr	r2, [pc, #244]	; (80022e4 <_ZL12MX_GPIO_Initv+0x1a0>)
 80021f0:	f043 0310 	orr.w	r3, r3, #16
 80021f4:	6313      	str	r3, [r2, #48]	; 0x30
 80021f6:	4b3b      	ldr	r3, [pc, #236]	; (80022e4 <_ZL12MX_GPIO_Initv+0x1a0>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	f003 0310 	and.w	r3, r3, #16
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	4b37      	ldr	r3, [pc, #220]	; (80022e4 <_ZL12MX_GPIO_Initv+0x1a0>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	4a36      	ldr	r2, [pc, #216]	; (80022e4 <_ZL12MX_GPIO_Initv+0x1a0>)
 800220c:	f043 0308 	orr.w	r3, r3, #8
 8002210:	6313      	str	r3, [r2, #48]	; 0x30
 8002212:	4b34      	ldr	r3, [pc, #208]	; (80022e4 <_ZL12MX_GPIO_Initv+0x1a0>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	60bb      	str	r3, [r7, #8]
 800221c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	607b      	str	r3, [r7, #4]
 8002222:	4b30      	ldr	r3, [pc, #192]	; (80022e4 <_ZL12MX_GPIO_Initv+0x1a0>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	4a2f      	ldr	r2, [pc, #188]	; (80022e4 <_ZL12MX_GPIO_Initv+0x1a0>)
 8002228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800222c:	6313      	str	r3, [r2, #48]	; 0x30
 800222e:	4b2d      	ldr	r3, [pc, #180]	; (80022e4 <_ZL12MX_GPIO_Initv+0x1a0>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002236:	607b      	str	r3, [r7, #4]
 8002238:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800223a:	2200      	movs	r2, #0
 800223c:	f244 0181 	movw	r1, #16513	; 0x4081
 8002240:	4829      	ldr	r0, [pc, #164]	; (80022e8 <_ZL12MX_GPIO_Initv+0x1a4>)
 8002242:	f002 fcfb 	bl	8004c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|FR_D_Pin|FL_D_Pin|BR_D_Pin
 8002246:	2200      	movs	r2, #0
 8002248:	f647 0140 	movw	r1, #30784	; 0x7840
 800224c:	4827      	ldr	r0, [pc, #156]	; (80022ec <_ZL12MX_GPIO_Initv+0x1a8>)
 800224e:	f002 fcf5 	bl	8004c3c <HAL_GPIO_WritePin>
                          |BL_D_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002252:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002258:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800225c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225e:	2300      	movs	r3, #0
 8002260:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002266:	4619      	mov	r1, r3
 8002268:	4821      	ldr	r0, [pc, #132]	; (80022f0 <_ZL12MX_GPIO_Initv+0x1ac>)
 800226a:	f002 fb23 	bl	80048b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800226e:	f244 0381 	movw	r3, #16513	; 0x4081
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002274:	2301      	movs	r3, #1
 8002276:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227c:	2300      	movs	r3, #0
 800227e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002284:	4619      	mov	r1, r3
 8002286:	4818      	ldr	r0, [pc, #96]	; (80022e8 <_ZL12MX_GPIO_Initv+0x1a4>)
 8002288:	f002 fb14 	bl	80048b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin FR_D_Pin FL_D_Pin BR_D_Pin
                           BL_D_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|FR_D_Pin|FL_D_Pin|BR_D_Pin
 800228c:	f647 0340 	movw	r3, #30784	; 0x7840
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
                          |BL_D_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002292:	2301      	movs	r3, #1
 8002294:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229a:	2300      	movs	r3, #0
 800229c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800229e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a2:	4619      	mov	r1, r3
 80022a4:	4811      	ldr	r0, [pc, #68]	; (80022ec <_ZL12MX_GPIO_Initv+0x1a8>)
 80022a6:	f002 fb05 	bl	80048b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80022aa:	2380      	movs	r3, #128	; 0x80
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ae:	2300      	movs	r3, #0
 80022b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80022b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ba:	4619      	mov	r1, r3
 80022bc:	480b      	ldr	r0, [pc, #44]	; (80022ec <_ZL12MX_GPIO_Initv+0x1a8>)
 80022be:	f002 faf9 	bl	80048b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : L_BTN_Pin R_BTN_Pin U_BTN_Pin D_BTN_Pin
                           O_BTN_Pin */
  GPIO_InitStruct.Pin = L_BTN_Pin|R_BTN_Pin|U_BTN_Pin|D_BTN_Pin
 80022c2:	231f      	movs	r3, #31
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
                          |O_BTN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c6:	2300      	movs	r3, #0
 80022c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d2:	4619      	mov	r1, r3
 80022d4:	4807      	ldr	r0, [pc, #28]	; (80022f4 <_ZL12MX_GPIO_Initv+0x1b0>)
 80022d6:	f002 faed 	bl	80048b4 <HAL_GPIO_Init>

}
 80022da:	bf00      	nop
 80022dc:	3738      	adds	r7, #56	; 0x38
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40020400 	.word	0x40020400
 80022ec:	40021800 	.word	0x40021800
 80022f0:	40020800 	.word	0x40020800
 80022f4:	40020c00 	.word	0x40020c00

080022f8 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1)
 8002300:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002304:	480f      	ldr	r0, [pc, #60]	; (8002344 <_Z16StartDefaultTaskPv+0x4c>)
 8002306:	f002 fc81 	bl	8004c0c <HAL_GPIO_ReadPin>
 800230a:	4603      	mov	r3, r0
 800230c:	2b01      	cmp	r3, #1
 800230e:	bf0c      	ite	eq
 8002310:	2301      	moveq	r3, #1
 8002312:	2300      	movne	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d008      	beq.n	800232c <_Z16StartDefaultTaskPv+0x34>
	{
		TIM1->CCR4 = 500 ;
 800231a:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <_Z16StartDefaultTaskPv+0x50>)
 800231c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002320:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);}
 8002322:	210c      	movs	r1, #12
 8002324:	4809      	ldr	r0, [pc, #36]	; (800234c <_Z16StartDefaultTaskPv+0x54>)
 8002326:	f003 fc57 	bl	8005bd8 <HAL_TIM_PWM_Start>
 800232a:	e006      	b.n	800233a <_Z16StartDefaultTaskPv+0x42>
	else
	{
		TIM1->CCR4 = 0 ;
 800232c:	4b06      	ldr	r3, [pc, #24]	; (8002348 <_Z16StartDefaultTaskPv+0x50>)
 800232e:	2200      	movs	r2, #0
 8002330:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 8002332:	210c      	movs	r1, #12
 8002334:	4805      	ldr	r0, [pc, #20]	; (800234c <_Z16StartDefaultTaskPv+0x54>)
 8002336:	f003 fd17 	bl	8005d68 <HAL_TIM_PWM_Stop>
	}
    osDelay(1);
 800233a:	2001      	movs	r0, #1
 800233c:	f005 fe70 	bl	8008020 <osDelay>
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1)
 8002340:	e7de      	b.n	8002300 <_Z16StartDefaultTaskPv+0x8>
 8002342:	bf00      	nop
 8002344:	40020800 	.word	0x40020800
 8002348:	40010000 	.word	0x40010000
 800234c:	20000198 	.word	0x20000198

08002350 <_Z11StartTask02Pv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	loop();
 8002358:	f7ff fa10 	bl	800177c <loop>
    osDelay(10000);
 800235c:	f242 7010 	movw	r0, #10000	; 0x2710
 8002360:	f005 fe5e 	bl	8008020 <osDelay>
	loop();
 8002364:	e7f8      	b.n	8002358 <_Z11StartTask02Pv+0x8>

08002366 <_Z11StartTask03Pv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800236e:	2001      	movs	r0, #1
 8002370:	f005 fe56 	bl	8008020 <osDelay>
 8002374:	e7fb      	b.n	800236e <_Z11StartTask03Pv+0x8>
	...

08002378 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a04      	ldr	r2, [pc, #16]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d101      	bne.n	800238e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800238a:	f001 fb1d 	bl	80039c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40014400 	.word	0x40014400

0800239c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023a0:	b672      	cpsid	i
}
 80023a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023a4:	e7fe      	b.n	80023a4 <Error_Handler+0x8>

080023a6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80023a6:	b480      	push	{r7}
 80023a8:	b085      	sub	sp, #20
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
 80023ae:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80023b0:	2300      	movs	r3, #0
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	d80d      	bhi.n	80023d6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	fa22 f103 	lsr.w	r1, r2, r3
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	4413      	add	r3, r2
 80023ca:	b2ca      	uxtb	r2, r1
 80023cc:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	3301      	adds	r3, #1
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	e7ee      	b.n	80023b4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80023d6:	bf00      	nop
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80023e2:	b480      	push	{r7}
 80023e4:	b085      	sub	sp, #20
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
 80023ea:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80023f2:	2300      	movs	r3, #0
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	d811      	bhi.n	8002420 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6839      	ldr	r1, [r7, #0]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	440a      	add	r2, r1
 8002406:	7812      	ldrb	r2, [r2, #0]
 8002408:	4611      	mov	r1, r2
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	00d2      	lsls	r2, r2, #3
 800240e:	fa01 f202 	lsl.w	r2, r1, r2
 8002412:	431a      	orrs	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	3301      	adds	r3, #1
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	e7ea      	b.n	80023f6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8002420:	bf00      	nop
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	4a04      	ldr	r2, [pc, #16]	; (8002448 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4618      	mov	r0, r3
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	0800afac 	.word	0x0800afac

0800244c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff ffe8 	bl	800242c <_ZN3ros15NodeHandleBase_C1Ev>
 800245c:	4a3a      	ldr	r2, [pc, #232]	; (8002548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	3304      	adds	r3, #4
 8002466:	4618      	mov	r0, r3
 8002468:	f7fe ff0a 	bl	8001280 <_ZN13STM32HardwareC1Ev>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f603 1314 	addw	r3, r3, #2324	; 0x914
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe fbf4 	bl	8000c68 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	2b18      	cmp	r3, #24
 8002488:	d80b      	bhi.n	80024a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	2200      	movs	r2, #0
 8002498:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	3301      	adds	r3, #1
 800249e:	617b      	str	r3, [r7, #20]
 80024a0:	e7f0      	b.n	8002484 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80024a2:	2300      	movs	r3, #0
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	2b18      	cmp	r3, #24
 80024aa:	d80a      	bhi.n	80024c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80024b4:	2100      	movs	r1, #0
 80024b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	3301      	adds	r3, #1
 80024be:	613b      	str	r3, [r7, #16]
 80024c0:	e7f1      	b.n	80024a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024cc:	d20a      	bcs.n	80024e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4413      	add	r3, r2
 80024d4:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80024d8:	2200      	movs	r2, #0
 80024da:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	3301      	adds	r3, #1
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	e7f0      	b.n	80024c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80024e4:	2300      	movs	r3, #0
 80024e6:	60bb      	str	r3, [r7, #8]
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024ee:	d20a      	bcs.n	8002506 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	4413      	add	r3, r2
 80024f6:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80024fa:	2200      	movs	r2, #0
 80024fc:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	3301      	adds	r3, #1
 8002502:	60bb      	str	r3, [r7, #8]
 8002504:	e7f0      	b.n	80024e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4618      	mov	r0, r3
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	0800af50 	.word	0x0800af50

0800254c <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	4a04      	ldr	r2, [pc, #16]	; (8002568 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	0800af94 	.word	0x0800af94

0800256c <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
 8002578:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff ffe5 	bl	800254c <_ZN3ros11Subscriber_C1Ev>
 8002582:	4a0b      	ldr	r2, [pc, #44]	; (80025b0 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei+0x44>)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	330c      	adds	r3, #12
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff f831 	bl	80015f4 <_ZN8std_msgs4BoolC1Ev>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	615a      	str	r2, [r3, #20]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	609a      	str	r2, [r3, #8]
  };
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	0800af38 	.word	0x0800af38

080025b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3304      	adds	r3, #4
  }
 80025c0:	4618      	mov	r0, r3
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3304      	adds	r3, #4
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fe fe6d 	bl	80012b8 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 80025fe:	bf00      	nop
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8002606:	b480      	push	{r7}
 8002608:	b085      	sub	sp, #20
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
 800260e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002610:	2300      	movs	r3, #0
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2b18      	cmp	r3, #24
 8002618:	dc1e      	bgt.n	8002658 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d111      	bne.n	8002650 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	60da      	str	r2, [r3, #12]
        return true;
 800264c:	2301      	movs	r3, #1
 800264e:	e004      	b.n	800265a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	3301      	adds	r3, #1
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	e7dd      	b.n	8002614 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8002658:	2300      	movs	r3, #0
  }
 800265a:	4618      	mov	r0, r3
 800265c:	3714      	adds	r7, #20
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_>:

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8002666:	b480      	push	{r7}
 8002668:	b085      	sub	sp, #20
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
 800266e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2b18      	cmp	r3, #24
 8002678:	dc19      	bgt.n	80026ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10d      	bne.n	80026a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 800268a:	6839      	ldr	r1, [r7, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	605a      	str	r2, [r3, #4]
        return true;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e004      	b.n	80026b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	3301      	adds	r3, #1
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	e7e2      	b.n	8002674 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_+0xe>
      }
    }
    return false;
 80026ae:	2300      	movs	r3, #0
  }
 80026b0:	4618      	mov	r0, r3
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3304      	adds	r3, #4
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7fe feeb 	bl	80014a4 <_ZN13STM32Hardware4timeEv>
 80026ce:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80026de:	4293      	cmp	r3, r2
 80026e0:	d903      	bls.n	80026ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d009      	beq.n	8002708 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d903      	bls.n	8002708 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800270e:	2b00      	cmp	r3, #0
 8002710:	d014      	beq.n	800273c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	3304      	adds	r3, #4
 8002716:	4618      	mov	r0, r3
 8002718:	f7fe fec4 	bl	80014a4 <_ZN13STM32Hardware4timeEv>
 800271c:	4602      	mov	r2, r0
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	1ad2      	subs	r2, r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002728:	429a      	cmp	r2, r3
 800272a:	bf8c      	ite	hi
 800272c:	2301      	movhi	r3, #1
 800272e:	2300      	movls	r3, #0
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d002      	beq.n	800273c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8002736:	f06f 0301 	mvn.w	r3, #1
 800273a:	e194      	b.n	8002a66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3304      	adds	r3, #4
 8002740:	4618      	mov	r0, r3
 8002742:	f7fe fdd5 	bl	80012f0 <_ZN13STM32Hardware4readEv>
 8002746:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	f2c0 8174 	blt.w	8002a38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	441a      	add	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002766:	2b07      	cmp	r3, #7
 8002768:	d11e      	bne.n	80027a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8002770:	1c59      	adds	r1, r3, #1
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8002778:	68ba      	ldr	r2, [r7, #8]
 800277a:	b2d1      	uxtb	r1, r2
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	4413      	add	r3, r2
 8002780:	460a      	mov	r2, r1
 8002782:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800278c:	1e5a      	subs	r2, r3, #1
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1b4      	bne.n	8002708 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2208      	movs	r2, #8
 80027a2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80027a6:	e7af      	b.n	8002708 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d128      	bne.n	8002804 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2bff      	cmp	r3, #255	; 0xff
 80027b6:	d10d      	bne.n	80027d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80027be:	1c5a      	adds	r2, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f103 0214 	add.w	r2, r3, #20
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80027d2:	e799      	b.n	8002708 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3304      	adds	r3, #4
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fe fe63 	bl	80014a4 <_ZN13STM32Hardware4timeEv>
 80027de:	4602      	mov	r2, r0
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e8:	4293      	cmp	r3, r2
 80027ea:	bf8c      	ite	hi
 80027ec:	2301      	movhi	r3, #1
 80027ee:	2300      	movls	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d088      	beq.n	8002708 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 80027fe:	f06f 0301 	mvn.w	r3, #1
 8002802:	e130      	b.n	8002a66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800280a:	2b01      	cmp	r3, #1
 800280c:	d118      	bne.n	8002840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2bfe      	cmp	r3, #254	; 0xfe
 8002812:	d107      	bne.n	8002824 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002822:	e771      	b.n	8002708 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002832:	2b00      	cmp	r3, #0
 8002834:	f47f af68 	bne.w	8002708 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 f918 	bl	8002a6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 800283e:	e763      	b.n	8002708 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002846:	2b02      	cmp	r3, #2
 8002848:	d113      	bne.n	8002872 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68ba      	ldr	r2, [r7, #8]
 800284e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002860:	1c5a      	adds	r2, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8002870:	e74a      	b.n	8002708 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002878:	2b03      	cmp	r3, #3
 800287a:	d110      	bne.n	800289e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	021b      	lsls	r3, r3, #8
 8002886:	441a      	add	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800289c:	e734      	b.n	8002708 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	d116      	bne.n	80028d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80028ae:	425a      	negs	r2, r3
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	bf58      	it	pl
 80028b6:	4253      	negpl	r3, r2
 80028b8:	2bff      	cmp	r3, #255	; 0xff
 80028ba:	d107      	bne.n	80028cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80028ca:	e71d      	b.n	8002708 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80028d4:	e718      	b.n	8002708 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80028dc:	2b05      	cmp	r3, #5
 80028de:	d10f      	bne.n	8002900 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80028ee:	1c5a      	adds	r2, r3, #1
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80028fe:	e703      	b.n	8002708 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002906:	2b06      	cmp	r3, #6
 8002908:	d117      	bne.n	800293a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	021b      	lsls	r3, r3, #8
 8002914:	441a      	add	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2207      	movs	r2, #7
 8002920:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800292a:	2b00      	cmp	r3, #0
 800292c:	f47f aeec 	bne.w	8002708 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2208      	movs	r2, #8
 8002934:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002938:	e6e6      	b.n	8002708 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002940:	2b08      	cmp	r3, #8
 8002942:	f47f aee1 	bne.w	8002708 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8002954:	425a      	negs	r2, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	b2d2      	uxtb	r2, r2
 800295a:	bf58      	it	pl
 800295c:	4253      	negpl	r3, r2
 800295e:	2bff      	cmp	r3, #255	; 0xff
 8002960:	f47f aed2 	bne.w	8002708 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800296a:	2b00      	cmp	r3, #0
 800296c:	d110      	bne.n	8002990 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f87d 	bl	8002a6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f898 	bl	8002aaa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 800298a:	f04f 33ff 	mov.w	r3, #4294967295
 800298e:	e06a      	b.n	8002a66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002996:	2b0a      	cmp	r3, #10
 8002998:	d107      	bne.n	80029aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80029a0:	4619      	mov	r1, r3
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f960 	bl	8002c68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80029a8:	e6ae      	b.n	8002708 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80029b0:	2b06      	cmp	r3, #6
 80029b2:	d10e      	bne.n	80029d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f603 1214 	addw	r2, r3, #2324	; 0x914
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80029c0:	4619      	mov	r1, r3
 80029c2:	4610      	mov	r0, r2
 80029c4:	f7fe fa85 	bl	8000ed2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80029d0:	e69a      	b.n	8002708 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80029d8:	2b0b      	cmp	r3, #11
 80029da:	d104      	bne.n	80029e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80029e4:	e690      	b.n	8002708 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80029ec:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80029f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f43f ae84 	beq.w	8002708 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002a06:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002a10:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002a1a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8002a32:	4611      	mov	r1, r2
 8002a34:	4798      	blx	r3
    while (true)
 8002a36:	e667      	b.n	8002708 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8002a38:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00f      	beq.n	8002a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d906      	bls.n	8002a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f809 	bl	8002a6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8002a64:	2300      	movs	r3, #0
  }
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b086      	sub	sp, #24
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8002a76:	f107 030c 	add.w	r3, r7, #12
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fd fd90 	bl	80005a0 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f107 020c 	add.w	r2, r7, #12
 8002a8a:	210a      	movs	r1, #10
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	4798      	blx	r3
    rt_time = hardware_.time();
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3304      	adds	r3, #4
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7fe fd05 	bl	80014a4 <_ZN13STM32Hardware4timeEv>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8002aa2:	bf00      	nop
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8002aaa:	b590      	push	{r4, r7, lr}
 8002aac:	b08b      	sub	sp, #44	; 0x2c
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8002ab2:	f107 030c 	add.w	r3, r7, #12
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fd fe62 	bl	8000780 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002abc:	2300      	movs	r3, #0
 8002abe:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	2b18      	cmp	r3, #24
 8002ac4:	dc63      	bgt.n	8002b8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d056      	beq.n	8002b86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	6859      	ldr	r1, [r3, #4]
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	3308      	adds	r3, #8
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4608      	mov	r0, r1
 8002b26:	4798      	blx	r3
 8002b28:	4603      	mov	r3, r0
 8002b2a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	6859      	ldr	r1, [r3, #4]
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	330c      	adds	r3, #12
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4608      	mov	r0, r1
 8002b54:	4798      	blx	r3
 8002b56:	4603      	mov	r3, r0
 8002b58:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8002b5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b5e:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681c      	ldr	r4, [r3, #0]
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fe fb64 	bl	8001242 <_ZN3ros9Publisher15getEndpointTypeEv>
 8002b7a:	4601      	mov	r1, r0
 8002b7c:	f107 030c 	add.w	r3, r7, #12
 8002b80:	461a      	mov	r2, r3
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	3301      	adds	r3, #1
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8c:	e798      	b.n	8002ac0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002b8e:	2300      	movs	r3, #0
 8002b90:	627b      	str	r3, [r7, #36]	; 0x24
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	2b18      	cmp	r3, #24
 8002b96:	dc5f      	bgt.n	8002c58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b9c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d053      	beq.n	8002c50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bac:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bbe:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bce:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002bd2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bda:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	3308      	adds	r3, #8
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4608      	mov	r0, r1
 8002bea:	4798      	blx	r3
 8002bec:	4603      	mov	r3, r0
 8002bee:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf4:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002bf8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c00:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	330c      	adds	r3, #12
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4608      	mov	r0, r1
 8002c10:	4798      	blx	r3
 8002c12:	4603      	mov	r3, r0
 8002c14:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8002c16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c1a:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681c      	ldr	r4, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c26:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002c2a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c32:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4608      	mov	r0, r1
 8002c42:	4798      	blx	r3
 8002c44:	4601      	mov	r1, r0
 8002c46:	f107 030c 	add.w	r3, r7, #12
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	3301      	adds	r3, #1
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
 8002c56:	e79c      	b.n	8002b92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8002c60:	bf00      	nop
 8002c62:	372c      	adds	r7, #44	; 0x2c
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd90      	pop	{r4, r7, pc}

08002c68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8002c72:	f107 0308 	add.w	r3, r7, #8
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fd fc92 	bl	80005a0 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3304      	adds	r3, #4
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7fe fc0f 	bl	80014a4 <_ZN13STM32Hardware4timeEv>
 8002c86:	4602      	mov	r2, r0
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8002c92:	f107 0308 	add.w	r3, r7, #8
 8002c96:	6839      	ldr	r1, [r7, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7fd fcf1 	bl	8000680 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	4915      	ldr	r1, [pc, #84]	; (8002cf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002ca4:	fba1 1303 	umull	r1, r3, r1, r3
 8002ca8:	099b      	lsrs	r3, r3, #6
 8002caa:	4413      	add	r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8002cae:	6939      	ldr	r1, [r7, #16]
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	4b11      	ldr	r3, [pc, #68]	; (8002cf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002cb4:	fba3 0302 	umull	r0, r3, r3, r2
 8002cb8:	099b      	lsrs	r3, r3, #6
 8002cba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cbe:	fb00 f303 	mul.w	r3, r0, r3
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	4a0d      	ldr	r2, [pc, #52]	; (8002cfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8002cc6:	fb02 f303 	mul.w	r3, r2, r3
 8002cca:	440b      	add	r3, r1
 8002ccc:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8002cce:	f107 0308 	add.w	r3, r7, #8
 8002cd2:	3304      	adds	r3, #4
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f8a6 	bl	8002e28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	3304      	adds	r3, #4
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fe fbdf 	bl	80014a4 <_ZN13STM32Hardware4timeEv>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8002cee:	bf00      	nop
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	10624dd3 	.word	0x10624dd3
 8002cfc:	000f4240 	.word	0x000f4240

08002d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2b63      	cmp	r3, #99	; 0x63
 8002d10:	dd09      	ble.n	8002d26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002d18:	f083 0301 	eor.w	r3, r3, #1
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8002d22:	2300      	movs	r3, #0
 8002d24:	e079      	b.n	8002e1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8002d32:	3207      	adds	r2, #7
 8002d34:	4611      	mov	r1, r2
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	4798      	blx	r3
 8002d3a:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	22ff      	movs	r2, #255	; 0xff
 8002d40:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	22fe      	movs	r2, #254	; 0xfe
 8002d48:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	0a1b      	lsrs	r3, r3, #8
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8002d72:	4413      	add	r3, r2
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	43db      	mvns	r3, r3
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	b21b      	sxth	r3, r3
 8002d8e:	121b      	asrs	r3, r3, #8
 8002d90:	b21b      	sxth	r3, r3
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002d9e:	2305      	movs	r3, #5
 8002da0:	61bb      	str	r3, [r7, #24]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	3306      	adds	r3, #6
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	dc0d      	bgt.n	8002dc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	4413      	add	r3, r2
 8002db2:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	461a      	mov	r2, r3
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	61bb      	str	r3, [r7, #24]
 8002dc6:	e7ec      	b.n	8002da2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	3307      	adds	r3, #7
 8002dcc:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	425a      	negs	r2, r3
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	bf58      	it	pl
 8002dd8:	4253      	negpl	r3, r2
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	1c59      	adds	r1, r3, #1
 8002de0:	6179      	str	r1, [r7, #20]
 8002de2:	43d2      	mvns	r2, r2
 8002de4:	b2d1      	uxtb	r1, r2
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	4413      	add	r3, r2
 8002dea:	460a      	mov	r2, r1
 8002dec:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002df6:	dc0a      	bgt.n	8002e0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	1d18      	adds	r0, r3, #4
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	4619      	mov	r1, r3
 8002e06:	f7fe faff 	bl	8001408 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	e005      	b.n	8002e1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8002e0e:	4905      	ldr	r1, [pc, #20]	; (8002e24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 f849 	bl	8002ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8002e16:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3720      	adds	r7, #32
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	0800ae40 	.word	0x0800ae40

08002e28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	3304      	adds	r3, #4
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fe fb34 	bl	80014a4 <_ZN13STM32Hardware4timeEv>
 8002e3c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	4915      	ldr	r1, [pc, #84]	; (8002e9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8002e46:	fba1 1303 	umull	r1, r3, r1, r3
 8002e4a:	099b      	lsrs	r3, r3, #6
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	1e5a      	subs	r2, r3, #1
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	6859      	ldr	r1, [r3, #4]
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4b0f      	ldr	r3, [pc, #60]	; (8002e9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8002e5e:	fba3 0302 	umull	r0, r3, r3, r2
 8002e62:	099b      	lsrs	r3, r3, #6
 8002e64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e68:	fb00 f303 	mul.w	r3, r0, r3
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	4a0c      	ldr	r2, [pc, #48]	; (8002ea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8002e70:	fb02 f303 	mul.w	r3, r2, r3
 8002e74:	1aca      	subs	r2, r1, r3
 8002e76:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8002e78:	4413      	add	r3, r2
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4610      	mov	r0, r2
 8002e90:	f7fd fb38 	bl	8000504 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8002e94:	bf00      	nop
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	10624dd3 	.word	0x10624dd3
 8002ea0:	000f4240 	.word	0x000f4240
 8002ea4:	3b9aca00 	.word	0x3b9aca00

08002ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	2103      	movs	r1, #3
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f804 	bl	8002ec4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8002ebc:	bf00      	nop
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b088      	sub	sp, #32
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	607a      	str	r2, [r7, #4]
 8002ed0:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8002ed2:	f107 0314 	add.w	r3, r7, #20
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fd fe16 	bl	8000b08 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8002edc:	7afb      	ldrb	r3, [r7, #11]
 8002ede:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f107 0214 	add.w	r2, r7, #20
 8002eee:	2107      	movs	r1, #7
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	4798      	blx	r3
  }
 8002ef4:	bf00      	nop
 8002ef6:	3720      	adds	r7, #32
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d116      	bne.n	8002f3a <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d111      	bne.n	8002f3a <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 8002f16:	480b      	ldr	r0, [pc, #44]	; (8002f44 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8002f18:	f7ff fa98 	bl	800244c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg ;
 8002f1c:	480a      	ldr	r0, [pc, #40]	; (8002f48 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8002f1e:	f7fe facd 	bl	80014bc <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 8002f22:	2300      	movs	r3, #0
 8002f24:	4a08      	ldr	r2, [pc, #32]	; (8002f48 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8002f26:	4909      	ldr	r1, [pc, #36]	; (8002f4c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8002f28:	4809      	ldr	r0, [pc, #36]	; (8002f50 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8002f2a:	f7fe f95f 	bl	80011ec <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Bool> kierunek("kierunek", &kierunekCallback);
 8002f2e:	2301      	movs	r3, #1
 8002f30:	4a08      	ldr	r2, [pc, #32]	; (8002f54 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8002f32:	4909      	ldr	r1, [pc, #36]	; (8002f58 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8002f34:	4809      	ldr	r0, [pc, #36]	; (8002f5c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8002f36:	f7ff fb19 	bl	800256c <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	2000049c 	.word	0x2000049c
 8002f48:	20000dd8 	.word	0x20000dd8
 8002f4c:	0800ae7c 	.word	0x0800ae7c
 8002f50:	20000de0 	.word	0x20000de0
 8002f54:	080016c9 	.word	0x080016c9
 8002f58:	0800ae84 	.word	0x0800ae84
 8002f5c:	20000df4 	.word	0x20000df4

08002f60 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	330c      	adds	r3, #12
 8002f6e:	6839      	ldr	r1, [r7, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fe fb6e 	bl	8001652 <_ZN8std_msgs4Bool11deserializeEPh>
    this->cb_(msg);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	320c      	adds	r2, #12
 8002f7e:	4610      	mov	r0, r2
 8002f80:	4798      	blx	r3
  }
 8002f82:	bf00      	nop
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <_ZN3ros10SubscriberIN8std_msgs4BoolEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
  }
 8002f96:	4618      	mov	r0, r3
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b082      	sub	sp, #8
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	330c      	adds	r3, #12
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fe fb6e 	bl	8001690 <_ZN8std_msgs4Bool7getTypeEv>
 8002fb4:	4603      	mov	r3, r0
  }
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <_ZN3ros10SubscriberIN8std_msgs4BoolEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	330c      	adds	r3, #12
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fe fb6e 	bl	80016ac <_ZN8std_msgs4Bool6getMD5Ev>
 8002fd0:	4603      	mov	r3, r0
  }
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
    return configured_;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8002fe8:	4618      	mov	r0, r3
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <_GLOBAL__sub_I_hadc1>:
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002ffc:	2001      	movs	r0, #1
 8002ffe:	f7ff ff7d 	bl	8002efc <_Z41__static_initialization_and_destruction_0ii>
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	607b      	str	r3, [r7, #4]
 800300e:	4b12      	ldr	r3, [pc, #72]	; (8003058 <HAL_MspInit+0x54>)
 8003010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003012:	4a11      	ldr	r2, [pc, #68]	; (8003058 <HAL_MspInit+0x54>)
 8003014:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003018:	6453      	str	r3, [r2, #68]	; 0x44
 800301a:	4b0f      	ldr	r3, [pc, #60]	; (8003058 <HAL_MspInit+0x54>)
 800301c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003022:	607b      	str	r3, [r7, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003026:	2300      	movs	r3, #0
 8003028:	603b      	str	r3, [r7, #0]
 800302a:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <HAL_MspInit+0x54>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	4a0a      	ldr	r2, [pc, #40]	; (8003058 <HAL_MspInit+0x54>)
 8003030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003034:	6413      	str	r3, [r2, #64]	; 0x40
 8003036:	4b08      	ldr	r3, [pc, #32]	; (8003058 <HAL_MspInit+0x54>)
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303e:	603b      	str	r3, [r7, #0]
 8003040:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003042:	2200      	movs	r2, #0
 8003044:	210f      	movs	r1, #15
 8003046:	f06f 0001 	mvn.w	r0, #1
 800304a:	f001 f807 	bl	800405c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40023800 	.word	0x40023800

0800305c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08a      	sub	sp, #40	; 0x28
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003064:	f107 0314 	add.w	r3, r7, #20
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	605a      	str	r2, [r3, #4]
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	60da      	str	r2, [r3, #12]
 8003072:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a17      	ldr	r2, [pc, #92]	; (80030d8 <HAL_ADC_MspInit+0x7c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d127      	bne.n	80030ce <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800307e:	2300      	movs	r3, #0
 8003080:	613b      	str	r3, [r7, #16]
 8003082:	4b16      	ldr	r3, [pc, #88]	; (80030dc <HAL_ADC_MspInit+0x80>)
 8003084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003086:	4a15      	ldr	r2, [pc, #84]	; (80030dc <HAL_ADC_MspInit+0x80>)
 8003088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800308c:	6453      	str	r3, [r2, #68]	; 0x44
 800308e:	4b13      	ldr	r3, [pc, #76]	; (80030dc <HAL_ADC_MspInit+0x80>)
 8003090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003096:	613b      	str	r3, [r7, #16]
 8003098:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	4b0f      	ldr	r3, [pc, #60]	; (80030dc <HAL_ADC_MspInit+0x80>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	4a0e      	ldr	r2, [pc, #56]	; (80030dc <HAL_ADC_MspInit+0x80>)
 80030a4:	f043 0301 	orr.w	r3, r3, #1
 80030a8:	6313      	str	r3, [r2, #48]	; 0x30
 80030aa:	4b0c      	ldr	r3, [pc, #48]	; (80030dc <HAL_ADC_MspInit+0x80>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80030b6:	2308      	movs	r3, #8
 80030b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030ba:	2303      	movs	r3, #3
 80030bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030be:	2300      	movs	r3, #0
 80030c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030c2:	f107 0314 	add.w	r3, r7, #20
 80030c6:	4619      	mov	r1, r3
 80030c8:	4805      	ldr	r0, [pc, #20]	; (80030e0 <HAL_ADC_MspInit+0x84>)
 80030ca:	f001 fbf3 	bl	80048b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80030ce:	bf00      	nop
 80030d0:	3728      	adds	r7, #40	; 0x28
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40012000 	.word	0x40012000
 80030dc:	40023800 	.word	0x40023800
 80030e0:	40020000 	.word	0x40020000

080030e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b08c      	sub	sp, #48	; 0x30
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ec:	f107 031c 	add.w	r3, r7, #28
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	605a      	str	r2, [r3, #4]
 80030f6:	609a      	str	r2, [r3, #8]
 80030f8:	60da      	str	r2, [r3, #12]
 80030fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a32      	ldr	r2, [pc, #200]	; (80031cc <HAL_I2C_MspInit+0xe8>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d12d      	bne.n	8003162 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003106:	2300      	movs	r3, #0
 8003108:	61bb      	str	r3, [r7, #24]
 800310a:	4b31      	ldr	r3, [pc, #196]	; (80031d0 <HAL_I2C_MspInit+0xec>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310e:	4a30      	ldr	r2, [pc, #192]	; (80031d0 <HAL_I2C_MspInit+0xec>)
 8003110:	f043 0302 	orr.w	r3, r3, #2
 8003114:	6313      	str	r3, [r2, #48]	; 0x30
 8003116:	4b2e      	ldr	r3, [pc, #184]	; (80031d0 <HAL_I2C_MspInit+0xec>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	61bb      	str	r3, [r7, #24]
 8003120:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8003122:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003128:	2312      	movs	r3, #18
 800312a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312c:	2300      	movs	r3, #0
 800312e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003130:	2303      	movs	r3, #3
 8003132:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003134:	2304      	movs	r3, #4
 8003136:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003138:	f107 031c 	add.w	r3, r7, #28
 800313c:	4619      	mov	r1, r3
 800313e:	4825      	ldr	r0, [pc, #148]	; (80031d4 <HAL_I2C_MspInit+0xf0>)
 8003140:	f001 fbb8 	bl	80048b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]
 8003148:	4b21      	ldr	r3, [pc, #132]	; (80031d0 <HAL_I2C_MspInit+0xec>)
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	4a20      	ldr	r2, [pc, #128]	; (80031d0 <HAL_I2C_MspInit+0xec>)
 800314e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003152:	6413      	str	r3, [r2, #64]	; 0x40
 8003154:	4b1e      	ldr	r3, [pc, #120]	; (80031d0 <HAL_I2C_MspInit+0xec>)
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800315c:	617b      	str	r3, [r7, #20]
 800315e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003160:	e030      	b.n	80031c4 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a1c      	ldr	r2, [pc, #112]	; (80031d8 <HAL_I2C_MspInit+0xf4>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d12b      	bne.n	80031c4 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800316c:	2300      	movs	r3, #0
 800316e:	613b      	str	r3, [r7, #16]
 8003170:	4b17      	ldr	r3, [pc, #92]	; (80031d0 <HAL_I2C_MspInit+0xec>)
 8003172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003174:	4a16      	ldr	r2, [pc, #88]	; (80031d0 <HAL_I2C_MspInit+0xec>)
 8003176:	f043 0320 	orr.w	r3, r3, #32
 800317a:	6313      	str	r3, [r2, #48]	; 0x30
 800317c:	4b14      	ldr	r3, [pc, #80]	; (80031d0 <HAL_I2C_MspInit+0xec>)
 800317e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003180:	f003 0320 	and.w	r3, r3, #32
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003188:	2303      	movs	r3, #3
 800318a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800318c:	2312      	movs	r3, #18
 800318e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003190:	2300      	movs	r3, #0
 8003192:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003194:	2303      	movs	r3, #3
 8003196:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003198:	2304      	movs	r3, #4
 800319a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800319c:	f107 031c 	add.w	r3, r7, #28
 80031a0:	4619      	mov	r1, r3
 80031a2:	480e      	ldr	r0, [pc, #56]	; (80031dc <HAL_I2C_MspInit+0xf8>)
 80031a4:	f001 fb86 	bl	80048b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80031a8:	2300      	movs	r3, #0
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	4b08      	ldr	r3, [pc, #32]	; (80031d0 <HAL_I2C_MspInit+0xec>)
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	4a07      	ldr	r2, [pc, #28]	; (80031d0 <HAL_I2C_MspInit+0xec>)
 80031b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031b6:	6413      	str	r3, [r2, #64]	; 0x40
 80031b8:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <HAL_I2C_MspInit+0xec>)
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031c0:	60fb      	str	r3, [r7, #12]
 80031c2:	68fb      	ldr	r3, [r7, #12]
}
 80031c4:	bf00      	nop
 80031c6:	3730      	adds	r7, #48	; 0x30
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40005400 	.word	0x40005400
 80031d0:	40023800 	.word	0x40023800
 80031d4:	40020400 	.word	0x40020400
 80031d8:	40005800 	.word	0x40005800
 80031dc:	40021400 	.word	0x40021400

080031e0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a0e      	ldr	r2, [pc, #56]	; (8003228 <HAL_TIM_PWM_MspInit+0x48>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d115      	bne.n	800321e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	4b0d      	ldr	r3, [pc, #52]	; (800322c <HAL_TIM_PWM_MspInit+0x4c>)
 80031f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fa:	4a0c      	ldr	r2, [pc, #48]	; (800322c <HAL_TIM_PWM_MspInit+0x4c>)
 80031fc:	f043 0301 	orr.w	r3, r3, #1
 8003200:	6453      	str	r3, [r2, #68]	; 0x44
 8003202:	4b0a      	ldr	r3, [pc, #40]	; (800322c <HAL_TIM_PWM_MspInit+0x4c>)
 8003204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 800320e:	2200      	movs	r2, #0
 8003210:	210f      	movs	r1, #15
 8003212:	2019      	movs	r0, #25
 8003214:	f000 ff22 	bl	800405c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003218:	2019      	movs	r0, #25
 800321a:	f000 ff3b 	bl	8004094 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800321e:	bf00      	nop
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40010000 	.word	0x40010000
 800322c:	40023800 	.word	0x40023800

08003230 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b090      	sub	sp, #64	; 0x40
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003238:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	605a      	str	r2, [r3, #4]
 8003242:	609a      	str	r2, [r3, #8]
 8003244:	60da      	str	r2, [r3, #12]
 8003246:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003250:	d14a      	bne.n	80032e8 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003252:	2300      	movs	r3, #0
 8003254:	62bb      	str	r3, [r7, #40]	; 0x28
 8003256:	4b71      	ldr	r3, [pc, #452]	; (800341c <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	4a70      	ldr	r2, [pc, #448]	; (800341c <HAL_TIM_Encoder_MspInit+0x1ec>)
 800325c:	f043 0301 	orr.w	r3, r3, #1
 8003260:	6413      	str	r3, [r2, #64]	; 0x40
 8003262:	4b6e      	ldr	r3, [pc, #440]	; (800341c <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	62bb      	str	r3, [r7, #40]	; 0x28
 800326c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800326e:	2300      	movs	r3, #0
 8003270:	627b      	str	r3, [r7, #36]	; 0x24
 8003272:	4b6a      	ldr	r3, [pc, #424]	; (800341c <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	4a69      	ldr	r2, [pc, #420]	; (800341c <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003278:	f043 0301 	orr.w	r3, r3, #1
 800327c:	6313      	str	r3, [r2, #48]	; 0x30
 800327e:	4b67      	ldr	r3, [pc, #412]	; (800341c <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	627b      	str	r3, [r7, #36]	; 0x24
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800328a:	2300      	movs	r3, #0
 800328c:	623b      	str	r3, [r7, #32]
 800328e:	4b63      	ldr	r3, [pc, #396]	; (800341c <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	4a62      	ldr	r2, [pc, #392]	; (800341c <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003294:	f043 0302 	orr.w	r3, r3, #2
 8003298:	6313      	str	r3, [r2, #48]	; 0x30
 800329a:	4b60      	ldr	r3, [pc, #384]	; (800341c <HAL_TIM_Encoder_MspInit+0x1ec>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	623b      	str	r3, [r7, #32]
 80032a4:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80032a6:	2320      	movs	r3, #32
 80032a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032aa:	2302      	movs	r3, #2
 80032ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ae:	2300      	movs	r3, #0
 80032b0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b2:	2300      	movs	r3, #0
 80032b4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80032b6:	2301      	movs	r3, #1
 80032b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032be:	4619      	mov	r1, r3
 80032c0:	4857      	ldr	r0, [pc, #348]	; (8003420 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80032c2:	f001 faf7 	bl	80048b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80032c6:	2308      	movs	r3, #8
 80032c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ca:	2302      	movs	r3, #2
 80032cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ce:	2300      	movs	r3, #0
 80032d0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d2:	2300      	movs	r3, #0
 80032d4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80032d6:	2301      	movs	r3, #1
 80032d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032de:	4619      	mov	r1, r3
 80032e0:	4850      	ldr	r0, [pc, #320]	; (8003424 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80032e2:	f001 fae7 	bl	80048b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80032e6:	e095      	b.n	8003414 <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(htim_encoder->Instance==TIM3)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a4e      	ldr	r2, [pc, #312]	; (8003428 <HAL_TIM_Encoder_MspInit+0x1f8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d12c      	bne.n	800334c <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032f2:	2300      	movs	r3, #0
 80032f4:	61fb      	str	r3, [r7, #28]
 80032f6:	4b49      	ldr	r3, [pc, #292]	; (800341c <HAL_TIM_Encoder_MspInit+0x1ec>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	4a48      	ldr	r2, [pc, #288]	; (800341c <HAL_TIM_Encoder_MspInit+0x1ec>)
 80032fc:	f043 0302 	orr.w	r3, r3, #2
 8003300:	6413      	str	r3, [r2, #64]	; 0x40
 8003302:	4b46      	ldr	r3, [pc, #280]	; (800341c <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	61fb      	str	r3, [r7, #28]
 800330c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800330e:	2300      	movs	r3, #0
 8003310:	61bb      	str	r3, [r7, #24]
 8003312:	4b42      	ldr	r3, [pc, #264]	; (800341c <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	4a41      	ldr	r2, [pc, #260]	; (800341c <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003318:	f043 0301 	orr.w	r3, r3, #1
 800331c:	6313      	str	r3, [r2, #48]	; 0x30
 800331e:	4b3f      	ldr	r3, [pc, #252]	; (800341c <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	61bb      	str	r3, [r7, #24]
 8003328:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800332a:	23c0      	movs	r3, #192	; 0xc0
 800332c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332e:	2302      	movs	r3, #2
 8003330:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003332:	2300      	movs	r3, #0
 8003334:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003336:	2300      	movs	r3, #0
 8003338:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800333a:	2302      	movs	r3, #2
 800333c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800333e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003342:	4619      	mov	r1, r3
 8003344:	4836      	ldr	r0, [pc, #216]	; (8003420 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8003346:	f001 fab5 	bl	80048b4 <HAL_GPIO_Init>
}
 800334a:	e063      	b.n	8003414 <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(htim_encoder->Instance==TIM4)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a36      	ldr	r2, [pc, #216]	; (800342c <HAL_TIM_Encoder_MspInit+0x1fc>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d12d      	bne.n	80033b2 <HAL_TIM_Encoder_MspInit+0x182>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]
 800335a:	4b30      	ldr	r3, [pc, #192]	; (800341c <HAL_TIM_Encoder_MspInit+0x1ec>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	4a2f      	ldr	r2, [pc, #188]	; (800341c <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003360:	f043 0304 	orr.w	r3, r3, #4
 8003364:	6413      	str	r3, [r2, #64]	; 0x40
 8003366:	4b2d      	ldr	r3, [pc, #180]	; (800341c <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	617b      	str	r3, [r7, #20]
 8003370:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003372:	2300      	movs	r3, #0
 8003374:	613b      	str	r3, [r7, #16]
 8003376:	4b29      	ldr	r3, [pc, #164]	; (800341c <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	4a28      	ldr	r2, [pc, #160]	; (800341c <HAL_TIM_Encoder_MspInit+0x1ec>)
 800337c:	f043 0308 	orr.w	r3, r3, #8
 8003380:	6313      	str	r3, [r2, #48]	; 0x30
 8003382:	4b26      	ldr	r3, [pc, #152]	; (800341c <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	f003 0308 	and.w	r3, r3, #8
 800338a:	613b      	str	r3, [r7, #16]
 800338c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800338e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003392:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003394:	2302      	movs	r3, #2
 8003396:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003398:	2300      	movs	r3, #0
 800339a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339c:	2300      	movs	r3, #0
 800339e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80033a0:	2302      	movs	r3, #2
 80033a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033a8:	4619      	mov	r1, r3
 80033aa:	4821      	ldr	r0, [pc, #132]	; (8003430 <HAL_TIM_Encoder_MspInit+0x200>)
 80033ac:	f001 fa82 	bl	80048b4 <HAL_GPIO_Init>
}
 80033b0:	e030      	b.n	8003414 <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(htim_encoder->Instance==TIM5)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a1f      	ldr	r2, [pc, #124]	; (8003434 <HAL_TIM_Encoder_MspInit+0x204>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d12b      	bne.n	8003414 <HAL_TIM_Encoder_MspInit+0x1e4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80033bc:	2300      	movs	r3, #0
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	4b16      	ldr	r3, [pc, #88]	; (800341c <HAL_TIM_Encoder_MspInit+0x1ec>)
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	4a15      	ldr	r2, [pc, #84]	; (800341c <HAL_TIM_Encoder_MspInit+0x1ec>)
 80033c6:	f043 0308 	orr.w	r3, r3, #8
 80033ca:	6413      	str	r3, [r2, #64]	; 0x40
 80033cc:	4b13      	ldr	r3, [pc, #76]	; (800341c <HAL_TIM_Encoder_MspInit+0x1ec>)
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	f003 0308 	and.w	r3, r3, #8
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033d8:	2300      	movs	r3, #0
 80033da:	60bb      	str	r3, [r7, #8]
 80033dc:	4b0f      	ldr	r3, [pc, #60]	; (800341c <HAL_TIM_Encoder_MspInit+0x1ec>)
 80033de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e0:	4a0e      	ldr	r2, [pc, #56]	; (800341c <HAL_TIM_Encoder_MspInit+0x1ec>)
 80033e2:	f043 0301 	orr.w	r3, r3, #1
 80033e6:	6313      	str	r3, [r2, #48]	; 0x30
 80033e8:	4b0c      	ldr	r3, [pc, #48]	; (800341c <HAL_TIM_Encoder_MspInit+0x1ec>)
 80033ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	60bb      	str	r3, [r7, #8]
 80033f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80033f4:	2303      	movs	r3, #3
 80033f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f8:	2302      	movs	r3, #2
 80033fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fc:	2300      	movs	r3, #0
 80033fe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003400:	2300      	movs	r3, #0
 8003402:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003404:	2302      	movs	r3, #2
 8003406:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003408:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800340c:	4619      	mov	r1, r3
 800340e:	4804      	ldr	r0, [pc, #16]	; (8003420 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8003410:	f001 fa50 	bl	80048b4 <HAL_GPIO_Init>
}
 8003414:	bf00      	nop
 8003416:	3740      	adds	r7, #64	; 0x40
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40023800 	.word	0x40023800
 8003420:	40020000 	.word	0x40020000
 8003424:	40020400 	.word	0x40020400
 8003428:	40000400 	.word	0x40000400
 800342c:	40000800 	.word	0x40000800
 8003430:	40020c00 	.word	0x40020c00
 8003434:	40000c00 	.word	0x40000c00

08003438 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a0e      	ldr	r2, [pc, #56]	; (8003480 <HAL_TIM_Base_MspInit+0x48>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d115      	bne.n	8003476 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800344a:	2300      	movs	r3, #0
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	4b0d      	ldr	r3, [pc, #52]	; (8003484 <HAL_TIM_Base_MspInit+0x4c>)
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	4a0c      	ldr	r2, [pc, #48]	; (8003484 <HAL_TIM_Base_MspInit+0x4c>)
 8003454:	f043 0310 	orr.w	r3, r3, #16
 8003458:	6413      	str	r3, [r2, #64]	; 0x40
 800345a:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <HAL_TIM_Base_MspInit+0x4c>)
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	f003 0310 	and.w	r3, r3, #16
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8003466:	2200      	movs	r2, #0
 8003468:	2105      	movs	r1, #5
 800346a:	2036      	movs	r0, #54	; 0x36
 800346c:	f000 fdf6 	bl	800405c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003470:	2036      	movs	r0, #54	; 0x36
 8003472:	f000 fe0f 	bl	8004094 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003476:	bf00      	nop
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	40001000 	.word	0x40001000
 8003484:	40023800 	.word	0x40023800

08003488 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b088      	sub	sp, #32
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003490:	f107 030c 	add.w	r3, r7, #12
 8003494:	2200      	movs	r2, #0
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	605a      	str	r2, [r3, #4]
 800349a:	609a      	str	r2, [r3, #8]
 800349c:	60da      	str	r2, [r3, #12]
 800349e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a12      	ldr	r2, [pc, #72]	; (80034f0 <HAL_TIM_MspPostInit+0x68>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d11e      	bne.n	80034e8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80034aa:	2300      	movs	r3, #0
 80034ac:	60bb      	str	r3, [r7, #8]
 80034ae:	4b11      	ldr	r3, [pc, #68]	; (80034f4 <HAL_TIM_MspPostInit+0x6c>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	4a10      	ldr	r2, [pc, #64]	; (80034f4 <HAL_TIM_MspPostInit+0x6c>)
 80034b4:	f043 0310 	orr.w	r3, r3, #16
 80034b8:	6313      	str	r3, [r2, #48]	; 0x30
 80034ba:	4b0e      	ldr	r3, [pc, #56]	; (80034f4 <HAL_TIM_MspPostInit+0x6c>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	f003 0310 	and.w	r3, r3, #16
 80034c2:	60bb      	str	r3, [r7, #8]
 80034c4:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80034c6:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80034ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034cc:	2302      	movs	r3, #2
 80034ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d0:	2300      	movs	r3, #0
 80034d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d4:	2300      	movs	r3, #0
 80034d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80034d8:	2301      	movs	r3, #1
 80034da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034dc:	f107 030c 	add.w	r3, r7, #12
 80034e0:	4619      	mov	r1, r3
 80034e2:	4805      	ldr	r0, [pc, #20]	; (80034f8 <HAL_TIM_MspPostInit+0x70>)
 80034e4:	f001 f9e6 	bl	80048b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80034e8:	bf00      	nop
 80034ea:	3720      	adds	r7, #32
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40010000 	.word	0x40010000
 80034f4:	40023800 	.word	0x40023800
 80034f8:	40021000 	.word	0x40021000

080034fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b08c      	sub	sp, #48	; 0x30
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003504:	f107 031c 	add.w	r3, r7, #28
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	605a      	str	r2, [r3, #4]
 800350e:	609a      	str	r2, [r3, #8]
 8003510:	60da      	str	r2, [r3, #12]
 8003512:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a67      	ldr	r2, [pc, #412]	; (80036b8 <HAL_UART_MspInit+0x1bc>)
 800351a:	4293      	cmp	r3, r2
 800351c:	f040 8095 	bne.w	800364a <HAL_UART_MspInit+0x14e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003520:	2300      	movs	r3, #0
 8003522:	61bb      	str	r3, [r7, #24]
 8003524:	4b65      	ldr	r3, [pc, #404]	; (80036bc <HAL_UART_MspInit+0x1c0>)
 8003526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003528:	4a64      	ldr	r2, [pc, #400]	; (80036bc <HAL_UART_MspInit+0x1c0>)
 800352a:	f043 0310 	orr.w	r3, r3, #16
 800352e:	6453      	str	r3, [r2, #68]	; 0x44
 8003530:	4b62      	ldr	r3, [pc, #392]	; (80036bc <HAL_UART_MspInit+0x1c0>)
 8003532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003534:	f003 0310 	and.w	r3, r3, #16
 8003538:	61bb      	str	r3, [r7, #24]
 800353a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800353c:	2300      	movs	r3, #0
 800353e:	617b      	str	r3, [r7, #20]
 8003540:	4b5e      	ldr	r3, [pc, #376]	; (80036bc <HAL_UART_MspInit+0x1c0>)
 8003542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003544:	4a5d      	ldr	r2, [pc, #372]	; (80036bc <HAL_UART_MspInit+0x1c0>)
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	6313      	str	r3, [r2, #48]	; 0x30
 800354c:	4b5b      	ldr	r3, [pc, #364]	; (80036bc <HAL_UART_MspInit+0x1c0>)
 800354e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	617b      	str	r3, [r7, #20]
 8003556:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003558:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800355c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800355e:	2302      	movs	r3, #2
 8003560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003562:	2300      	movs	r3, #0
 8003564:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003566:	2303      	movs	r3, #3
 8003568:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800356a:	2307      	movs	r3, #7
 800356c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800356e:	f107 031c 	add.w	r3, r7, #28
 8003572:	4619      	mov	r1, r3
 8003574:	4852      	ldr	r0, [pc, #328]	; (80036c0 <HAL_UART_MspInit+0x1c4>)
 8003576:	f001 f99d 	bl	80048b4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800357a:	4b52      	ldr	r3, [pc, #328]	; (80036c4 <HAL_UART_MspInit+0x1c8>)
 800357c:	4a52      	ldr	r2, [pc, #328]	; (80036c8 <HAL_UART_MspInit+0x1cc>)
 800357e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003580:	4b50      	ldr	r3, [pc, #320]	; (80036c4 <HAL_UART_MspInit+0x1c8>)
 8003582:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003586:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003588:	4b4e      	ldr	r3, [pc, #312]	; (80036c4 <HAL_UART_MspInit+0x1c8>)
 800358a:	2200      	movs	r2, #0
 800358c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800358e:	4b4d      	ldr	r3, [pc, #308]	; (80036c4 <HAL_UART_MspInit+0x1c8>)
 8003590:	2200      	movs	r2, #0
 8003592:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003594:	4b4b      	ldr	r3, [pc, #300]	; (80036c4 <HAL_UART_MspInit+0x1c8>)
 8003596:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800359a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800359c:	4b49      	ldr	r3, [pc, #292]	; (80036c4 <HAL_UART_MspInit+0x1c8>)
 800359e:	2200      	movs	r2, #0
 80035a0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035a2:	4b48      	ldr	r3, [pc, #288]	; (80036c4 <HAL_UART_MspInit+0x1c8>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80035a8:	4b46      	ldr	r3, [pc, #280]	; (80036c4 <HAL_UART_MspInit+0x1c8>)
 80035aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035ae:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80035b0:	4b44      	ldr	r3, [pc, #272]	; (80036c4 <HAL_UART_MspInit+0x1c8>)
 80035b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035b6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035b8:	4b42      	ldr	r3, [pc, #264]	; (80036c4 <HAL_UART_MspInit+0x1c8>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80035be:	4841      	ldr	r0, [pc, #260]	; (80036c4 <HAL_UART_MspInit+0x1c8>)
 80035c0:	f000 fd76 	bl	80040b0 <HAL_DMA_Init>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 80035ca:	f7fe fee7 	bl	800239c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a3c      	ldr	r2, [pc, #240]	; (80036c4 <HAL_UART_MspInit+0x1c8>)
 80035d2:	639a      	str	r2, [r3, #56]	; 0x38
 80035d4:	4a3b      	ldr	r2, [pc, #236]	; (80036c4 <HAL_UART_MspInit+0x1c8>)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80035da:	4b3c      	ldr	r3, [pc, #240]	; (80036cc <HAL_UART_MspInit+0x1d0>)
 80035dc:	4a3c      	ldr	r2, [pc, #240]	; (80036d0 <HAL_UART_MspInit+0x1d4>)
 80035de:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80035e0:	4b3a      	ldr	r3, [pc, #232]	; (80036cc <HAL_UART_MspInit+0x1d0>)
 80035e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035e6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035e8:	4b38      	ldr	r3, [pc, #224]	; (80036cc <HAL_UART_MspInit+0x1d0>)
 80035ea:	2240      	movs	r2, #64	; 0x40
 80035ec:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035ee:	4b37      	ldr	r3, [pc, #220]	; (80036cc <HAL_UART_MspInit+0x1d0>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80035f4:	4b35      	ldr	r3, [pc, #212]	; (80036cc <HAL_UART_MspInit+0x1d0>)
 80035f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035fa:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035fc:	4b33      	ldr	r3, [pc, #204]	; (80036cc <HAL_UART_MspInit+0x1d0>)
 80035fe:	2200      	movs	r2, #0
 8003600:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003602:	4b32      	ldr	r3, [pc, #200]	; (80036cc <HAL_UART_MspInit+0x1d0>)
 8003604:	2200      	movs	r2, #0
 8003606:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003608:	4b30      	ldr	r3, [pc, #192]	; (80036cc <HAL_UART_MspInit+0x1d0>)
 800360a:	2200      	movs	r2, #0
 800360c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800360e:	4b2f      	ldr	r3, [pc, #188]	; (80036cc <HAL_UART_MspInit+0x1d0>)
 8003610:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003614:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003616:	4b2d      	ldr	r3, [pc, #180]	; (80036cc <HAL_UART_MspInit+0x1d0>)
 8003618:	2200      	movs	r2, #0
 800361a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800361c:	482b      	ldr	r0, [pc, #172]	; (80036cc <HAL_UART_MspInit+0x1d0>)
 800361e:	f000 fd47 	bl	80040b0 <HAL_DMA_Init>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 8003628:	f7fe feb8 	bl	800239c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a27      	ldr	r2, [pc, #156]	; (80036cc <HAL_UART_MspInit+0x1d0>)
 8003630:	635a      	str	r2, [r3, #52]	; 0x34
 8003632:	4a26      	ldr	r2, [pc, #152]	; (80036cc <HAL_UART_MspInit+0x1d0>)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003638:	2200      	movs	r2, #0
 800363a:	2105      	movs	r1, #5
 800363c:	2025      	movs	r0, #37	; 0x25
 800363e:	f000 fd0d 	bl	800405c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003642:	2025      	movs	r0, #37	; 0x25
 8003644:	f000 fd26 	bl	8004094 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003648:	e031      	b.n	80036ae <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a21      	ldr	r2, [pc, #132]	; (80036d4 <HAL_UART_MspInit+0x1d8>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d12c      	bne.n	80036ae <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003654:	2300      	movs	r3, #0
 8003656:	613b      	str	r3, [r7, #16]
 8003658:	4b18      	ldr	r3, [pc, #96]	; (80036bc <HAL_UART_MspInit+0x1c0>)
 800365a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365c:	4a17      	ldr	r2, [pc, #92]	; (80036bc <HAL_UART_MspInit+0x1c0>)
 800365e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003662:	6413      	str	r3, [r2, #64]	; 0x40
 8003664:	4b15      	ldr	r3, [pc, #84]	; (80036bc <HAL_UART_MspInit+0x1c0>)
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800366c:	613b      	str	r3, [r7, #16]
 800366e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003670:	2300      	movs	r3, #0
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	4b11      	ldr	r3, [pc, #68]	; (80036bc <HAL_UART_MspInit+0x1c0>)
 8003676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003678:	4a10      	ldr	r2, [pc, #64]	; (80036bc <HAL_UART_MspInit+0x1c0>)
 800367a:	f043 0308 	orr.w	r3, r3, #8
 800367e:	6313      	str	r3, [r2, #48]	; 0x30
 8003680:	4b0e      	ldr	r3, [pc, #56]	; (80036bc <HAL_UART_MspInit+0x1c0>)
 8003682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003684:	f003 0308 	and.w	r3, r3, #8
 8003688:	60fb      	str	r3, [r7, #12]
 800368a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800368c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003692:	2302      	movs	r3, #2
 8003694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003696:	2300      	movs	r3, #0
 8003698:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800369a:	2303      	movs	r3, #3
 800369c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800369e:	2307      	movs	r3, #7
 80036a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036a2:	f107 031c 	add.w	r3, r7, #28
 80036a6:	4619      	mov	r1, r3
 80036a8:	480b      	ldr	r0, [pc, #44]	; (80036d8 <HAL_UART_MspInit+0x1dc>)
 80036aa:	f001 f903 	bl	80048b4 <HAL_GPIO_Init>
}
 80036ae:	bf00      	nop
 80036b0:	3730      	adds	r7, #48	; 0x30
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40011000 	.word	0x40011000
 80036bc:	40023800 	.word	0x40023800
 80036c0:	40020000 	.word	0x40020000
 80036c4:	200003d0 	.word	0x200003d0
 80036c8:	40026440 	.word	0x40026440
 80036cc:	20000430 	.word	0x20000430
 80036d0:	400264b8 	.word	0x400264b8
 80036d4:	40004800 	.word	0x40004800
 80036d8:	40020c00 	.word	0x40020c00

080036dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08c      	sub	sp, #48	; 0x30
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80036ec:	2300      	movs	r3, #0
 80036ee:	60bb      	str	r3, [r7, #8]
 80036f0:	4b2f      	ldr	r3, [pc, #188]	; (80037b0 <HAL_InitTick+0xd4>)
 80036f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f4:	4a2e      	ldr	r2, [pc, #184]	; (80037b0 <HAL_InitTick+0xd4>)
 80036f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036fa:	6453      	str	r3, [r2, #68]	; 0x44
 80036fc:	4b2c      	ldr	r3, [pc, #176]	; (80037b0 <HAL_InitTick+0xd4>)
 80036fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003704:	60bb      	str	r3, [r7, #8]
 8003706:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003708:	f107 020c 	add.w	r2, r7, #12
 800370c:	f107 0310 	add.w	r3, r7, #16
 8003710:	4611      	mov	r1, r2
 8003712:	4618      	mov	r0, r3
 8003714:	f002 f91e 	bl	8005954 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003718:	f002 f908 	bl	800592c <HAL_RCC_GetPCLK2Freq>
 800371c:	4603      	mov	r3, r0
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003724:	4a23      	ldr	r2, [pc, #140]	; (80037b4 <HAL_InitTick+0xd8>)
 8003726:	fba2 2303 	umull	r2, r3, r2, r3
 800372a:	0c9b      	lsrs	r3, r3, #18
 800372c:	3b01      	subs	r3, #1
 800372e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8003730:	4b21      	ldr	r3, [pc, #132]	; (80037b8 <HAL_InitTick+0xdc>)
 8003732:	4a22      	ldr	r2, [pc, #136]	; (80037bc <HAL_InitTick+0xe0>)
 8003734:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8003736:	4b20      	ldr	r3, [pc, #128]	; (80037b8 <HAL_InitTick+0xdc>)
 8003738:	f240 32e7 	movw	r2, #999	; 0x3e7
 800373c:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800373e:	4a1e      	ldr	r2, [pc, #120]	; (80037b8 <HAL_InitTick+0xdc>)
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8003744:	4b1c      	ldr	r3, [pc, #112]	; (80037b8 <HAL_InitTick+0xdc>)
 8003746:	2200      	movs	r2, #0
 8003748:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800374a:	4b1b      	ldr	r3, [pc, #108]	; (80037b8 <HAL_InitTick+0xdc>)
 800374c:	2200      	movs	r2, #0
 800374e:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003750:	4b19      	ldr	r3, [pc, #100]	; (80037b8 <HAL_InitTick+0xdc>)
 8003752:	2200      	movs	r2, #0
 8003754:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8003756:	4818      	ldr	r0, [pc, #96]	; (80037b8 <HAL_InitTick+0xdc>)
 8003758:	f002 f92e 	bl	80059b8 <HAL_TIM_Base_Init>
 800375c:	4603      	mov	r3, r0
 800375e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8003762:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003766:	2b00      	cmp	r3, #0
 8003768:	d11b      	bne.n	80037a2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 800376a:	4813      	ldr	r0, [pc, #76]	; (80037b8 <HAL_InitTick+0xdc>)
 800376c:	f002 f974 	bl	8005a58 <HAL_TIM_Base_Start_IT>
 8003770:	4603      	mov	r3, r0
 8003772:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8003776:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800377a:	2b00      	cmp	r3, #0
 800377c:	d111      	bne.n	80037a2 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800377e:	2019      	movs	r0, #25
 8003780:	f000 fc88 	bl	8004094 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b0f      	cmp	r3, #15
 8003788:	d808      	bhi.n	800379c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800378a:	2200      	movs	r2, #0
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	2019      	movs	r0, #25
 8003790:	f000 fc64 	bl	800405c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003794:	4a0a      	ldr	r2, [pc, #40]	; (80037c0 <HAL_InitTick+0xe4>)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	e002      	b.n	80037a2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80037a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3730      	adds	r7, #48	; 0x30
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	40023800 	.word	0x40023800
 80037b4:	431bde83 	.word	0x431bde83
 80037b8:	20000e10 	.word	0x20000e10
 80037bc:	40014400 	.word	0x40014400
 80037c0:	20000014 	.word	0x20000014

080037c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80037c8:	e7fe      	b.n	80037c8 <NMI_Handler+0x4>

080037ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037ca:	b480      	push	{r7}
 80037cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037ce:	e7fe      	b.n	80037ce <HardFault_Handler+0x4>

080037d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037d4:	e7fe      	b.n	80037d4 <MemManage_Handler+0x4>

080037d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037d6:	b480      	push	{r7}
 80037d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037da:	e7fe      	b.n	80037da <BusFault_Handler+0x4>

080037dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037e0:	e7fe      	b.n	80037e0 <UsageFault_Handler+0x4>

080037e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037e2:	b480      	push	{r7}
 80037e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037e6:	bf00      	nop
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80037f4:	4803      	ldr	r0, [pc, #12]	; (8003804 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80037f6:	f002 fbcd 	bl	8005f94 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80037fa:	4803      	ldr	r0, [pc, #12]	; (8003808 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80037fc:	f002 fbca 	bl	8005f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003800:	bf00      	nop
 8003802:	bd80      	pop	{r7, pc}
 8003804:	20000198 	.word	0x20000198
 8003808:	20000e10 	.word	0x20000e10

0800380c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003810:	4802      	ldr	r0, [pc, #8]	; (800381c <USART1_IRQHandler+0x10>)
 8003812:	f003 fa05 	bl	8006c20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003816:	bf00      	nop
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	20000348 	.word	0x20000348

08003820 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003824:	4802      	ldr	r0, [pc, #8]	; (8003830 <TIM6_DAC_IRQHandler+0x10>)
 8003826:	f002 fbb5 	bl	8005f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800382a:	bf00      	nop
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	20000300 	.word	0x20000300

08003834 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003838:	4802      	ldr	r0, [pc, #8]	; (8003844 <DMA2_Stream2_IRQHandler+0x10>)
 800383a:	f000 fdd1 	bl	80043e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800383e:	bf00      	nop
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	200003d0 	.word	0x200003d0

08003848 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800384c:	4802      	ldr	r0, [pc, #8]	; (8003858 <DMA2_Stream7_IRQHandler+0x10>)
 800384e:	f000 fdc7 	bl	80043e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003852:	bf00      	nop
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	20000430 	.word	0x20000430

0800385c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
	return 1;
 8003860:	2301      	movs	r3, #1
}
 8003862:	4618      	mov	r0, r3
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <_kill>:

int _kill(int pid, int sig)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003876:	f007 f865 	bl	800a944 <__errno>
 800387a:	4603      	mov	r3, r0
 800387c:	2216      	movs	r2, #22
 800387e:	601a      	str	r2, [r3, #0]
	return -1;
 8003880:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003884:	4618      	mov	r0, r3
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <_exit>:

void _exit (int status)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003894:	f04f 31ff 	mov.w	r1, #4294967295
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7ff ffe7 	bl	800386c <_kill>
	while (1) {}		/* Make sure we hang here */
 800389e:	e7fe      	b.n	800389e <_exit+0x12>

080038a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038a8:	4a14      	ldr	r2, [pc, #80]	; (80038fc <_sbrk+0x5c>)
 80038aa:	4b15      	ldr	r3, [pc, #84]	; (8003900 <_sbrk+0x60>)
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038b4:	4b13      	ldr	r3, [pc, #76]	; (8003904 <_sbrk+0x64>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d102      	bne.n	80038c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038bc:	4b11      	ldr	r3, [pc, #68]	; (8003904 <_sbrk+0x64>)
 80038be:	4a12      	ldr	r2, [pc, #72]	; (8003908 <_sbrk+0x68>)
 80038c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038c2:	4b10      	ldr	r3, [pc, #64]	; (8003904 <_sbrk+0x64>)
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4413      	add	r3, r2
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d207      	bcs.n	80038e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038d0:	f007 f838 	bl	800a944 <__errno>
 80038d4:	4603      	mov	r3, r0
 80038d6:	220c      	movs	r2, #12
 80038d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038da:	f04f 33ff 	mov.w	r3, #4294967295
 80038de:	e009      	b.n	80038f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038e0:	4b08      	ldr	r3, [pc, #32]	; (8003904 <_sbrk+0x64>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038e6:	4b07      	ldr	r3, [pc, #28]	; (8003904 <_sbrk+0x64>)
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4413      	add	r3, r2
 80038ee:	4a05      	ldr	r2, [pc, #20]	; (8003904 <_sbrk+0x64>)
 80038f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038f2:	68fb      	ldr	r3, [r7, #12]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	20030000 	.word	0x20030000
 8003900:	00000400 	.word	0x00000400
 8003904:	20000e58 	.word	0x20000e58
 8003908:	200057c0 	.word	0x200057c0

0800390c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003910:	4b06      	ldr	r3, [pc, #24]	; (800392c <SystemInit+0x20>)
 8003912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003916:	4a05      	ldr	r2, [pc, #20]	; (800392c <SystemInit+0x20>)
 8003918:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800391c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003920:	bf00      	nop
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	e000ed00 	.word	0xe000ed00

08003930 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003930:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003968 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003934:	480d      	ldr	r0, [pc, #52]	; (800396c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003936:	490e      	ldr	r1, [pc, #56]	; (8003970 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003938:	4a0e      	ldr	r2, [pc, #56]	; (8003974 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800393a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800393c:	e002      	b.n	8003944 <LoopCopyDataInit>

0800393e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800393e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003942:	3304      	adds	r3, #4

08003944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003948:	d3f9      	bcc.n	800393e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800394a:	4a0b      	ldr	r2, [pc, #44]	; (8003978 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800394c:	4c0b      	ldr	r4, [pc, #44]	; (800397c <LoopFillZerobss+0x26>)
  movs r3, #0
 800394e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003950:	e001      	b.n	8003956 <LoopFillZerobss>

08003952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003954:	3204      	adds	r2, #4

08003956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003958:	d3fb      	bcc.n	8003952 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800395a:	f7ff ffd7 	bl	800390c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800395e:	f006 fff7 	bl	800a950 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003962:	f7fd ff27 	bl	80017b4 <main>
  bx  lr    
 8003966:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003968:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800396c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003970:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003974:	0800b064 	.word	0x0800b064
  ldr r2, =_sbss
 8003978:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800397c:	200057c0 	.word	0x200057c0

08003980 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003980:	e7fe      	b.n	8003980 <ADC_IRQHandler>
	...

08003984 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003988:	4b0e      	ldr	r3, [pc, #56]	; (80039c4 <HAL_Init+0x40>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a0d      	ldr	r2, [pc, #52]	; (80039c4 <HAL_Init+0x40>)
 800398e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003992:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003994:	4b0b      	ldr	r3, [pc, #44]	; (80039c4 <HAL_Init+0x40>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a0a      	ldr	r2, [pc, #40]	; (80039c4 <HAL_Init+0x40>)
 800399a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800399e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039a0:	4b08      	ldr	r3, [pc, #32]	; (80039c4 <HAL_Init+0x40>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a07      	ldr	r2, [pc, #28]	; (80039c4 <HAL_Init+0x40>)
 80039a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039ac:	2003      	movs	r0, #3
 80039ae:	f000 fb4a 	bl	8004046 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039b2:	200f      	movs	r0, #15
 80039b4:	f7ff fe92 	bl	80036dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039b8:	f7ff fb24 	bl	8003004 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40023c00 	.word	0x40023c00

080039c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039cc:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <HAL_IncTick+0x20>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	461a      	mov	r2, r3
 80039d2:	4b06      	ldr	r3, [pc, #24]	; (80039ec <HAL_IncTick+0x24>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4413      	add	r3, r2
 80039d8:	4a04      	ldr	r2, [pc, #16]	; (80039ec <HAL_IncTick+0x24>)
 80039da:	6013      	str	r3, [r2, #0]
}
 80039dc:	bf00      	nop
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	20000018 	.word	0x20000018
 80039ec:	20000e5c 	.word	0x20000e5c

080039f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  return uwTick;
 80039f4:	4b03      	ldr	r3, [pc, #12]	; (8003a04 <HAL_GetTick+0x14>)
 80039f6:	681b      	ldr	r3, [r3, #0]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	20000e5c 	.word	0x20000e5c

08003a08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a10:	2300      	movs	r3, #0
 8003a12:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e033      	b.n	8003a86 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d109      	bne.n	8003a3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7ff fb18 	bl	800305c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	f003 0310 	and.w	r3, r3, #16
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d118      	bne.n	8003a78 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a4e:	f023 0302 	bic.w	r3, r3, #2
 8003a52:	f043 0202 	orr.w	r2, r3, #2
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f94a 	bl	8003cf4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	f023 0303 	bic.w	r3, r3, #3
 8003a6e:	f043 0201 	orr.w	r2, r3, #1
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	641a      	str	r2, [r3, #64]	; 0x40
 8003a76:	e001      	b.n	8003a7c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d101      	bne.n	8003aac <HAL_ADC_ConfigChannel+0x1c>
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	e113      	b.n	8003cd4 <HAL_ADC_ConfigChannel+0x244>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b09      	cmp	r3, #9
 8003aba:	d925      	bls.n	8003b08 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68d9      	ldr	r1, [r3, #12]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	461a      	mov	r2, r3
 8003aca:	4613      	mov	r3, r2
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	4413      	add	r3, r2
 8003ad0:	3b1e      	subs	r3, #30
 8003ad2:	2207      	movs	r2, #7
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	43da      	mvns	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	400a      	ands	r2, r1
 8003ae0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68d9      	ldr	r1, [r3, #12]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	4618      	mov	r0, r3
 8003af4:	4603      	mov	r3, r0
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	4403      	add	r3, r0
 8003afa:	3b1e      	subs	r3, #30
 8003afc:	409a      	lsls	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	60da      	str	r2, [r3, #12]
 8003b06:	e022      	b.n	8003b4e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6919      	ldr	r1, [r3, #16]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	461a      	mov	r2, r3
 8003b16:	4613      	mov	r3, r2
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	4413      	add	r3, r2
 8003b1c:	2207      	movs	r2, #7
 8003b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b22:	43da      	mvns	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	400a      	ands	r2, r1
 8003b2a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6919      	ldr	r1, [r3, #16]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	689a      	ldr	r2, [r3, #8]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	4603      	mov	r3, r0
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	4403      	add	r3, r0
 8003b44:	409a      	lsls	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b06      	cmp	r3, #6
 8003b54:	d824      	bhi.n	8003ba0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	4613      	mov	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	3b05      	subs	r3, #5
 8003b68:	221f      	movs	r2, #31
 8003b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6e:	43da      	mvns	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	400a      	ands	r2, r1
 8003b76:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	4618      	mov	r0, r3
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4413      	add	r3, r2
 8003b90:	3b05      	subs	r3, #5
 8003b92:	fa00 f203 	lsl.w	r2, r0, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	635a      	str	r2, [r3, #52]	; 0x34
 8003b9e:	e04c      	b.n	8003c3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2b0c      	cmp	r3, #12
 8003ba6:	d824      	bhi.n	8003bf2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	3b23      	subs	r3, #35	; 0x23
 8003bba:	221f      	movs	r2, #31
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	43da      	mvns	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	400a      	ands	r2, r1
 8003bc8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	3b23      	subs	r3, #35	; 0x23
 8003be4:	fa00 f203 	lsl.w	r2, r0, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	631a      	str	r2, [r3, #48]	; 0x30
 8003bf0:	e023      	b.n	8003c3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	3b41      	subs	r3, #65	; 0x41
 8003c04:	221f      	movs	r2, #31
 8003c06:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0a:	43da      	mvns	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	400a      	ands	r2, r1
 8003c12:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	4618      	mov	r0, r3
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	4613      	mov	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4413      	add	r3, r2
 8003c2c:	3b41      	subs	r3, #65	; 0x41
 8003c2e:	fa00 f203 	lsl.w	r2, r0, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c3a:	4b29      	ldr	r3, [pc, #164]	; (8003ce0 <HAL_ADC_ConfigChannel+0x250>)
 8003c3c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a28      	ldr	r2, [pc, #160]	; (8003ce4 <HAL_ADC_ConfigChannel+0x254>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d10f      	bne.n	8003c68 <HAL_ADC_ConfigChannel+0x1d8>
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b12      	cmp	r3, #18
 8003c4e:	d10b      	bne.n	8003c68 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a1d      	ldr	r2, [pc, #116]	; (8003ce4 <HAL_ADC_ConfigChannel+0x254>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d12b      	bne.n	8003cca <HAL_ADC_ConfigChannel+0x23a>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a1c      	ldr	r2, [pc, #112]	; (8003ce8 <HAL_ADC_ConfigChannel+0x258>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d003      	beq.n	8003c84 <HAL_ADC_ConfigChannel+0x1f4>
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b11      	cmp	r3, #17
 8003c82:	d122      	bne.n	8003cca <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a11      	ldr	r2, [pc, #68]	; (8003ce8 <HAL_ADC_ConfigChannel+0x258>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d111      	bne.n	8003cca <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ca6:	4b11      	ldr	r3, [pc, #68]	; (8003cec <HAL_ADC_ConfigChannel+0x25c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a11      	ldr	r2, [pc, #68]	; (8003cf0 <HAL_ADC_ConfigChannel+0x260>)
 8003cac:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb0:	0c9a      	lsrs	r2, r3, #18
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4413      	add	r3, r2
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003cbc:	e002      	b.n	8003cc4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f9      	bne.n	8003cbe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr
 8003ce0:	40012300 	.word	0x40012300
 8003ce4:	40012000 	.word	0x40012000
 8003ce8:	10000012 	.word	0x10000012
 8003cec:	20000010 	.word	0x20000010
 8003cf0:	431bde83 	.word	0x431bde83

08003cf4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003cfc:	4b79      	ldr	r3, [pc, #484]	; (8003ee4 <ADC_Init+0x1f0>)
 8003cfe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	431a      	orrs	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6859      	ldr	r1, [r3, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	021a      	lsls	r2, r3, #8
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003d4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6859      	ldr	r1, [r3, #4]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6899      	ldr	r1, [r3, #8]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68da      	ldr	r2, [r3, #12]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d86:	4a58      	ldr	r2, [pc, #352]	; (8003ee8 <ADC_Init+0x1f4>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d022      	beq.n	8003dd2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d9a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6899      	ldr	r1, [r3, #8]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003dbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6899      	ldr	r1, [r3, #8]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	609a      	str	r2, [r3, #8]
 8003dd0:	e00f      	b.n	8003df2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003de0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003df0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0202 	bic.w	r2, r2, #2
 8003e00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6899      	ldr	r1, [r3, #8]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	7e1b      	ldrb	r3, [r3, #24]
 8003e0c:	005a      	lsls	r2, r3, #1
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d01b      	beq.n	8003e58 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e2e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685a      	ldr	r2, [r3, #4]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003e3e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6859      	ldr	r1, [r3, #4]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	035a      	lsls	r2, r3, #13
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	605a      	str	r2, [r3, #4]
 8003e56:	e007      	b.n	8003e68 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e66:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003e76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	69db      	ldr	r3, [r3, #28]
 8003e82:	3b01      	subs	r3, #1
 8003e84:	051a      	lsls	r2, r3, #20
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6899      	ldr	r1, [r3, #8]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003eaa:	025a      	lsls	r2, r3, #9
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ec2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6899      	ldr	r1, [r3, #8]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	029a      	lsls	r2, r3, #10
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	609a      	str	r2, [r3, #8]
}
 8003ed8:	bf00      	nop
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	40012300 	.word	0x40012300
 8003ee8:	0f000001 	.word	0x0f000001

08003eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f003 0307 	and.w	r3, r3, #7
 8003efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003efc:	4b0c      	ldr	r3, [pc, #48]	; (8003f30 <__NVIC_SetPriorityGrouping+0x44>)
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f08:	4013      	ands	r3, r2
 8003f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f1e:	4a04      	ldr	r2, [pc, #16]	; (8003f30 <__NVIC_SetPriorityGrouping+0x44>)
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	60d3      	str	r3, [r2, #12]
}
 8003f24:	bf00      	nop
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	e000ed00 	.word	0xe000ed00

08003f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f38:	4b04      	ldr	r3, [pc, #16]	; (8003f4c <__NVIC_GetPriorityGrouping+0x18>)
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	0a1b      	lsrs	r3, r3, #8
 8003f3e:	f003 0307 	and.w	r3, r3, #7
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	e000ed00 	.word	0xe000ed00

08003f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	4603      	mov	r3, r0
 8003f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	db0b      	blt.n	8003f7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f62:	79fb      	ldrb	r3, [r7, #7]
 8003f64:	f003 021f 	and.w	r2, r3, #31
 8003f68:	4907      	ldr	r1, [pc, #28]	; (8003f88 <__NVIC_EnableIRQ+0x38>)
 8003f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f6e:	095b      	lsrs	r3, r3, #5
 8003f70:	2001      	movs	r0, #1
 8003f72:	fa00 f202 	lsl.w	r2, r0, r2
 8003f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	e000e100 	.word	0xe000e100

08003f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	4603      	mov	r3, r0
 8003f94:	6039      	str	r1, [r7, #0]
 8003f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	db0a      	blt.n	8003fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	490c      	ldr	r1, [pc, #48]	; (8003fd8 <__NVIC_SetPriority+0x4c>)
 8003fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003faa:	0112      	lsls	r2, r2, #4
 8003fac:	b2d2      	uxtb	r2, r2
 8003fae:	440b      	add	r3, r1
 8003fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fb4:	e00a      	b.n	8003fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	4908      	ldr	r1, [pc, #32]	; (8003fdc <__NVIC_SetPriority+0x50>)
 8003fbc:	79fb      	ldrb	r3, [r7, #7]
 8003fbe:	f003 030f 	and.w	r3, r3, #15
 8003fc2:	3b04      	subs	r3, #4
 8003fc4:	0112      	lsls	r2, r2, #4
 8003fc6:	b2d2      	uxtb	r2, r2
 8003fc8:	440b      	add	r3, r1
 8003fca:	761a      	strb	r2, [r3, #24]
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	e000e100 	.word	0xe000e100
 8003fdc:	e000ed00 	.word	0xe000ed00

08003fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b089      	sub	sp, #36	; 0x24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	f1c3 0307 	rsb	r3, r3, #7
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	bf28      	it	cs
 8003ffe:	2304      	movcs	r3, #4
 8004000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	3304      	adds	r3, #4
 8004006:	2b06      	cmp	r3, #6
 8004008:	d902      	bls.n	8004010 <NVIC_EncodePriority+0x30>
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	3b03      	subs	r3, #3
 800400e:	e000      	b.n	8004012 <NVIC_EncodePriority+0x32>
 8004010:	2300      	movs	r3, #0
 8004012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004014:	f04f 32ff 	mov.w	r2, #4294967295
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	43da      	mvns	r2, r3
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	401a      	ands	r2, r3
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004028:	f04f 31ff 	mov.w	r1, #4294967295
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	fa01 f303 	lsl.w	r3, r1, r3
 8004032:	43d9      	mvns	r1, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004038:	4313      	orrs	r3, r2
         );
}
 800403a:	4618      	mov	r0, r3
 800403c:	3724      	adds	r7, #36	; 0x24
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b082      	sub	sp, #8
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7ff ff4c 	bl	8003eec <__NVIC_SetPriorityGrouping>
}
 8004054:	bf00      	nop
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	4603      	mov	r3, r0
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
 8004068:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800406a:	2300      	movs	r3, #0
 800406c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800406e:	f7ff ff61 	bl	8003f34 <__NVIC_GetPriorityGrouping>
 8004072:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	68b9      	ldr	r1, [r7, #8]
 8004078:	6978      	ldr	r0, [r7, #20]
 800407a:	f7ff ffb1 	bl	8003fe0 <NVIC_EncodePriority>
 800407e:	4602      	mov	r2, r0
 8004080:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004084:	4611      	mov	r1, r2
 8004086:	4618      	mov	r0, r3
 8004088:	f7ff ff80 	bl	8003f8c <__NVIC_SetPriority>
}
 800408c:	bf00      	nop
 800408e:	3718      	adds	r7, #24
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	4603      	mov	r3, r0
 800409c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800409e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7ff ff54 	bl	8003f50 <__NVIC_EnableIRQ>
}
 80040a8:	bf00      	nop
 80040aa:	3708      	adds	r7, #8
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80040b8:	2300      	movs	r3, #0
 80040ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80040bc:	f7ff fc98 	bl	80039f0 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d101      	bne.n	80040cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e099      	b.n	8004200 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2202      	movs	r2, #2
 80040d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 0201 	bic.w	r2, r2, #1
 80040ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040ec:	e00f      	b.n	800410e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040ee:	f7ff fc7f 	bl	80039f0 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b05      	cmp	r3, #5
 80040fa:	d908      	bls.n	800410e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2220      	movs	r2, #32
 8004100:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2203      	movs	r2, #3
 8004106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e078      	b.n	8004200 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1e8      	bne.n	80040ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	4b38      	ldr	r3, [pc, #224]	; (8004208 <HAL_DMA_Init+0x158>)
 8004128:	4013      	ands	r3, r2
 800412a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800413a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004146:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004152:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	4313      	orrs	r3, r2
 800415e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	2b04      	cmp	r3, #4
 8004166:	d107      	bne.n	8004178 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004170:	4313      	orrs	r3, r2
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	4313      	orrs	r3, r2
 8004176:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	f023 0307 	bic.w	r3, r3, #7
 800418e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	4313      	orrs	r3, r2
 8004198:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	2b04      	cmp	r3, #4
 80041a0:	d117      	bne.n	80041d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00e      	beq.n	80041d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 fb01 	bl	80047bc <DMA_CheckFifoParam>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d008      	beq.n	80041d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2240      	movs	r2, #64	; 0x40
 80041c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80041ce:	2301      	movs	r3, #1
 80041d0:	e016      	b.n	8004200 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 fab8 	bl	8004750 <DMA_CalcBaseAndBitshift>
 80041e0:	4603      	mov	r3, r0
 80041e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e8:	223f      	movs	r2, #63	; 0x3f
 80041ea:	409a      	lsls	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3718      	adds	r7, #24
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	f010803f 	.word	0xf010803f

0800420c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
 8004218:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800421a:	2300      	movs	r3, #0
 800421c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004222:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800422a:	2b01      	cmp	r3, #1
 800422c:	d101      	bne.n	8004232 <HAL_DMA_Start_IT+0x26>
 800422e:	2302      	movs	r3, #2
 8004230:	e040      	b.n	80042b4 <HAL_DMA_Start_IT+0xa8>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b01      	cmp	r3, #1
 8004244:	d12f      	bne.n	80042a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2202      	movs	r2, #2
 800424a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	68b9      	ldr	r1, [r7, #8]
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 fa4a 	bl	80046f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004264:	223f      	movs	r2, #63	; 0x3f
 8004266:	409a      	lsls	r2, r3
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f042 0216 	orr.w	r2, r2, #22
 800427a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004280:	2b00      	cmp	r3, #0
 8004282:	d007      	beq.n	8004294 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0208 	orr.w	r2, r2, #8
 8004292:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0201 	orr.w	r2, r2, #1
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	e005      	b.n	80042b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80042ae:	2302      	movs	r3, #2
 80042b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80042b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3718      	adds	r7, #24
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80042ca:	f7ff fb91 	bl	80039f0 <HAL_GetTick>
 80042ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d008      	beq.n	80042ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2280      	movs	r2, #128	; 0x80
 80042e0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e052      	b.n	8004394 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0216 	bic.w	r2, r2, #22
 80042fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695a      	ldr	r2, [r3, #20]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800430c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	2b00      	cmp	r3, #0
 8004314:	d103      	bne.n	800431e <HAL_DMA_Abort+0x62>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800431a:	2b00      	cmp	r3, #0
 800431c:	d007      	beq.n	800432e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 0208 	bic.w	r2, r2, #8
 800432c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 0201 	bic.w	r2, r2, #1
 800433c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800433e:	e013      	b.n	8004368 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004340:	f7ff fb56 	bl	80039f0 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b05      	cmp	r3, #5
 800434c:	d90c      	bls.n	8004368 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2220      	movs	r2, #32
 8004352:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2203      	movs	r2, #3
 8004358:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e015      	b.n	8004394 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1e4      	bne.n	8004340 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800437a:	223f      	movs	r2, #63	; 0x3f
 800437c:	409a      	lsls	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d004      	beq.n	80043ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2280      	movs	r2, #128	; 0x80
 80043b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e00c      	b.n	80043d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2205      	movs	r2, #5
 80043be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 0201 	bic.w	r2, r2, #1
 80043d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80043ec:	4b8e      	ldr	r3, [pc, #568]	; (8004628 <HAL_DMA_IRQHandler+0x248>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a8e      	ldr	r2, [pc, #568]	; (800462c <HAL_DMA_IRQHandler+0x24c>)
 80043f2:	fba2 2303 	umull	r2, r3, r2, r3
 80043f6:	0a9b      	lsrs	r3, r3, #10
 80043f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800440a:	2208      	movs	r2, #8
 800440c:	409a      	lsls	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4013      	ands	r3, r2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d01a      	beq.n	800444c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	d013      	beq.n	800444c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 0204 	bic.w	r2, r2, #4
 8004432:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004438:	2208      	movs	r2, #8
 800443a:	409a      	lsls	r2, r3
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004444:	f043 0201 	orr.w	r2, r3, #1
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004450:	2201      	movs	r2, #1
 8004452:	409a      	lsls	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4013      	ands	r3, r2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d012      	beq.n	8004482 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00b      	beq.n	8004482 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800446e:	2201      	movs	r2, #1
 8004470:	409a      	lsls	r2, r3
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447a:	f043 0202 	orr.w	r2, r3, #2
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004486:	2204      	movs	r2, #4
 8004488:	409a      	lsls	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	4013      	ands	r3, r2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d012      	beq.n	80044b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00b      	beq.n	80044b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a4:	2204      	movs	r2, #4
 80044a6:	409a      	lsls	r2, r3
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b0:	f043 0204 	orr.w	r2, r3, #4
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044bc:	2210      	movs	r2, #16
 80044be:	409a      	lsls	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4013      	ands	r3, r2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d043      	beq.n	8004550 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0308 	and.w	r3, r3, #8
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d03c      	beq.n	8004550 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044da:	2210      	movs	r2, #16
 80044dc:	409a      	lsls	r2, r3
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d018      	beq.n	8004522 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d108      	bne.n	8004510 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	2b00      	cmp	r3, #0
 8004504:	d024      	beq.n	8004550 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	4798      	blx	r3
 800450e:	e01f      	b.n	8004550 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004514:	2b00      	cmp	r3, #0
 8004516:	d01b      	beq.n	8004550 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	4798      	blx	r3
 8004520:	e016      	b.n	8004550 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452c:	2b00      	cmp	r3, #0
 800452e:	d107      	bne.n	8004540 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0208 	bic.w	r2, r2, #8
 800453e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004544:	2b00      	cmp	r3, #0
 8004546:	d003      	beq.n	8004550 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004554:	2220      	movs	r2, #32
 8004556:	409a      	lsls	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	4013      	ands	r3, r2
 800455c:	2b00      	cmp	r3, #0
 800455e:	f000 808f 	beq.w	8004680 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0310 	and.w	r3, r3, #16
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 8087 	beq.w	8004680 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004576:	2220      	movs	r2, #32
 8004578:	409a      	lsls	r2, r3
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b05      	cmp	r3, #5
 8004588:	d136      	bne.n	80045f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0216 	bic.w	r2, r2, #22
 8004598:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	695a      	ldr	r2, [r3, #20]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d103      	bne.n	80045ba <HAL_DMA_IRQHandler+0x1da>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d007      	beq.n	80045ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 0208 	bic.w	r2, r2, #8
 80045c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ce:	223f      	movs	r2, #63	; 0x3f
 80045d0:	409a      	lsls	r2, r3
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d07e      	beq.n	80046ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	4798      	blx	r3
        }
        return;
 80045f6:	e079      	b.n	80046ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d01d      	beq.n	8004642 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d10d      	bne.n	8004630 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004618:	2b00      	cmp	r3, #0
 800461a:	d031      	beq.n	8004680 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	4798      	blx	r3
 8004624:	e02c      	b.n	8004680 <HAL_DMA_IRQHandler+0x2a0>
 8004626:	bf00      	nop
 8004628:	20000010 	.word	0x20000010
 800462c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004634:	2b00      	cmp	r3, #0
 8004636:	d023      	beq.n	8004680 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	4798      	blx	r3
 8004640:	e01e      	b.n	8004680 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10f      	bne.n	8004670 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 0210 	bic.w	r2, r2, #16
 800465e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004674:	2b00      	cmp	r3, #0
 8004676:	d003      	beq.n	8004680 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004684:	2b00      	cmp	r3, #0
 8004686:	d032      	beq.n	80046ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b00      	cmp	r3, #0
 8004692:	d022      	beq.n	80046da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2205      	movs	r2, #5
 8004698:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 0201 	bic.w	r2, r2, #1
 80046aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	3301      	adds	r3, #1
 80046b0:	60bb      	str	r3, [r7, #8]
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d307      	bcc.n	80046c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1f2      	bne.n	80046ac <HAL_DMA_IRQHandler+0x2cc>
 80046c6:	e000      	b.n	80046ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80046c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d005      	beq.n	80046ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	4798      	blx	r3
 80046ea:	e000      	b.n	80046ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80046ec:	bf00      	nop
    }
  }
}
 80046ee:	3718      	adds	r7, #24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
 8004700:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004710:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	683a      	ldr	r2, [r7, #0]
 8004718:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	2b40      	cmp	r3, #64	; 0x40
 8004720:	d108      	bne.n	8004734 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004732:	e007      	b.n	8004744 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	60da      	str	r2, [r3, #12]
}
 8004744:	bf00      	nop
 8004746:	3714      	adds	r7, #20
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	b2db      	uxtb	r3, r3
 800475e:	3b10      	subs	r3, #16
 8004760:	4a14      	ldr	r2, [pc, #80]	; (80047b4 <DMA_CalcBaseAndBitshift+0x64>)
 8004762:	fba2 2303 	umull	r2, r3, r2, r3
 8004766:	091b      	lsrs	r3, r3, #4
 8004768:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800476a:	4a13      	ldr	r2, [pc, #76]	; (80047b8 <DMA_CalcBaseAndBitshift+0x68>)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4413      	add	r3, r2
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	461a      	mov	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2b03      	cmp	r3, #3
 800477c:	d909      	bls.n	8004792 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004786:	f023 0303 	bic.w	r3, r3, #3
 800478a:	1d1a      	adds	r2, r3, #4
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	659a      	str	r2, [r3, #88]	; 0x58
 8004790:	e007      	b.n	80047a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800479a:	f023 0303 	bic.w	r3, r3, #3
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	aaaaaaab 	.word	0xaaaaaaab
 80047b8:	0800b048 	.word	0x0800b048

080047bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047c4:	2300      	movs	r3, #0
 80047c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d11f      	bne.n	8004816 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	2b03      	cmp	r3, #3
 80047da:	d856      	bhi.n	800488a <DMA_CheckFifoParam+0xce>
 80047dc:	a201      	add	r2, pc, #4	; (adr r2, 80047e4 <DMA_CheckFifoParam+0x28>)
 80047de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e2:	bf00      	nop
 80047e4:	080047f5 	.word	0x080047f5
 80047e8:	08004807 	.word	0x08004807
 80047ec:	080047f5 	.word	0x080047f5
 80047f0:	0800488b 	.word	0x0800488b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d046      	beq.n	800488e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004804:	e043      	b.n	800488e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800480e:	d140      	bne.n	8004892 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004814:	e03d      	b.n	8004892 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800481e:	d121      	bne.n	8004864 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2b03      	cmp	r3, #3
 8004824:	d837      	bhi.n	8004896 <DMA_CheckFifoParam+0xda>
 8004826:	a201      	add	r2, pc, #4	; (adr r2, 800482c <DMA_CheckFifoParam+0x70>)
 8004828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482c:	0800483d 	.word	0x0800483d
 8004830:	08004843 	.word	0x08004843
 8004834:	0800483d 	.word	0x0800483d
 8004838:	08004855 	.word	0x08004855
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	73fb      	strb	r3, [r7, #15]
      break;
 8004840:	e030      	b.n	80048a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004846:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d025      	beq.n	800489a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004852:	e022      	b.n	800489a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004858:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800485c:	d11f      	bne.n	800489e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004862:	e01c      	b.n	800489e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	2b02      	cmp	r3, #2
 8004868:	d903      	bls.n	8004872 <DMA_CheckFifoParam+0xb6>
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	2b03      	cmp	r3, #3
 800486e:	d003      	beq.n	8004878 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004870:	e018      	b.n	80048a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	73fb      	strb	r3, [r7, #15]
      break;
 8004876:	e015      	b.n	80048a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00e      	beq.n	80048a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	73fb      	strb	r3, [r7, #15]
      break;
 8004888:	e00b      	b.n	80048a2 <DMA_CheckFifoParam+0xe6>
      break;
 800488a:	bf00      	nop
 800488c:	e00a      	b.n	80048a4 <DMA_CheckFifoParam+0xe8>
      break;
 800488e:	bf00      	nop
 8004890:	e008      	b.n	80048a4 <DMA_CheckFifoParam+0xe8>
      break;
 8004892:	bf00      	nop
 8004894:	e006      	b.n	80048a4 <DMA_CheckFifoParam+0xe8>
      break;
 8004896:	bf00      	nop
 8004898:	e004      	b.n	80048a4 <DMA_CheckFifoParam+0xe8>
      break;
 800489a:	bf00      	nop
 800489c:	e002      	b.n	80048a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800489e:	bf00      	nop
 80048a0:	e000      	b.n	80048a4 <DMA_CheckFifoParam+0xe8>
      break;
 80048a2:	bf00      	nop
    }
  } 
  
  return status; 
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3714      	adds	r7, #20
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop

080048b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b089      	sub	sp, #36	; 0x24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80048be:	2300      	movs	r3, #0
 80048c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048ca:	2300      	movs	r3, #0
 80048cc:	61fb      	str	r3, [r7, #28]
 80048ce:	e177      	b.n	8004bc0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80048d0:	2201      	movs	r2, #1
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	4013      	ands	r3, r2
 80048e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	f040 8166 	bne.w	8004bba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f003 0303 	and.w	r3, r3, #3
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d005      	beq.n	8004906 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004902:	2b02      	cmp	r3, #2
 8004904:	d130      	bne.n	8004968 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	2203      	movs	r2, #3
 8004912:	fa02 f303 	lsl.w	r3, r2, r3
 8004916:	43db      	mvns	r3, r3
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	4013      	ands	r3, r2
 800491c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	68da      	ldr	r2, [r3, #12]
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	005b      	lsls	r3, r3, #1
 8004926:	fa02 f303 	lsl.w	r3, r2, r3
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	4313      	orrs	r3, r2
 800492e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800493c:	2201      	movs	r2, #1
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	fa02 f303 	lsl.w	r3, r2, r3
 8004944:	43db      	mvns	r3, r3
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	4013      	ands	r3, r2
 800494a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	091b      	lsrs	r3, r3, #4
 8004952:	f003 0201 	and.w	r2, r3, #1
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	fa02 f303 	lsl.w	r3, r2, r3
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	4313      	orrs	r3, r2
 8004960:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f003 0303 	and.w	r3, r3, #3
 8004970:	2b03      	cmp	r3, #3
 8004972:	d017      	beq.n	80049a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	2203      	movs	r2, #3
 8004980:	fa02 f303 	lsl.w	r3, r2, r3
 8004984:	43db      	mvns	r3, r3
 8004986:	69ba      	ldr	r2, [r7, #24]
 8004988:	4013      	ands	r3, r2
 800498a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	005b      	lsls	r3, r3, #1
 8004994:	fa02 f303 	lsl.w	r3, r2, r3
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	4313      	orrs	r3, r2
 800499c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f003 0303 	and.w	r3, r3, #3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d123      	bne.n	80049f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	08da      	lsrs	r2, r3, #3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3208      	adds	r2, #8
 80049b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	220f      	movs	r2, #15
 80049c8:	fa02 f303 	lsl.w	r3, r2, r3
 80049cc:	43db      	mvns	r3, r3
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	4013      	ands	r3, r2
 80049d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	691a      	ldr	r2, [r3, #16]
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	f003 0307 	and.w	r3, r3, #7
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	fa02 f303 	lsl.w	r3, r2, r3
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	08da      	lsrs	r2, r3, #3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3208      	adds	r2, #8
 80049f2:	69b9      	ldr	r1, [r7, #24]
 80049f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	2203      	movs	r2, #3
 8004a04:	fa02 f303 	lsl.w	r3, r2, r3
 8004a08:	43db      	mvns	r3, r3
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f003 0203 	and.w	r2, r3, #3
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 80c0 	beq.w	8004bba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	60fb      	str	r3, [r7, #12]
 8004a3e:	4b66      	ldr	r3, [pc, #408]	; (8004bd8 <HAL_GPIO_Init+0x324>)
 8004a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a42:	4a65      	ldr	r2, [pc, #404]	; (8004bd8 <HAL_GPIO_Init+0x324>)
 8004a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a48:	6453      	str	r3, [r2, #68]	; 0x44
 8004a4a:	4b63      	ldr	r3, [pc, #396]	; (8004bd8 <HAL_GPIO_Init+0x324>)
 8004a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a56:	4a61      	ldr	r2, [pc, #388]	; (8004bdc <HAL_GPIO_Init+0x328>)
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	089b      	lsrs	r3, r3, #2
 8004a5c:	3302      	adds	r3, #2
 8004a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	f003 0303 	and.w	r3, r3, #3
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	220f      	movs	r2, #15
 8004a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a72:	43db      	mvns	r3, r3
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	4013      	ands	r3, r2
 8004a78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a58      	ldr	r2, [pc, #352]	; (8004be0 <HAL_GPIO_Init+0x32c>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d037      	beq.n	8004af2 <HAL_GPIO_Init+0x23e>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a57      	ldr	r2, [pc, #348]	; (8004be4 <HAL_GPIO_Init+0x330>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d031      	beq.n	8004aee <HAL_GPIO_Init+0x23a>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a56      	ldr	r2, [pc, #344]	; (8004be8 <HAL_GPIO_Init+0x334>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d02b      	beq.n	8004aea <HAL_GPIO_Init+0x236>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a55      	ldr	r2, [pc, #340]	; (8004bec <HAL_GPIO_Init+0x338>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d025      	beq.n	8004ae6 <HAL_GPIO_Init+0x232>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a54      	ldr	r2, [pc, #336]	; (8004bf0 <HAL_GPIO_Init+0x33c>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d01f      	beq.n	8004ae2 <HAL_GPIO_Init+0x22e>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a53      	ldr	r2, [pc, #332]	; (8004bf4 <HAL_GPIO_Init+0x340>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d019      	beq.n	8004ade <HAL_GPIO_Init+0x22a>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a52      	ldr	r2, [pc, #328]	; (8004bf8 <HAL_GPIO_Init+0x344>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d013      	beq.n	8004ada <HAL_GPIO_Init+0x226>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a51      	ldr	r2, [pc, #324]	; (8004bfc <HAL_GPIO_Init+0x348>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d00d      	beq.n	8004ad6 <HAL_GPIO_Init+0x222>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a50      	ldr	r2, [pc, #320]	; (8004c00 <HAL_GPIO_Init+0x34c>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d007      	beq.n	8004ad2 <HAL_GPIO_Init+0x21e>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a4f      	ldr	r2, [pc, #316]	; (8004c04 <HAL_GPIO_Init+0x350>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d101      	bne.n	8004ace <HAL_GPIO_Init+0x21a>
 8004aca:	2309      	movs	r3, #9
 8004acc:	e012      	b.n	8004af4 <HAL_GPIO_Init+0x240>
 8004ace:	230a      	movs	r3, #10
 8004ad0:	e010      	b.n	8004af4 <HAL_GPIO_Init+0x240>
 8004ad2:	2308      	movs	r3, #8
 8004ad4:	e00e      	b.n	8004af4 <HAL_GPIO_Init+0x240>
 8004ad6:	2307      	movs	r3, #7
 8004ad8:	e00c      	b.n	8004af4 <HAL_GPIO_Init+0x240>
 8004ada:	2306      	movs	r3, #6
 8004adc:	e00a      	b.n	8004af4 <HAL_GPIO_Init+0x240>
 8004ade:	2305      	movs	r3, #5
 8004ae0:	e008      	b.n	8004af4 <HAL_GPIO_Init+0x240>
 8004ae2:	2304      	movs	r3, #4
 8004ae4:	e006      	b.n	8004af4 <HAL_GPIO_Init+0x240>
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e004      	b.n	8004af4 <HAL_GPIO_Init+0x240>
 8004aea:	2302      	movs	r3, #2
 8004aec:	e002      	b.n	8004af4 <HAL_GPIO_Init+0x240>
 8004aee:	2301      	movs	r3, #1
 8004af0:	e000      	b.n	8004af4 <HAL_GPIO_Init+0x240>
 8004af2:	2300      	movs	r3, #0
 8004af4:	69fa      	ldr	r2, [r7, #28]
 8004af6:	f002 0203 	and.w	r2, r2, #3
 8004afa:	0092      	lsls	r2, r2, #2
 8004afc:	4093      	lsls	r3, r2
 8004afe:	69ba      	ldr	r2, [r7, #24]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b04:	4935      	ldr	r1, [pc, #212]	; (8004bdc <HAL_GPIO_Init+0x328>)
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	089b      	lsrs	r3, r3, #2
 8004b0a:	3302      	adds	r3, #2
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b12:	4b3d      	ldr	r3, [pc, #244]	; (8004c08 <HAL_GPIO_Init+0x354>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	43db      	mvns	r3, r3
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b36:	4a34      	ldr	r2, [pc, #208]	; (8004c08 <HAL_GPIO_Init+0x354>)
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b3c:	4b32      	ldr	r3, [pc, #200]	; (8004c08 <HAL_GPIO_Init+0x354>)
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	43db      	mvns	r3, r3
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d003      	beq.n	8004b60 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b60:	4a29      	ldr	r2, [pc, #164]	; (8004c08 <HAL_GPIO_Init+0x354>)
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004b66:	4b28      	ldr	r3, [pc, #160]	; (8004c08 <HAL_GPIO_Init+0x354>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	43db      	mvns	r3, r3
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	4013      	ands	r3, r2
 8004b74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b8a:	4a1f      	ldr	r2, [pc, #124]	; (8004c08 <HAL_GPIO_Init+0x354>)
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b90:	4b1d      	ldr	r3, [pc, #116]	; (8004c08 <HAL_GPIO_Init+0x354>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	43db      	mvns	r3, r3
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d003      	beq.n	8004bb4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004bb4:	4a14      	ldr	r2, [pc, #80]	; (8004c08 <HAL_GPIO_Init+0x354>)
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	61fb      	str	r3, [r7, #28]
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	2b0f      	cmp	r3, #15
 8004bc4:	f67f ae84 	bls.w	80048d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004bc8:	bf00      	nop
 8004bca:	bf00      	nop
 8004bcc:	3724      	adds	r7, #36	; 0x24
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	40023800 	.word	0x40023800
 8004bdc:	40013800 	.word	0x40013800
 8004be0:	40020000 	.word	0x40020000
 8004be4:	40020400 	.word	0x40020400
 8004be8:	40020800 	.word	0x40020800
 8004bec:	40020c00 	.word	0x40020c00
 8004bf0:	40021000 	.word	0x40021000
 8004bf4:	40021400 	.word	0x40021400
 8004bf8:	40021800 	.word	0x40021800
 8004bfc:	40021c00 	.word	0x40021c00
 8004c00:	40022000 	.word	0x40022000
 8004c04:	40022400 	.word	0x40022400
 8004c08:	40013c00 	.word	0x40013c00

08004c0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	460b      	mov	r3, r1
 8004c16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	691a      	ldr	r2, [r3, #16]
 8004c1c:	887b      	ldrh	r3, [r7, #2]
 8004c1e:	4013      	ands	r3, r2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d002      	beq.n	8004c2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c24:	2301      	movs	r3, #1
 8004c26:	73fb      	strb	r3, [r7, #15]
 8004c28:	e001      	b.n	8004c2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3714      	adds	r7, #20
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	460b      	mov	r3, r1
 8004c46:	807b      	strh	r3, [r7, #2]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c4c:	787b      	ldrb	r3, [r7, #1]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c52:	887a      	ldrh	r2, [r7, #2]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c58:	e003      	b.n	8004c62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c5a:	887b      	ldrh	r3, [r7, #2]
 8004c5c:	041a      	lsls	r2, r3, #16
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	619a      	str	r2, [r3, #24]
}
 8004c62:	bf00      	nop
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b085      	sub	sp, #20
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	460b      	mov	r3, r1
 8004c78:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c80:	887a      	ldrh	r2, [r7, #2]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4013      	ands	r3, r2
 8004c86:	041a      	lsls	r2, r3, #16
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	43d9      	mvns	r1, r3
 8004c8c:	887b      	ldrh	r3, [r7, #2]
 8004c8e:	400b      	ands	r3, r1
 8004c90:	431a      	orrs	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	619a      	str	r2, [r3, #24]
}
 8004c96:	bf00      	nop
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
	...

08004ca4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e12b      	b.n	8004f0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d106      	bne.n	8004cd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7fe fa0a 	bl	80030e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2224      	movs	r2, #36	; 0x24
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f022 0201 	bic.w	r2, r2, #1
 8004ce6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cf6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d08:	f000 fdfc 	bl	8005904 <HAL_RCC_GetPCLK1Freq>
 8004d0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	4a81      	ldr	r2, [pc, #516]	; (8004f18 <HAL_I2C_Init+0x274>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d807      	bhi.n	8004d28 <HAL_I2C_Init+0x84>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4a80      	ldr	r2, [pc, #512]	; (8004f1c <HAL_I2C_Init+0x278>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	bf94      	ite	ls
 8004d20:	2301      	movls	r3, #1
 8004d22:	2300      	movhi	r3, #0
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	e006      	b.n	8004d36 <HAL_I2C_Init+0x92>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4a7d      	ldr	r2, [pc, #500]	; (8004f20 <HAL_I2C_Init+0x27c>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	bf94      	ite	ls
 8004d30:	2301      	movls	r3, #1
 8004d32:	2300      	movhi	r3, #0
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e0e7      	b.n	8004f0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	4a78      	ldr	r2, [pc, #480]	; (8004f24 <HAL_I2C_Init+0x280>)
 8004d42:	fba2 2303 	umull	r2, r3, r2, r3
 8004d46:	0c9b      	lsrs	r3, r3, #18
 8004d48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	4a6a      	ldr	r2, [pc, #424]	; (8004f18 <HAL_I2C_Init+0x274>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d802      	bhi.n	8004d78 <HAL_I2C_Init+0xd4>
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	3301      	adds	r3, #1
 8004d76:	e009      	b.n	8004d8c <HAL_I2C_Init+0xe8>
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004d7e:	fb02 f303 	mul.w	r3, r2, r3
 8004d82:	4a69      	ldr	r2, [pc, #420]	; (8004f28 <HAL_I2C_Init+0x284>)
 8004d84:	fba2 2303 	umull	r2, r3, r2, r3
 8004d88:	099b      	lsrs	r3, r3, #6
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	6812      	ldr	r2, [r2, #0]
 8004d90:	430b      	orrs	r3, r1
 8004d92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	69db      	ldr	r3, [r3, #28]
 8004d9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004d9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	495c      	ldr	r1, [pc, #368]	; (8004f18 <HAL_I2C_Init+0x274>)
 8004da8:	428b      	cmp	r3, r1
 8004daa:	d819      	bhi.n	8004de0 <HAL_I2C_Init+0x13c>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	1e59      	subs	r1, r3, #1
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004dba:	1c59      	adds	r1, r3, #1
 8004dbc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004dc0:	400b      	ands	r3, r1
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00a      	beq.n	8004ddc <HAL_I2C_Init+0x138>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	1e59      	subs	r1, r3, #1
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dda:	e051      	b.n	8004e80 <HAL_I2C_Init+0x1dc>
 8004ddc:	2304      	movs	r3, #4
 8004dde:	e04f      	b.n	8004e80 <HAL_I2C_Init+0x1dc>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d111      	bne.n	8004e0c <HAL_I2C_Init+0x168>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	1e58      	subs	r0, r3, #1
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6859      	ldr	r1, [r3, #4]
 8004df0:	460b      	mov	r3, r1
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	440b      	add	r3, r1
 8004df6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	bf0c      	ite	eq
 8004e04:	2301      	moveq	r3, #1
 8004e06:	2300      	movne	r3, #0
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	e012      	b.n	8004e32 <HAL_I2C_Init+0x18e>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	1e58      	subs	r0, r3, #1
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6859      	ldr	r1, [r3, #4]
 8004e14:	460b      	mov	r3, r1
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	440b      	add	r3, r1
 8004e1a:	0099      	lsls	r1, r3, #2
 8004e1c:	440b      	add	r3, r1
 8004e1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e22:	3301      	adds	r3, #1
 8004e24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	bf0c      	ite	eq
 8004e2c:	2301      	moveq	r3, #1
 8004e2e:	2300      	movne	r3, #0
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <HAL_I2C_Init+0x196>
 8004e36:	2301      	movs	r3, #1
 8004e38:	e022      	b.n	8004e80 <HAL_I2C_Init+0x1dc>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10e      	bne.n	8004e60 <HAL_I2C_Init+0x1bc>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	1e58      	subs	r0, r3, #1
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6859      	ldr	r1, [r3, #4]
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	440b      	add	r3, r1
 8004e50:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e54:	3301      	adds	r3, #1
 8004e56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e5e:	e00f      	b.n	8004e80 <HAL_I2C_Init+0x1dc>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	1e58      	subs	r0, r3, #1
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6859      	ldr	r1, [r3, #4]
 8004e68:	460b      	mov	r3, r1
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	440b      	add	r3, r1
 8004e6e:	0099      	lsls	r1, r3, #2
 8004e70:	440b      	add	r3, r1
 8004e72:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e76:	3301      	adds	r3, #1
 8004e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e80:	6879      	ldr	r1, [r7, #4]
 8004e82:	6809      	ldr	r1, [r1, #0]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	69da      	ldr	r2, [r3, #28]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004eae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6911      	ldr	r1, [r2, #16]
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	68d2      	ldr	r2, [r2, #12]
 8004eba:	4311      	orrs	r1, r2
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	6812      	ldr	r2, [r2, #0]
 8004ec0:	430b      	orrs	r3, r1
 8004ec2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	695a      	ldr	r2, [r3, #20]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	430a      	orrs	r2, r1
 8004ede:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0201 	orr.w	r2, r2, #1
 8004eee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2220      	movs	r2, #32
 8004efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	000186a0 	.word	0x000186a0
 8004f1c:	001e847f 	.word	0x001e847f
 8004f20:	003d08ff 	.word	0x003d08ff
 8004f24:	431bde83 	.word	0x431bde83
 8004f28:	10624dd3 	.word	0x10624dd3

08004f2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b20      	cmp	r3, #32
 8004f40:	d129      	bne.n	8004f96 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2224      	movs	r2, #36	; 0x24
 8004f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 0201 	bic.w	r2, r2, #1
 8004f58:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f022 0210 	bic.w	r2, r2, #16
 8004f68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	683a      	ldr	r2, [r7, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f042 0201 	orr.w	r2, r2, #1
 8004f88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f92:	2300      	movs	r3, #0
 8004f94:	e000      	b.n	8004f98 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004f96:	2302      	movs	r3, #2
  }
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b20      	cmp	r3, #32
 8004fbc:	d12a      	bne.n	8005014 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2224      	movs	r2, #36	; 0x24
 8004fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 0201 	bic.w	r2, r2, #1
 8004fd4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004fde:	89fb      	ldrh	r3, [r7, #14]
 8004fe0:	f023 030f 	bic.w	r3, r3, #15
 8004fe4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	89fb      	ldrh	r3, [r7, #14]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	89fa      	ldrh	r2, [r7, #14]
 8004ff6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f042 0201 	orr.w	r2, r2, #1
 8005006:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2220      	movs	r2, #32
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005010:	2300      	movs	r3, #0
 8005012:	e000      	b.n	8005016 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005014:	2302      	movs	r3, #2
  }
}
 8005016:	4618      	mov	r0, r3
 8005018:	3714      	adds	r7, #20
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
	...

08005024 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e267      	b.n	8005506 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d075      	beq.n	800512e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005042:	4b88      	ldr	r3, [pc, #544]	; (8005264 <HAL_RCC_OscConfig+0x240>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 030c 	and.w	r3, r3, #12
 800504a:	2b04      	cmp	r3, #4
 800504c:	d00c      	beq.n	8005068 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800504e:	4b85      	ldr	r3, [pc, #532]	; (8005264 <HAL_RCC_OscConfig+0x240>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005056:	2b08      	cmp	r3, #8
 8005058:	d112      	bne.n	8005080 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800505a:	4b82      	ldr	r3, [pc, #520]	; (8005264 <HAL_RCC_OscConfig+0x240>)
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005062:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005066:	d10b      	bne.n	8005080 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005068:	4b7e      	ldr	r3, [pc, #504]	; (8005264 <HAL_RCC_OscConfig+0x240>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d05b      	beq.n	800512c <HAL_RCC_OscConfig+0x108>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d157      	bne.n	800512c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e242      	b.n	8005506 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005088:	d106      	bne.n	8005098 <HAL_RCC_OscConfig+0x74>
 800508a:	4b76      	ldr	r3, [pc, #472]	; (8005264 <HAL_RCC_OscConfig+0x240>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a75      	ldr	r2, [pc, #468]	; (8005264 <HAL_RCC_OscConfig+0x240>)
 8005090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005094:	6013      	str	r3, [r2, #0]
 8005096:	e01d      	b.n	80050d4 <HAL_RCC_OscConfig+0xb0>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050a0:	d10c      	bne.n	80050bc <HAL_RCC_OscConfig+0x98>
 80050a2:	4b70      	ldr	r3, [pc, #448]	; (8005264 <HAL_RCC_OscConfig+0x240>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a6f      	ldr	r2, [pc, #444]	; (8005264 <HAL_RCC_OscConfig+0x240>)
 80050a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	4b6d      	ldr	r3, [pc, #436]	; (8005264 <HAL_RCC_OscConfig+0x240>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a6c      	ldr	r2, [pc, #432]	; (8005264 <HAL_RCC_OscConfig+0x240>)
 80050b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050b8:	6013      	str	r3, [r2, #0]
 80050ba:	e00b      	b.n	80050d4 <HAL_RCC_OscConfig+0xb0>
 80050bc:	4b69      	ldr	r3, [pc, #420]	; (8005264 <HAL_RCC_OscConfig+0x240>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a68      	ldr	r2, [pc, #416]	; (8005264 <HAL_RCC_OscConfig+0x240>)
 80050c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050c6:	6013      	str	r3, [r2, #0]
 80050c8:	4b66      	ldr	r3, [pc, #408]	; (8005264 <HAL_RCC_OscConfig+0x240>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a65      	ldr	r2, [pc, #404]	; (8005264 <HAL_RCC_OscConfig+0x240>)
 80050ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d013      	beq.n	8005104 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050dc:	f7fe fc88 	bl	80039f0 <HAL_GetTick>
 80050e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050e2:	e008      	b.n	80050f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050e4:	f7fe fc84 	bl	80039f0 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	2b64      	cmp	r3, #100	; 0x64
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e207      	b.n	8005506 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050f6:	4b5b      	ldr	r3, [pc, #364]	; (8005264 <HAL_RCC_OscConfig+0x240>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d0f0      	beq.n	80050e4 <HAL_RCC_OscConfig+0xc0>
 8005102:	e014      	b.n	800512e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005104:	f7fe fc74 	bl	80039f0 <HAL_GetTick>
 8005108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800510a:	e008      	b.n	800511e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800510c:	f7fe fc70 	bl	80039f0 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b64      	cmp	r3, #100	; 0x64
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e1f3      	b.n	8005506 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800511e:	4b51      	ldr	r3, [pc, #324]	; (8005264 <HAL_RCC_OscConfig+0x240>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1f0      	bne.n	800510c <HAL_RCC_OscConfig+0xe8>
 800512a:	e000      	b.n	800512e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800512c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d063      	beq.n	8005202 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800513a:	4b4a      	ldr	r3, [pc, #296]	; (8005264 <HAL_RCC_OscConfig+0x240>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 030c 	and.w	r3, r3, #12
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00b      	beq.n	800515e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005146:	4b47      	ldr	r3, [pc, #284]	; (8005264 <HAL_RCC_OscConfig+0x240>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800514e:	2b08      	cmp	r3, #8
 8005150:	d11c      	bne.n	800518c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005152:	4b44      	ldr	r3, [pc, #272]	; (8005264 <HAL_RCC_OscConfig+0x240>)
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d116      	bne.n	800518c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800515e:	4b41      	ldr	r3, [pc, #260]	; (8005264 <HAL_RCC_OscConfig+0x240>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d005      	beq.n	8005176 <HAL_RCC_OscConfig+0x152>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d001      	beq.n	8005176 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e1c7      	b.n	8005506 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005176:	4b3b      	ldr	r3, [pc, #236]	; (8005264 <HAL_RCC_OscConfig+0x240>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	00db      	lsls	r3, r3, #3
 8005184:	4937      	ldr	r1, [pc, #220]	; (8005264 <HAL_RCC_OscConfig+0x240>)
 8005186:	4313      	orrs	r3, r2
 8005188:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800518a:	e03a      	b.n	8005202 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d020      	beq.n	80051d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005194:	4b34      	ldr	r3, [pc, #208]	; (8005268 <HAL_RCC_OscConfig+0x244>)
 8005196:	2201      	movs	r2, #1
 8005198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800519a:	f7fe fc29 	bl	80039f0 <HAL_GetTick>
 800519e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051a0:	e008      	b.n	80051b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051a2:	f7fe fc25 	bl	80039f0 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e1a8      	b.n	8005506 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051b4:	4b2b      	ldr	r3, [pc, #172]	; (8005264 <HAL_RCC_OscConfig+0x240>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d0f0      	beq.n	80051a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051c0:	4b28      	ldr	r3, [pc, #160]	; (8005264 <HAL_RCC_OscConfig+0x240>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	4925      	ldr	r1, [pc, #148]	; (8005264 <HAL_RCC_OscConfig+0x240>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	600b      	str	r3, [r1, #0]
 80051d4:	e015      	b.n	8005202 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051d6:	4b24      	ldr	r3, [pc, #144]	; (8005268 <HAL_RCC_OscConfig+0x244>)
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051dc:	f7fe fc08 	bl	80039f0 <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051e4:	f7fe fc04 	bl	80039f0 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e187      	b.n	8005506 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051f6:	4b1b      	ldr	r3, [pc, #108]	; (8005264 <HAL_RCC_OscConfig+0x240>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1f0      	bne.n	80051e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0308 	and.w	r3, r3, #8
 800520a:	2b00      	cmp	r3, #0
 800520c:	d036      	beq.n	800527c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d016      	beq.n	8005244 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005216:	4b15      	ldr	r3, [pc, #84]	; (800526c <HAL_RCC_OscConfig+0x248>)
 8005218:	2201      	movs	r2, #1
 800521a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800521c:	f7fe fbe8 	bl	80039f0 <HAL_GetTick>
 8005220:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005222:	e008      	b.n	8005236 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005224:	f7fe fbe4 	bl	80039f0 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d901      	bls.n	8005236 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e167      	b.n	8005506 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005236:	4b0b      	ldr	r3, [pc, #44]	; (8005264 <HAL_RCC_OscConfig+0x240>)
 8005238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d0f0      	beq.n	8005224 <HAL_RCC_OscConfig+0x200>
 8005242:	e01b      	b.n	800527c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005244:	4b09      	ldr	r3, [pc, #36]	; (800526c <HAL_RCC_OscConfig+0x248>)
 8005246:	2200      	movs	r2, #0
 8005248:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800524a:	f7fe fbd1 	bl	80039f0 <HAL_GetTick>
 800524e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005250:	e00e      	b.n	8005270 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005252:	f7fe fbcd 	bl	80039f0 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	2b02      	cmp	r3, #2
 800525e:	d907      	bls.n	8005270 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e150      	b.n	8005506 <HAL_RCC_OscConfig+0x4e2>
 8005264:	40023800 	.word	0x40023800
 8005268:	42470000 	.word	0x42470000
 800526c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005270:	4b88      	ldr	r3, [pc, #544]	; (8005494 <HAL_RCC_OscConfig+0x470>)
 8005272:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1ea      	bne.n	8005252 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0304 	and.w	r3, r3, #4
 8005284:	2b00      	cmp	r3, #0
 8005286:	f000 8097 	beq.w	80053b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800528a:	2300      	movs	r3, #0
 800528c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800528e:	4b81      	ldr	r3, [pc, #516]	; (8005494 <HAL_RCC_OscConfig+0x470>)
 8005290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10f      	bne.n	80052ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800529a:	2300      	movs	r3, #0
 800529c:	60bb      	str	r3, [r7, #8]
 800529e:	4b7d      	ldr	r3, [pc, #500]	; (8005494 <HAL_RCC_OscConfig+0x470>)
 80052a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a2:	4a7c      	ldr	r2, [pc, #496]	; (8005494 <HAL_RCC_OscConfig+0x470>)
 80052a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052a8:	6413      	str	r3, [r2, #64]	; 0x40
 80052aa:	4b7a      	ldr	r3, [pc, #488]	; (8005494 <HAL_RCC_OscConfig+0x470>)
 80052ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052b2:	60bb      	str	r3, [r7, #8]
 80052b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052b6:	2301      	movs	r3, #1
 80052b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ba:	4b77      	ldr	r3, [pc, #476]	; (8005498 <HAL_RCC_OscConfig+0x474>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d118      	bne.n	80052f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052c6:	4b74      	ldr	r3, [pc, #464]	; (8005498 <HAL_RCC_OscConfig+0x474>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a73      	ldr	r2, [pc, #460]	; (8005498 <HAL_RCC_OscConfig+0x474>)
 80052cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052d2:	f7fe fb8d 	bl	80039f0 <HAL_GetTick>
 80052d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052d8:	e008      	b.n	80052ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052da:	f7fe fb89 	bl	80039f0 <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d901      	bls.n	80052ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e10c      	b.n	8005506 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ec:	4b6a      	ldr	r3, [pc, #424]	; (8005498 <HAL_RCC_OscConfig+0x474>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d0f0      	beq.n	80052da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d106      	bne.n	800530e <HAL_RCC_OscConfig+0x2ea>
 8005300:	4b64      	ldr	r3, [pc, #400]	; (8005494 <HAL_RCC_OscConfig+0x470>)
 8005302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005304:	4a63      	ldr	r2, [pc, #396]	; (8005494 <HAL_RCC_OscConfig+0x470>)
 8005306:	f043 0301 	orr.w	r3, r3, #1
 800530a:	6713      	str	r3, [r2, #112]	; 0x70
 800530c:	e01c      	b.n	8005348 <HAL_RCC_OscConfig+0x324>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	2b05      	cmp	r3, #5
 8005314:	d10c      	bne.n	8005330 <HAL_RCC_OscConfig+0x30c>
 8005316:	4b5f      	ldr	r3, [pc, #380]	; (8005494 <HAL_RCC_OscConfig+0x470>)
 8005318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800531a:	4a5e      	ldr	r2, [pc, #376]	; (8005494 <HAL_RCC_OscConfig+0x470>)
 800531c:	f043 0304 	orr.w	r3, r3, #4
 8005320:	6713      	str	r3, [r2, #112]	; 0x70
 8005322:	4b5c      	ldr	r3, [pc, #368]	; (8005494 <HAL_RCC_OscConfig+0x470>)
 8005324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005326:	4a5b      	ldr	r2, [pc, #364]	; (8005494 <HAL_RCC_OscConfig+0x470>)
 8005328:	f043 0301 	orr.w	r3, r3, #1
 800532c:	6713      	str	r3, [r2, #112]	; 0x70
 800532e:	e00b      	b.n	8005348 <HAL_RCC_OscConfig+0x324>
 8005330:	4b58      	ldr	r3, [pc, #352]	; (8005494 <HAL_RCC_OscConfig+0x470>)
 8005332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005334:	4a57      	ldr	r2, [pc, #348]	; (8005494 <HAL_RCC_OscConfig+0x470>)
 8005336:	f023 0301 	bic.w	r3, r3, #1
 800533a:	6713      	str	r3, [r2, #112]	; 0x70
 800533c:	4b55      	ldr	r3, [pc, #340]	; (8005494 <HAL_RCC_OscConfig+0x470>)
 800533e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005340:	4a54      	ldr	r2, [pc, #336]	; (8005494 <HAL_RCC_OscConfig+0x470>)
 8005342:	f023 0304 	bic.w	r3, r3, #4
 8005346:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d015      	beq.n	800537c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005350:	f7fe fb4e 	bl	80039f0 <HAL_GetTick>
 8005354:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005356:	e00a      	b.n	800536e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005358:	f7fe fb4a 	bl	80039f0 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	f241 3288 	movw	r2, #5000	; 0x1388
 8005366:	4293      	cmp	r3, r2
 8005368:	d901      	bls.n	800536e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e0cb      	b.n	8005506 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800536e:	4b49      	ldr	r3, [pc, #292]	; (8005494 <HAL_RCC_OscConfig+0x470>)
 8005370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d0ee      	beq.n	8005358 <HAL_RCC_OscConfig+0x334>
 800537a:	e014      	b.n	80053a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800537c:	f7fe fb38 	bl	80039f0 <HAL_GetTick>
 8005380:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005382:	e00a      	b.n	800539a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005384:	f7fe fb34 	bl	80039f0 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005392:	4293      	cmp	r3, r2
 8005394:	d901      	bls.n	800539a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e0b5      	b.n	8005506 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800539a:	4b3e      	ldr	r3, [pc, #248]	; (8005494 <HAL_RCC_OscConfig+0x470>)
 800539c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1ee      	bne.n	8005384 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053a6:	7dfb      	ldrb	r3, [r7, #23]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d105      	bne.n	80053b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053ac:	4b39      	ldr	r3, [pc, #228]	; (8005494 <HAL_RCC_OscConfig+0x470>)
 80053ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b0:	4a38      	ldr	r2, [pc, #224]	; (8005494 <HAL_RCC_OscConfig+0x470>)
 80053b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f000 80a1 	beq.w	8005504 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053c2:	4b34      	ldr	r3, [pc, #208]	; (8005494 <HAL_RCC_OscConfig+0x470>)
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f003 030c 	and.w	r3, r3, #12
 80053ca:	2b08      	cmp	r3, #8
 80053cc:	d05c      	beq.n	8005488 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d141      	bne.n	800545a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053d6:	4b31      	ldr	r3, [pc, #196]	; (800549c <HAL_RCC_OscConfig+0x478>)
 80053d8:	2200      	movs	r2, #0
 80053da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053dc:	f7fe fb08 	bl	80039f0 <HAL_GetTick>
 80053e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053e2:	e008      	b.n	80053f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053e4:	f7fe fb04 	bl	80039f0 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d901      	bls.n	80053f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e087      	b.n	8005506 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053f6:	4b27      	ldr	r3, [pc, #156]	; (8005494 <HAL_RCC_OscConfig+0x470>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1f0      	bne.n	80053e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	69da      	ldr	r2, [r3, #28]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	431a      	orrs	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	019b      	lsls	r3, r3, #6
 8005412:	431a      	orrs	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005418:	085b      	lsrs	r3, r3, #1
 800541a:	3b01      	subs	r3, #1
 800541c:	041b      	lsls	r3, r3, #16
 800541e:	431a      	orrs	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005424:	061b      	lsls	r3, r3, #24
 8005426:	491b      	ldr	r1, [pc, #108]	; (8005494 <HAL_RCC_OscConfig+0x470>)
 8005428:	4313      	orrs	r3, r2
 800542a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800542c:	4b1b      	ldr	r3, [pc, #108]	; (800549c <HAL_RCC_OscConfig+0x478>)
 800542e:	2201      	movs	r2, #1
 8005430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005432:	f7fe fadd 	bl	80039f0 <HAL_GetTick>
 8005436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005438:	e008      	b.n	800544c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800543a:	f7fe fad9 	bl	80039f0 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b02      	cmp	r3, #2
 8005446:	d901      	bls.n	800544c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e05c      	b.n	8005506 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800544c:	4b11      	ldr	r3, [pc, #68]	; (8005494 <HAL_RCC_OscConfig+0x470>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d0f0      	beq.n	800543a <HAL_RCC_OscConfig+0x416>
 8005458:	e054      	b.n	8005504 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800545a:	4b10      	ldr	r3, [pc, #64]	; (800549c <HAL_RCC_OscConfig+0x478>)
 800545c:	2200      	movs	r2, #0
 800545e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005460:	f7fe fac6 	bl	80039f0 <HAL_GetTick>
 8005464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005466:	e008      	b.n	800547a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005468:	f7fe fac2 	bl	80039f0 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e045      	b.n	8005506 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800547a:	4b06      	ldr	r3, [pc, #24]	; (8005494 <HAL_RCC_OscConfig+0x470>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1f0      	bne.n	8005468 <HAL_RCC_OscConfig+0x444>
 8005486:	e03d      	b.n	8005504 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d107      	bne.n	80054a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e038      	b.n	8005506 <HAL_RCC_OscConfig+0x4e2>
 8005494:	40023800 	.word	0x40023800
 8005498:	40007000 	.word	0x40007000
 800549c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054a0:	4b1b      	ldr	r3, [pc, #108]	; (8005510 <HAL_RCC_OscConfig+0x4ec>)
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d028      	beq.n	8005500 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d121      	bne.n	8005500 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d11a      	bne.n	8005500 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80054d0:	4013      	ands	r3, r2
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054d8:	4293      	cmp	r3, r2
 80054da:	d111      	bne.n	8005500 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e6:	085b      	lsrs	r3, r3, #1
 80054e8:	3b01      	subs	r3, #1
 80054ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d107      	bne.n	8005500 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d001      	beq.n	8005504 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e000      	b.n	8005506 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3718      	adds	r7, #24
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	40023800 	.word	0x40023800

08005514 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d101      	bne.n	8005528 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e0cc      	b.n	80056c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005528:	4b68      	ldr	r3, [pc, #416]	; (80056cc <HAL_RCC_ClockConfig+0x1b8>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 030f 	and.w	r3, r3, #15
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	429a      	cmp	r2, r3
 8005534:	d90c      	bls.n	8005550 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005536:	4b65      	ldr	r3, [pc, #404]	; (80056cc <HAL_RCC_ClockConfig+0x1b8>)
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	b2d2      	uxtb	r2, r2
 800553c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800553e:	4b63      	ldr	r3, [pc, #396]	; (80056cc <HAL_RCC_ClockConfig+0x1b8>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 030f 	and.w	r3, r3, #15
 8005546:	683a      	ldr	r2, [r7, #0]
 8005548:	429a      	cmp	r2, r3
 800554a:	d001      	beq.n	8005550 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e0b8      	b.n	80056c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0302 	and.w	r3, r3, #2
 8005558:	2b00      	cmp	r3, #0
 800555a:	d020      	beq.n	800559e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0304 	and.w	r3, r3, #4
 8005564:	2b00      	cmp	r3, #0
 8005566:	d005      	beq.n	8005574 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005568:	4b59      	ldr	r3, [pc, #356]	; (80056d0 <HAL_RCC_ClockConfig+0x1bc>)
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	4a58      	ldr	r2, [pc, #352]	; (80056d0 <HAL_RCC_ClockConfig+0x1bc>)
 800556e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005572:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0308 	and.w	r3, r3, #8
 800557c:	2b00      	cmp	r3, #0
 800557e:	d005      	beq.n	800558c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005580:	4b53      	ldr	r3, [pc, #332]	; (80056d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	4a52      	ldr	r2, [pc, #328]	; (80056d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005586:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800558a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800558c:	4b50      	ldr	r3, [pc, #320]	; (80056d0 <HAL_RCC_ClockConfig+0x1bc>)
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	494d      	ldr	r1, [pc, #308]	; (80056d0 <HAL_RCC_ClockConfig+0x1bc>)
 800559a:	4313      	orrs	r3, r2
 800559c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d044      	beq.n	8005634 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d107      	bne.n	80055c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055b2:	4b47      	ldr	r3, [pc, #284]	; (80056d0 <HAL_RCC_ClockConfig+0x1bc>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d119      	bne.n	80055f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e07f      	b.n	80056c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d003      	beq.n	80055d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055ce:	2b03      	cmp	r3, #3
 80055d0:	d107      	bne.n	80055e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055d2:	4b3f      	ldr	r3, [pc, #252]	; (80056d0 <HAL_RCC_ClockConfig+0x1bc>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d109      	bne.n	80055f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e06f      	b.n	80056c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055e2:	4b3b      	ldr	r3, [pc, #236]	; (80056d0 <HAL_RCC_ClockConfig+0x1bc>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e067      	b.n	80056c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055f2:	4b37      	ldr	r3, [pc, #220]	; (80056d0 <HAL_RCC_ClockConfig+0x1bc>)
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f023 0203 	bic.w	r2, r3, #3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	4934      	ldr	r1, [pc, #208]	; (80056d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005600:	4313      	orrs	r3, r2
 8005602:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005604:	f7fe f9f4 	bl	80039f0 <HAL_GetTick>
 8005608:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800560a:	e00a      	b.n	8005622 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800560c:	f7fe f9f0 	bl	80039f0 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	f241 3288 	movw	r2, #5000	; 0x1388
 800561a:	4293      	cmp	r3, r2
 800561c:	d901      	bls.n	8005622 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e04f      	b.n	80056c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005622:	4b2b      	ldr	r3, [pc, #172]	; (80056d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	f003 020c 	and.w	r2, r3, #12
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	429a      	cmp	r2, r3
 8005632:	d1eb      	bne.n	800560c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005634:	4b25      	ldr	r3, [pc, #148]	; (80056cc <HAL_RCC_ClockConfig+0x1b8>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 030f 	and.w	r3, r3, #15
 800563c:	683a      	ldr	r2, [r7, #0]
 800563e:	429a      	cmp	r2, r3
 8005640:	d20c      	bcs.n	800565c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005642:	4b22      	ldr	r3, [pc, #136]	; (80056cc <HAL_RCC_ClockConfig+0x1b8>)
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	b2d2      	uxtb	r2, r2
 8005648:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800564a:	4b20      	ldr	r3, [pc, #128]	; (80056cc <HAL_RCC_ClockConfig+0x1b8>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 030f 	and.w	r3, r3, #15
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	429a      	cmp	r2, r3
 8005656:	d001      	beq.n	800565c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e032      	b.n	80056c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0304 	and.w	r3, r3, #4
 8005664:	2b00      	cmp	r3, #0
 8005666:	d008      	beq.n	800567a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005668:	4b19      	ldr	r3, [pc, #100]	; (80056d0 <HAL_RCC_ClockConfig+0x1bc>)
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	4916      	ldr	r1, [pc, #88]	; (80056d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005676:	4313      	orrs	r3, r2
 8005678:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0308 	and.w	r3, r3, #8
 8005682:	2b00      	cmp	r3, #0
 8005684:	d009      	beq.n	800569a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005686:	4b12      	ldr	r3, [pc, #72]	; (80056d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	00db      	lsls	r3, r3, #3
 8005694:	490e      	ldr	r1, [pc, #56]	; (80056d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005696:	4313      	orrs	r3, r2
 8005698:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800569a:	f000 f821 	bl	80056e0 <HAL_RCC_GetSysClockFreq>
 800569e:	4602      	mov	r2, r0
 80056a0:	4b0b      	ldr	r3, [pc, #44]	; (80056d0 <HAL_RCC_ClockConfig+0x1bc>)
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	091b      	lsrs	r3, r3, #4
 80056a6:	f003 030f 	and.w	r3, r3, #15
 80056aa:	490a      	ldr	r1, [pc, #40]	; (80056d4 <HAL_RCC_ClockConfig+0x1c0>)
 80056ac:	5ccb      	ldrb	r3, [r1, r3]
 80056ae:	fa22 f303 	lsr.w	r3, r2, r3
 80056b2:	4a09      	ldr	r2, [pc, #36]	; (80056d8 <HAL_RCC_ClockConfig+0x1c4>)
 80056b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056b6:	4b09      	ldr	r3, [pc, #36]	; (80056dc <HAL_RCC_ClockConfig+0x1c8>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7fe f80e 	bl	80036dc <HAL_InitTick>

  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	40023c00 	.word	0x40023c00
 80056d0:	40023800 	.word	0x40023800
 80056d4:	0800b030 	.word	0x0800b030
 80056d8:	20000010 	.word	0x20000010
 80056dc:	20000014 	.word	0x20000014

080056e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056e4:	b094      	sub	sp, #80	; 0x50
 80056e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80056e8:	2300      	movs	r3, #0
 80056ea:	647b      	str	r3, [r7, #68]	; 0x44
 80056ec:	2300      	movs	r3, #0
 80056ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056f0:	2300      	movs	r3, #0
 80056f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80056f4:	2300      	movs	r3, #0
 80056f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056f8:	4b79      	ldr	r3, [pc, #484]	; (80058e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f003 030c 	and.w	r3, r3, #12
 8005700:	2b08      	cmp	r3, #8
 8005702:	d00d      	beq.n	8005720 <HAL_RCC_GetSysClockFreq+0x40>
 8005704:	2b08      	cmp	r3, #8
 8005706:	f200 80e1 	bhi.w	80058cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800570a:	2b00      	cmp	r3, #0
 800570c:	d002      	beq.n	8005714 <HAL_RCC_GetSysClockFreq+0x34>
 800570e:	2b04      	cmp	r3, #4
 8005710:	d003      	beq.n	800571a <HAL_RCC_GetSysClockFreq+0x3a>
 8005712:	e0db      	b.n	80058cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005714:	4b73      	ldr	r3, [pc, #460]	; (80058e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005716:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005718:	e0db      	b.n	80058d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800571a:	4b73      	ldr	r3, [pc, #460]	; (80058e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800571c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800571e:	e0d8      	b.n	80058d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005720:	4b6f      	ldr	r3, [pc, #444]	; (80058e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005728:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800572a:	4b6d      	ldr	r3, [pc, #436]	; (80058e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d063      	beq.n	80057fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005736:	4b6a      	ldr	r3, [pc, #424]	; (80058e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	099b      	lsrs	r3, r3, #6
 800573c:	2200      	movs	r2, #0
 800573e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005740:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005748:	633b      	str	r3, [r7, #48]	; 0x30
 800574a:	2300      	movs	r3, #0
 800574c:	637b      	str	r3, [r7, #52]	; 0x34
 800574e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005752:	4622      	mov	r2, r4
 8005754:	462b      	mov	r3, r5
 8005756:	f04f 0000 	mov.w	r0, #0
 800575a:	f04f 0100 	mov.w	r1, #0
 800575e:	0159      	lsls	r1, r3, #5
 8005760:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005764:	0150      	lsls	r0, r2, #5
 8005766:	4602      	mov	r2, r0
 8005768:	460b      	mov	r3, r1
 800576a:	4621      	mov	r1, r4
 800576c:	1a51      	subs	r1, r2, r1
 800576e:	6139      	str	r1, [r7, #16]
 8005770:	4629      	mov	r1, r5
 8005772:	eb63 0301 	sbc.w	r3, r3, r1
 8005776:	617b      	str	r3, [r7, #20]
 8005778:	f04f 0200 	mov.w	r2, #0
 800577c:	f04f 0300 	mov.w	r3, #0
 8005780:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005784:	4659      	mov	r1, fp
 8005786:	018b      	lsls	r3, r1, #6
 8005788:	4651      	mov	r1, sl
 800578a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800578e:	4651      	mov	r1, sl
 8005790:	018a      	lsls	r2, r1, #6
 8005792:	4651      	mov	r1, sl
 8005794:	ebb2 0801 	subs.w	r8, r2, r1
 8005798:	4659      	mov	r1, fp
 800579a:	eb63 0901 	sbc.w	r9, r3, r1
 800579e:	f04f 0200 	mov.w	r2, #0
 80057a2:	f04f 0300 	mov.w	r3, #0
 80057a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057b2:	4690      	mov	r8, r2
 80057b4:	4699      	mov	r9, r3
 80057b6:	4623      	mov	r3, r4
 80057b8:	eb18 0303 	adds.w	r3, r8, r3
 80057bc:	60bb      	str	r3, [r7, #8]
 80057be:	462b      	mov	r3, r5
 80057c0:	eb49 0303 	adc.w	r3, r9, r3
 80057c4:	60fb      	str	r3, [r7, #12]
 80057c6:	f04f 0200 	mov.w	r2, #0
 80057ca:	f04f 0300 	mov.w	r3, #0
 80057ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80057d2:	4629      	mov	r1, r5
 80057d4:	024b      	lsls	r3, r1, #9
 80057d6:	4621      	mov	r1, r4
 80057d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80057dc:	4621      	mov	r1, r4
 80057de:	024a      	lsls	r2, r1, #9
 80057e0:	4610      	mov	r0, r2
 80057e2:	4619      	mov	r1, r3
 80057e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057e6:	2200      	movs	r2, #0
 80057e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80057ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80057f0:	f7fa fd06 	bl	8000200 <__aeabi_uldivmod>
 80057f4:	4602      	mov	r2, r0
 80057f6:	460b      	mov	r3, r1
 80057f8:	4613      	mov	r3, r2
 80057fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057fc:	e058      	b.n	80058b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057fe:	4b38      	ldr	r3, [pc, #224]	; (80058e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	099b      	lsrs	r3, r3, #6
 8005804:	2200      	movs	r2, #0
 8005806:	4618      	mov	r0, r3
 8005808:	4611      	mov	r1, r2
 800580a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800580e:	623b      	str	r3, [r7, #32]
 8005810:	2300      	movs	r3, #0
 8005812:	627b      	str	r3, [r7, #36]	; 0x24
 8005814:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005818:	4642      	mov	r2, r8
 800581a:	464b      	mov	r3, r9
 800581c:	f04f 0000 	mov.w	r0, #0
 8005820:	f04f 0100 	mov.w	r1, #0
 8005824:	0159      	lsls	r1, r3, #5
 8005826:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800582a:	0150      	lsls	r0, r2, #5
 800582c:	4602      	mov	r2, r0
 800582e:	460b      	mov	r3, r1
 8005830:	4641      	mov	r1, r8
 8005832:	ebb2 0a01 	subs.w	sl, r2, r1
 8005836:	4649      	mov	r1, r9
 8005838:	eb63 0b01 	sbc.w	fp, r3, r1
 800583c:	f04f 0200 	mov.w	r2, #0
 8005840:	f04f 0300 	mov.w	r3, #0
 8005844:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005848:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800584c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005850:	ebb2 040a 	subs.w	r4, r2, sl
 8005854:	eb63 050b 	sbc.w	r5, r3, fp
 8005858:	f04f 0200 	mov.w	r2, #0
 800585c:	f04f 0300 	mov.w	r3, #0
 8005860:	00eb      	lsls	r3, r5, #3
 8005862:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005866:	00e2      	lsls	r2, r4, #3
 8005868:	4614      	mov	r4, r2
 800586a:	461d      	mov	r5, r3
 800586c:	4643      	mov	r3, r8
 800586e:	18e3      	adds	r3, r4, r3
 8005870:	603b      	str	r3, [r7, #0]
 8005872:	464b      	mov	r3, r9
 8005874:	eb45 0303 	adc.w	r3, r5, r3
 8005878:	607b      	str	r3, [r7, #4]
 800587a:	f04f 0200 	mov.w	r2, #0
 800587e:	f04f 0300 	mov.w	r3, #0
 8005882:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005886:	4629      	mov	r1, r5
 8005888:	028b      	lsls	r3, r1, #10
 800588a:	4621      	mov	r1, r4
 800588c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005890:	4621      	mov	r1, r4
 8005892:	028a      	lsls	r2, r1, #10
 8005894:	4610      	mov	r0, r2
 8005896:	4619      	mov	r1, r3
 8005898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800589a:	2200      	movs	r2, #0
 800589c:	61bb      	str	r3, [r7, #24]
 800589e:	61fa      	str	r2, [r7, #28]
 80058a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058a4:	f7fa fcac 	bl	8000200 <__aeabi_uldivmod>
 80058a8:	4602      	mov	r2, r0
 80058aa:	460b      	mov	r3, r1
 80058ac:	4613      	mov	r3, r2
 80058ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80058b0:	4b0b      	ldr	r3, [pc, #44]	; (80058e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	0c1b      	lsrs	r3, r3, #16
 80058b6:	f003 0303 	and.w	r3, r3, #3
 80058ba:	3301      	adds	r3, #1
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80058c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80058ca:	e002      	b.n	80058d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058cc:	4b05      	ldr	r3, [pc, #20]	; (80058e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80058ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80058d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3750      	adds	r7, #80	; 0x50
 80058d8:	46bd      	mov	sp, r7
 80058da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058de:	bf00      	nop
 80058e0:	40023800 	.word	0x40023800
 80058e4:	00f42400 	.word	0x00f42400
 80058e8:	007a1200 	.word	0x007a1200

080058ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058ec:	b480      	push	{r7}
 80058ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058f0:	4b03      	ldr	r3, [pc, #12]	; (8005900 <HAL_RCC_GetHCLKFreq+0x14>)
 80058f2:	681b      	ldr	r3, [r3, #0]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	20000010 	.word	0x20000010

08005904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005908:	f7ff fff0 	bl	80058ec <HAL_RCC_GetHCLKFreq>
 800590c:	4602      	mov	r2, r0
 800590e:	4b05      	ldr	r3, [pc, #20]	; (8005924 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	0a9b      	lsrs	r3, r3, #10
 8005914:	f003 0307 	and.w	r3, r3, #7
 8005918:	4903      	ldr	r1, [pc, #12]	; (8005928 <HAL_RCC_GetPCLK1Freq+0x24>)
 800591a:	5ccb      	ldrb	r3, [r1, r3]
 800591c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005920:	4618      	mov	r0, r3
 8005922:	bd80      	pop	{r7, pc}
 8005924:	40023800 	.word	0x40023800
 8005928:	0800b040 	.word	0x0800b040

0800592c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005930:	f7ff ffdc 	bl	80058ec <HAL_RCC_GetHCLKFreq>
 8005934:	4602      	mov	r2, r0
 8005936:	4b05      	ldr	r3, [pc, #20]	; (800594c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	0b5b      	lsrs	r3, r3, #13
 800593c:	f003 0307 	and.w	r3, r3, #7
 8005940:	4903      	ldr	r1, [pc, #12]	; (8005950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005942:	5ccb      	ldrb	r3, [r1, r3]
 8005944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005948:	4618      	mov	r0, r3
 800594a:	bd80      	pop	{r7, pc}
 800594c:	40023800 	.word	0x40023800
 8005950:	0800b040 	.word	0x0800b040

08005954 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	220f      	movs	r2, #15
 8005962:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005964:	4b12      	ldr	r3, [pc, #72]	; (80059b0 <HAL_RCC_GetClockConfig+0x5c>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f003 0203 	and.w	r2, r3, #3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005970:	4b0f      	ldr	r3, [pc, #60]	; (80059b0 <HAL_RCC_GetClockConfig+0x5c>)
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800597c:	4b0c      	ldr	r3, [pc, #48]	; (80059b0 <HAL_RCC_GetClockConfig+0x5c>)
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005988:	4b09      	ldr	r3, [pc, #36]	; (80059b0 <HAL_RCC_GetClockConfig+0x5c>)
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	08db      	lsrs	r3, r3, #3
 800598e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005996:	4b07      	ldr	r3, [pc, #28]	; (80059b4 <HAL_RCC_GetClockConfig+0x60>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 020f 	and.w	r2, r3, #15
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	601a      	str	r2, [r3, #0]
}
 80059a2:	bf00      	nop
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	40023800 	.word	0x40023800
 80059b4:	40023c00 	.word	0x40023c00

080059b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d101      	bne.n	80059ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e041      	b.n	8005a4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d106      	bne.n	80059e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7fd fd2a 	bl	8003438 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2202      	movs	r2, #2
 80059e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	3304      	adds	r3, #4
 80059f4:	4619      	mov	r1, r3
 80059f6:	4610      	mov	r0, r2
 80059f8:	f000 fcbe 	bl	8006378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3708      	adds	r7, #8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
	...

08005a58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d001      	beq.n	8005a70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e04e      	b.n	8005b0e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2202      	movs	r2, #2
 8005a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68da      	ldr	r2, [r3, #12]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f042 0201 	orr.w	r2, r2, #1
 8005a86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a23      	ldr	r2, [pc, #140]	; (8005b1c <HAL_TIM_Base_Start_IT+0xc4>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d022      	beq.n	8005ad8 <HAL_TIM_Base_Start_IT+0x80>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a9a:	d01d      	beq.n	8005ad8 <HAL_TIM_Base_Start_IT+0x80>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a1f      	ldr	r2, [pc, #124]	; (8005b20 <HAL_TIM_Base_Start_IT+0xc8>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d018      	beq.n	8005ad8 <HAL_TIM_Base_Start_IT+0x80>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a1e      	ldr	r2, [pc, #120]	; (8005b24 <HAL_TIM_Base_Start_IT+0xcc>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d013      	beq.n	8005ad8 <HAL_TIM_Base_Start_IT+0x80>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a1c      	ldr	r2, [pc, #112]	; (8005b28 <HAL_TIM_Base_Start_IT+0xd0>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d00e      	beq.n	8005ad8 <HAL_TIM_Base_Start_IT+0x80>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a1b      	ldr	r2, [pc, #108]	; (8005b2c <HAL_TIM_Base_Start_IT+0xd4>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d009      	beq.n	8005ad8 <HAL_TIM_Base_Start_IT+0x80>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a19      	ldr	r2, [pc, #100]	; (8005b30 <HAL_TIM_Base_Start_IT+0xd8>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d004      	beq.n	8005ad8 <HAL_TIM_Base_Start_IT+0x80>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a18      	ldr	r2, [pc, #96]	; (8005b34 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d111      	bne.n	8005afc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f003 0307 	and.w	r3, r3, #7
 8005ae2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2b06      	cmp	r3, #6
 8005ae8:	d010      	beq.n	8005b0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f042 0201 	orr.w	r2, r2, #1
 8005af8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005afa:	e007      	b.n	8005b0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f042 0201 	orr.w	r2, r2, #1
 8005b0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3714      	adds	r7, #20
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	40010000 	.word	0x40010000
 8005b20:	40000400 	.word	0x40000400
 8005b24:	40000800 	.word	0x40000800
 8005b28:	40000c00 	.word	0x40000c00
 8005b2c:	40010400 	.word	0x40010400
 8005b30:	40014000 	.word	0x40014000
 8005b34:	40001800 	.word	0x40001800

08005b38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e041      	b.n	8005bce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d106      	bne.n	8005b64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f7fd fb3e 	bl	80031e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2202      	movs	r2, #2
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	3304      	adds	r3, #4
 8005b74:	4619      	mov	r1, r3
 8005b76:	4610      	mov	r0, r2
 8005b78:	f000 fbfe 	bl	8006378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3708      	adds	r7, #8
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
	...

08005bd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d109      	bne.n	8005bfc <HAL_TIM_PWM_Start+0x24>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	bf14      	ite	ne
 8005bf4:	2301      	movne	r3, #1
 8005bf6:	2300      	moveq	r3, #0
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	e022      	b.n	8005c42 <HAL_TIM_PWM_Start+0x6a>
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d109      	bne.n	8005c16 <HAL_TIM_PWM_Start+0x3e>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	bf14      	ite	ne
 8005c0e:	2301      	movne	r3, #1
 8005c10:	2300      	moveq	r3, #0
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	e015      	b.n	8005c42 <HAL_TIM_PWM_Start+0x6a>
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b08      	cmp	r3, #8
 8005c1a:	d109      	bne.n	8005c30 <HAL_TIM_PWM_Start+0x58>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	bf14      	ite	ne
 8005c28:	2301      	movne	r3, #1
 8005c2a:	2300      	moveq	r3, #0
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	e008      	b.n	8005c42 <HAL_TIM_PWM_Start+0x6a>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	bf14      	ite	ne
 8005c3c:	2301      	movne	r3, #1
 8005c3e:	2300      	moveq	r3, #0
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d001      	beq.n	8005c4a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e07c      	b.n	8005d44 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d104      	bne.n	8005c5a <HAL_TIM_PWM_Start+0x82>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2202      	movs	r2, #2
 8005c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c58:	e013      	b.n	8005c82 <HAL_TIM_PWM_Start+0xaa>
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	2b04      	cmp	r3, #4
 8005c5e:	d104      	bne.n	8005c6a <HAL_TIM_PWM_Start+0x92>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2202      	movs	r2, #2
 8005c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c68:	e00b      	b.n	8005c82 <HAL_TIM_PWM_Start+0xaa>
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	2b08      	cmp	r3, #8
 8005c6e:	d104      	bne.n	8005c7a <HAL_TIM_PWM_Start+0xa2>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2202      	movs	r2, #2
 8005c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c78:	e003      	b.n	8005c82 <HAL_TIM_PWM_Start+0xaa>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2202      	movs	r2, #2
 8005c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2201      	movs	r2, #1
 8005c88:	6839      	ldr	r1, [r7, #0]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 fdc4 	bl	8006818 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a2d      	ldr	r2, [pc, #180]	; (8005d4c <HAL_TIM_PWM_Start+0x174>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d004      	beq.n	8005ca4 <HAL_TIM_PWM_Start+0xcc>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a2c      	ldr	r2, [pc, #176]	; (8005d50 <HAL_TIM_PWM_Start+0x178>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d101      	bne.n	8005ca8 <HAL_TIM_PWM_Start+0xd0>
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e000      	b.n	8005caa <HAL_TIM_PWM_Start+0xd2>
 8005ca8:	2300      	movs	r3, #0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d007      	beq.n	8005cbe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cbc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a22      	ldr	r2, [pc, #136]	; (8005d4c <HAL_TIM_PWM_Start+0x174>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d022      	beq.n	8005d0e <HAL_TIM_PWM_Start+0x136>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cd0:	d01d      	beq.n	8005d0e <HAL_TIM_PWM_Start+0x136>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a1f      	ldr	r2, [pc, #124]	; (8005d54 <HAL_TIM_PWM_Start+0x17c>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d018      	beq.n	8005d0e <HAL_TIM_PWM_Start+0x136>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a1d      	ldr	r2, [pc, #116]	; (8005d58 <HAL_TIM_PWM_Start+0x180>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d013      	beq.n	8005d0e <HAL_TIM_PWM_Start+0x136>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a1c      	ldr	r2, [pc, #112]	; (8005d5c <HAL_TIM_PWM_Start+0x184>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d00e      	beq.n	8005d0e <HAL_TIM_PWM_Start+0x136>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a16      	ldr	r2, [pc, #88]	; (8005d50 <HAL_TIM_PWM_Start+0x178>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d009      	beq.n	8005d0e <HAL_TIM_PWM_Start+0x136>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a18      	ldr	r2, [pc, #96]	; (8005d60 <HAL_TIM_PWM_Start+0x188>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d004      	beq.n	8005d0e <HAL_TIM_PWM_Start+0x136>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a16      	ldr	r2, [pc, #88]	; (8005d64 <HAL_TIM_PWM_Start+0x18c>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d111      	bne.n	8005d32 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f003 0307 	and.w	r3, r3, #7
 8005d18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2b06      	cmp	r3, #6
 8005d1e:	d010      	beq.n	8005d42 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f042 0201 	orr.w	r2, r2, #1
 8005d2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d30:	e007      	b.n	8005d42 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f042 0201 	orr.w	r2, r2, #1
 8005d40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	40010000 	.word	0x40010000
 8005d50:	40010400 	.word	0x40010400
 8005d54:	40000400 	.word	0x40000400
 8005d58:	40000800 	.word	0x40000800
 8005d5c:	40000c00 	.word	0x40000c00
 8005d60:	40014000 	.word	0x40014000
 8005d64:	40001800 	.word	0x40001800

08005d68 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2200      	movs	r2, #0
 8005d78:	6839      	ldr	r1, [r7, #0]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 fd4c 	bl	8006818 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a2e      	ldr	r2, [pc, #184]	; (8005e40 <HAL_TIM_PWM_Stop+0xd8>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d004      	beq.n	8005d94 <HAL_TIM_PWM_Stop+0x2c>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a2d      	ldr	r2, [pc, #180]	; (8005e44 <HAL_TIM_PWM_Stop+0xdc>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d101      	bne.n	8005d98 <HAL_TIM_PWM_Stop+0x30>
 8005d94:	2301      	movs	r3, #1
 8005d96:	e000      	b.n	8005d9a <HAL_TIM_PWM_Stop+0x32>
 8005d98:	2300      	movs	r3, #0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d017      	beq.n	8005dce <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6a1a      	ldr	r2, [r3, #32]
 8005da4:	f241 1311 	movw	r3, #4369	; 0x1111
 8005da8:	4013      	ands	r3, r2
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10f      	bne.n	8005dce <HAL_TIM_PWM_Stop+0x66>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6a1a      	ldr	r2, [r3, #32]
 8005db4:	f240 4344 	movw	r3, #1092	; 0x444
 8005db8:	4013      	ands	r3, r2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d107      	bne.n	8005dce <HAL_TIM_PWM_Stop+0x66>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005dcc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	6a1a      	ldr	r2, [r3, #32]
 8005dd4:	f241 1311 	movw	r3, #4369	; 0x1111
 8005dd8:	4013      	ands	r3, r2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10f      	bne.n	8005dfe <HAL_TIM_PWM_Stop+0x96>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	6a1a      	ldr	r2, [r3, #32]
 8005de4:	f240 4344 	movw	r3, #1092	; 0x444
 8005de8:	4013      	ands	r3, r2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d107      	bne.n	8005dfe <HAL_TIM_PWM_Stop+0x96>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 0201 	bic.w	r2, r2, #1
 8005dfc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d104      	bne.n	8005e0e <HAL_TIM_PWM_Stop+0xa6>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e0c:	e013      	b.n	8005e36 <HAL_TIM_PWM_Stop+0xce>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b04      	cmp	r3, #4
 8005e12:	d104      	bne.n	8005e1e <HAL_TIM_PWM_Stop+0xb6>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e1c:	e00b      	b.n	8005e36 <HAL_TIM_PWM_Stop+0xce>
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b08      	cmp	r3, #8
 8005e22:	d104      	bne.n	8005e2e <HAL_TIM_PWM_Stop+0xc6>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e2c:	e003      	b.n	8005e36 <HAL_TIM_PWM_Stop+0xce>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3708      	adds	r7, #8
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	40010000 	.word	0x40010000
 8005e44:	40010400 	.word	0x40010400

08005e48 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d101      	bne.n	8005e5c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e097      	b.n	8005f8c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d106      	bne.n	8005e76 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f7fd f9dd 	bl	8003230 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2202      	movs	r2, #2
 8005e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	6812      	ldr	r2, [r2, #0]
 8005e88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e8c:	f023 0307 	bic.w	r3, r3, #7
 8005e90:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	3304      	adds	r3, #4
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	4610      	mov	r0, r2
 8005e9e:	f000 fa6b 	bl	8006378 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6a1b      	ldr	r3, [r3, #32]
 8005eb8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eca:	f023 0303 	bic.w	r3, r3, #3
 8005ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	689a      	ldr	r2, [r3, #8]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	021b      	lsls	r3, r3, #8
 8005eda:	4313      	orrs	r3, r2
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005ee8:	f023 030c 	bic.w	r3, r3, #12
 8005eec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ef4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ef8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	68da      	ldr	r2, [r3, #12]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	69db      	ldr	r3, [r3, #28]
 8005f02:	021b      	lsls	r3, r3, #8
 8005f04:	4313      	orrs	r3, r2
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	011a      	lsls	r2, r3, #4
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	031b      	lsls	r3, r3, #12
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005f26:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005f2e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	011b      	lsls	r3, r3, #4
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3718      	adds	r7, #24
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	f003 0302 	and.w	r3, r3, #2
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d122      	bne.n	8005ff0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d11b      	bne.n	8005ff0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f06f 0202 	mvn.w	r2, #2
 8005fc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	f003 0303 	and.w	r3, r3, #3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f9b0 	bl	800633c <HAL_TIM_IC_CaptureCallback>
 8005fdc:	e005      	b.n	8005fea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f9a2 	bl	8006328 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 f9b3 	bl	8006350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	f003 0304 	and.w	r3, r3, #4
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	d122      	bne.n	8006044 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f003 0304 	and.w	r3, r3, #4
 8006008:	2b04      	cmp	r3, #4
 800600a:	d11b      	bne.n	8006044 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f06f 0204 	mvn.w	r2, #4
 8006014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2202      	movs	r2, #2
 800601a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006026:	2b00      	cmp	r3, #0
 8006028:	d003      	beq.n	8006032 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f986 	bl	800633c <HAL_TIM_IC_CaptureCallback>
 8006030:	e005      	b.n	800603e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 f978 	bl	8006328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 f989 	bl	8006350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	f003 0308 	and.w	r3, r3, #8
 800604e:	2b08      	cmp	r3, #8
 8006050:	d122      	bne.n	8006098 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	f003 0308 	and.w	r3, r3, #8
 800605c:	2b08      	cmp	r3, #8
 800605e:	d11b      	bne.n	8006098 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f06f 0208 	mvn.w	r2, #8
 8006068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2204      	movs	r2, #4
 800606e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	f003 0303 	and.w	r3, r3, #3
 800607a:	2b00      	cmp	r3, #0
 800607c:	d003      	beq.n	8006086 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f95c 	bl	800633c <HAL_TIM_IC_CaptureCallback>
 8006084:	e005      	b.n	8006092 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f94e 	bl	8006328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f95f 	bl	8006350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	f003 0310 	and.w	r3, r3, #16
 80060a2:	2b10      	cmp	r3, #16
 80060a4:	d122      	bne.n	80060ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	f003 0310 	and.w	r3, r3, #16
 80060b0:	2b10      	cmp	r3, #16
 80060b2:	d11b      	bne.n	80060ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f06f 0210 	mvn.w	r2, #16
 80060bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2208      	movs	r2, #8
 80060c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	69db      	ldr	r3, [r3, #28]
 80060ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d003      	beq.n	80060da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f932 	bl	800633c <HAL_TIM_IC_CaptureCallback>
 80060d8:	e005      	b.n	80060e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f924 	bl	8006328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 f935 	bl	8006350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d10e      	bne.n	8006118 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	2b01      	cmp	r3, #1
 8006106:	d107      	bne.n	8006118 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f06f 0201 	mvn.w	r2, #1
 8006110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f7fc f930 	bl	8002378 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006122:	2b80      	cmp	r3, #128	; 0x80
 8006124:	d10e      	bne.n	8006144 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006130:	2b80      	cmp	r3, #128	; 0x80
 8006132:	d107      	bne.n	8006144 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800613c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fc68 	bl	8006a14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614e:	2b40      	cmp	r3, #64	; 0x40
 8006150:	d10e      	bne.n	8006170 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615c:	2b40      	cmp	r3, #64	; 0x40
 800615e:	d107      	bne.n	8006170 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f8fa 	bl	8006364 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	f003 0320 	and.w	r3, r3, #32
 800617a:	2b20      	cmp	r3, #32
 800617c:	d10e      	bne.n	800619c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	f003 0320 	and.w	r3, r3, #32
 8006188:	2b20      	cmp	r3, #32
 800618a:	d107      	bne.n	800619c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f06f 0220 	mvn.w	r2, #32
 8006194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fc32 	bl	8006a00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800619c:	bf00      	nop
 800619e:	3708      	adds	r7, #8
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b086      	sub	sp, #24
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061b0:	2300      	movs	r3, #0
 80061b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d101      	bne.n	80061c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80061be:	2302      	movs	r3, #2
 80061c0:	e0ae      	b.n	8006320 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2b0c      	cmp	r3, #12
 80061ce:	f200 809f 	bhi.w	8006310 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80061d2:	a201      	add	r2, pc, #4	; (adr r2, 80061d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80061d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d8:	0800620d 	.word	0x0800620d
 80061dc:	08006311 	.word	0x08006311
 80061e0:	08006311 	.word	0x08006311
 80061e4:	08006311 	.word	0x08006311
 80061e8:	0800624d 	.word	0x0800624d
 80061ec:	08006311 	.word	0x08006311
 80061f0:	08006311 	.word	0x08006311
 80061f4:	08006311 	.word	0x08006311
 80061f8:	0800628f 	.word	0x0800628f
 80061fc:	08006311 	.word	0x08006311
 8006200:	08006311 	.word	0x08006311
 8006204:	08006311 	.word	0x08006311
 8006208:	080062cf 	.word	0x080062cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68b9      	ldr	r1, [r7, #8]
 8006212:	4618      	mov	r0, r3
 8006214:	f000 f950 	bl	80064b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	699a      	ldr	r2, [r3, #24]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f042 0208 	orr.w	r2, r2, #8
 8006226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	699a      	ldr	r2, [r3, #24]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f022 0204 	bic.w	r2, r2, #4
 8006236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6999      	ldr	r1, [r3, #24]
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	691a      	ldr	r2, [r3, #16]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	430a      	orrs	r2, r1
 8006248:	619a      	str	r2, [r3, #24]
      break;
 800624a:	e064      	b.n	8006316 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68b9      	ldr	r1, [r7, #8]
 8006252:	4618      	mov	r0, r3
 8006254:	f000 f9a0 	bl	8006598 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	699a      	ldr	r2, [r3, #24]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006266:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	699a      	ldr	r2, [r3, #24]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006276:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6999      	ldr	r1, [r3, #24]
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	021a      	lsls	r2, r3, #8
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	430a      	orrs	r2, r1
 800628a:	619a      	str	r2, [r3, #24]
      break;
 800628c:	e043      	b.n	8006316 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68b9      	ldr	r1, [r7, #8]
 8006294:	4618      	mov	r0, r3
 8006296:	f000 f9f5 	bl	8006684 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	69da      	ldr	r2, [r3, #28]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f042 0208 	orr.w	r2, r2, #8
 80062a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	69da      	ldr	r2, [r3, #28]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f022 0204 	bic.w	r2, r2, #4
 80062b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	69d9      	ldr	r1, [r3, #28]
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	691a      	ldr	r2, [r3, #16]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	430a      	orrs	r2, r1
 80062ca:	61da      	str	r2, [r3, #28]
      break;
 80062cc:	e023      	b.n	8006316 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68b9      	ldr	r1, [r7, #8]
 80062d4:	4618      	mov	r0, r3
 80062d6:	f000 fa49 	bl	800676c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	69da      	ldr	r2, [r3, #28]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	69da      	ldr	r2, [r3, #28]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	69d9      	ldr	r1, [r3, #28]
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	021a      	lsls	r2, r3, #8
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	430a      	orrs	r2, r1
 800630c:	61da      	str	r2, [r3, #28]
      break;
 800630e:	e002      	b.n	8006316 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	75fb      	strb	r3, [r7, #23]
      break;
 8006314:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800631e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006320:	4618      	mov	r0, r3
 8006322:	3718      	adds	r7, #24
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006330:	bf00      	nop
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a40      	ldr	r2, [pc, #256]	; (800648c <TIM_Base_SetConfig+0x114>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d013      	beq.n	80063b8 <TIM_Base_SetConfig+0x40>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006396:	d00f      	beq.n	80063b8 <TIM_Base_SetConfig+0x40>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a3d      	ldr	r2, [pc, #244]	; (8006490 <TIM_Base_SetConfig+0x118>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d00b      	beq.n	80063b8 <TIM_Base_SetConfig+0x40>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a3c      	ldr	r2, [pc, #240]	; (8006494 <TIM_Base_SetConfig+0x11c>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d007      	beq.n	80063b8 <TIM_Base_SetConfig+0x40>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a3b      	ldr	r2, [pc, #236]	; (8006498 <TIM_Base_SetConfig+0x120>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d003      	beq.n	80063b8 <TIM_Base_SetConfig+0x40>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a3a      	ldr	r2, [pc, #232]	; (800649c <TIM_Base_SetConfig+0x124>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d108      	bne.n	80063ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a2f      	ldr	r2, [pc, #188]	; (800648c <TIM_Base_SetConfig+0x114>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d02b      	beq.n	800642a <TIM_Base_SetConfig+0xb2>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063d8:	d027      	beq.n	800642a <TIM_Base_SetConfig+0xb2>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a2c      	ldr	r2, [pc, #176]	; (8006490 <TIM_Base_SetConfig+0x118>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d023      	beq.n	800642a <TIM_Base_SetConfig+0xb2>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a2b      	ldr	r2, [pc, #172]	; (8006494 <TIM_Base_SetConfig+0x11c>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d01f      	beq.n	800642a <TIM_Base_SetConfig+0xb2>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a2a      	ldr	r2, [pc, #168]	; (8006498 <TIM_Base_SetConfig+0x120>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d01b      	beq.n	800642a <TIM_Base_SetConfig+0xb2>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a29      	ldr	r2, [pc, #164]	; (800649c <TIM_Base_SetConfig+0x124>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d017      	beq.n	800642a <TIM_Base_SetConfig+0xb2>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a28      	ldr	r2, [pc, #160]	; (80064a0 <TIM_Base_SetConfig+0x128>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d013      	beq.n	800642a <TIM_Base_SetConfig+0xb2>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a27      	ldr	r2, [pc, #156]	; (80064a4 <TIM_Base_SetConfig+0x12c>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d00f      	beq.n	800642a <TIM_Base_SetConfig+0xb2>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a26      	ldr	r2, [pc, #152]	; (80064a8 <TIM_Base_SetConfig+0x130>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d00b      	beq.n	800642a <TIM_Base_SetConfig+0xb2>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a25      	ldr	r2, [pc, #148]	; (80064ac <TIM_Base_SetConfig+0x134>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d007      	beq.n	800642a <TIM_Base_SetConfig+0xb2>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a24      	ldr	r2, [pc, #144]	; (80064b0 <TIM_Base_SetConfig+0x138>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d003      	beq.n	800642a <TIM_Base_SetConfig+0xb2>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a23      	ldr	r2, [pc, #140]	; (80064b4 <TIM_Base_SetConfig+0x13c>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d108      	bne.n	800643c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006430:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	4313      	orrs	r3, r2
 800643a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	4313      	orrs	r3, r2
 8006448:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	689a      	ldr	r2, [r3, #8]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a0a      	ldr	r2, [pc, #40]	; (800648c <TIM_Base_SetConfig+0x114>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d003      	beq.n	8006470 <TIM_Base_SetConfig+0xf8>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a0c      	ldr	r2, [pc, #48]	; (800649c <TIM_Base_SetConfig+0x124>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d103      	bne.n	8006478 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	691a      	ldr	r2, [r3, #16]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	615a      	str	r2, [r3, #20]
}
 800647e:	bf00      	nop
 8006480:	3714      	adds	r7, #20
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	40010000 	.word	0x40010000
 8006490:	40000400 	.word	0x40000400
 8006494:	40000800 	.word	0x40000800
 8006498:	40000c00 	.word	0x40000c00
 800649c:	40010400 	.word	0x40010400
 80064a0:	40014000 	.word	0x40014000
 80064a4:	40014400 	.word	0x40014400
 80064a8:	40014800 	.word	0x40014800
 80064ac:	40001800 	.word	0x40001800
 80064b0:	40001c00 	.word	0x40001c00
 80064b4:	40002000 	.word	0x40002000

080064b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b087      	sub	sp, #28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	f023 0201 	bic.w	r2, r3, #1
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f023 0303 	bic.w	r3, r3, #3
 80064ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f023 0302 	bic.w	r3, r3, #2
 8006500:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	4313      	orrs	r3, r2
 800650a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a20      	ldr	r2, [pc, #128]	; (8006590 <TIM_OC1_SetConfig+0xd8>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d003      	beq.n	800651c <TIM_OC1_SetConfig+0x64>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a1f      	ldr	r2, [pc, #124]	; (8006594 <TIM_OC1_SetConfig+0xdc>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d10c      	bne.n	8006536 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	f023 0308 	bic.w	r3, r3, #8
 8006522:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	697a      	ldr	r2, [r7, #20]
 800652a:	4313      	orrs	r3, r2
 800652c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f023 0304 	bic.w	r3, r3, #4
 8006534:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a15      	ldr	r2, [pc, #84]	; (8006590 <TIM_OC1_SetConfig+0xd8>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d003      	beq.n	8006546 <TIM_OC1_SetConfig+0x8e>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a14      	ldr	r2, [pc, #80]	; (8006594 <TIM_OC1_SetConfig+0xdc>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d111      	bne.n	800656a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800654c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006554:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	4313      	orrs	r3, r2
 800655e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	4313      	orrs	r3, r2
 8006568:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	693a      	ldr	r2, [r7, #16]
 800656e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	685a      	ldr	r2, [r3, #4]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	621a      	str	r2, [r3, #32]
}
 8006584:	bf00      	nop
 8006586:	371c      	adds	r7, #28
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr
 8006590:	40010000 	.word	0x40010000
 8006594:	40010400 	.word	0x40010400

08006598 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006598:	b480      	push	{r7}
 800659a:	b087      	sub	sp, #28
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	f023 0210 	bic.w	r2, r3, #16
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	021b      	lsls	r3, r3, #8
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	4313      	orrs	r3, r2
 80065da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	f023 0320 	bic.w	r3, r3, #32
 80065e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	011b      	lsls	r3, r3, #4
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a22      	ldr	r2, [pc, #136]	; (800667c <TIM_OC2_SetConfig+0xe4>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d003      	beq.n	8006600 <TIM_OC2_SetConfig+0x68>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a21      	ldr	r2, [pc, #132]	; (8006680 <TIM_OC2_SetConfig+0xe8>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d10d      	bne.n	800661c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006606:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	011b      	lsls	r3, r3, #4
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	4313      	orrs	r3, r2
 8006612:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800661a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a17      	ldr	r2, [pc, #92]	; (800667c <TIM_OC2_SetConfig+0xe4>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d003      	beq.n	800662c <TIM_OC2_SetConfig+0x94>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a16      	ldr	r2, [pc, #88]	; (8006680 <TIM_OC2_SetConfig+0xe8>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d113      	bne.n	8006654 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006632:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800663a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	695b      	ldr	r3, [r3, #20]
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	693a      	ldr	r2, [r7, #16]
 8006644:	4313      	orrs	r3, r2
 8006646:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	699b      	ldr	r3, [r3, #24]
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	693a      	ldr	r2, [r7, #16]
 8006650:	4313      	orrs	r3, r2
 8006652:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	685a      	ldr	r2, [r3, #4]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	621a      	str	r2, [r3, #32]
}
 800666e:	bf00      	nop
 8006670:	371c      	adds	r7, #28
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	40010000 	.word	0x40010000
 8006680:	40010400 	.word	0x40010400

08006684 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006684:	b480      	push	{r7}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f023 0303 	bic.w	r3, r3, #3
 80066ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	021b      	lsls	r3, r3, #8
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a21      	ldr	r2, [pc, #132]	; (8006764 <TIM_OC3_SetConfig+0xe0>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d003      	beq.n	80066ea <TIM_OC3_SetConfig+0x66>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a20      	ldr	r2, [pc, #128]	; (8006768 <TIM_OC3_SetConfig+0xe4>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d10d      	bne.n	8006706 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	021b      	lsls	r3, r3, #8
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006704:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a16      	ldr	r2, [pc, #88]	; (8006764 <TIM_OC3_SetConfig+0xe0>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d003      	beq.n	8006716 <TIM_OC3_SetConfig+0x92>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a15      	ldr	r2, [pc, #84]	; (8006768 <TIM_OC3_SetConfig+0xe4>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d113      	bne.n	800673e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800671c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006724:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	011b      	lsls	r3, r3, #4
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	4313      	orrs	r3, r2
 8006730:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	011b      	lsls	r3, r3, #4
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	4313      	orrs	r3, r2
 800673c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	685a      	ldr	r2, [r3, #4]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	697a      	ldr	r2, [r7, #20]
 8006756:	621a      	str	r2, [r3, #32]
}
 8006758:	bf00      	nop
 800675a:	371c      	adds	r7, #28
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr
 8006764:	40010000 	.word	0x40010000
 8006768:	40010400 	.word	0x40010400

0800676c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800676c:	b480      	push	{r7}
 800676e:	b087      	sub	sp, #28
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	69db      	ldr	r3, [r3, #28]
 8006792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800679a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	021b      	lsls	r3, r3, #8
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	031b      	lsls	r3, r3, #12
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a12      	ldr	r2, [pc, #72]	; (8006810 <TIM_OC4_SetConfig+0xa4>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d003      	beq.n	80067d4 <TIM_OC4_SetConfig+0x68>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a11      	ldr	r2, [pc, #68]	; (8006814 <TIM_OC4_SetConfig+0xa8>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d109      	bne.n	80067e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	019b      	lsls	r3, r3, #6
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	685a      	ldr	r2, [r3, #4]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	693a      	ldr	r2, [r7, #16]
 8006800:	621a      	str	r2, [r3, #32]
}
 8006802:	bf00      	nop
 8006804:	371c      	adds	r7, #28
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	40010000 	.word	0x40010000
 8006814:	40010400 	.word	0x40010400

08006818 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006818:	b480      	push	{r7}
 800681a:	b087      	sub	sp, #28
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	f003 031f 	and.w	r3, r3, #31
 800682a:	2201      	movs	r2, #1
 800682c:	fa02 f303 	lsl.w	r3, r2, r3
 8006830:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6a1a      	ldr	r2, [r3, #32]
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	43db      	mvns	r3, r3
 800683a:	401a      	ands	r2, r3
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6a1a      	ldr	r2, [r3, #32]
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	f003 031f 	and.w	r3, r3, #31
 800684a:	6879      	ldr	r1, [r7, #4]
 800684c:	fa01 f303 	lsl.w	r3, r1, r3
 8006850:	431a      	orrs	r2, r3
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	621a      	str	r2, [r3, #32]
}
 8006856:	bf00      	nop
 8006858:	371c      	adds	r7, #28
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
	...

08006864 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006874:	2b01      	cmp	r3, #1
 8006876:	d101      	bne.n	800687c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006878:	2302      	movs	r3, #2
 800687a:	e05a      	b.n	8006932 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2202      	movs	r2, #2
 8006888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a21      	ldr	r2, [pc, #132]	; (8006940 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d022      	beq.n	8006906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068c8:	d01d      	beq.n	8006906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a1d      	ldr	r2, [pc, #116]	; (8006944 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d018      	beq.n	8006906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a1b      	ldr	r2, [pc, #108]	; (8006948 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d013      	beq.n	8006906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a1a      	ldr	r2, [pc, #104]	; (800694c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d00e      	beq.n	8006906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a18      	ldr	r2, [pc, #96]	; (8006950 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d009      	beq.n	8006906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a17      	ldr	r2, [pc, #92]	; (8006954 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d004      	beq.n	8006906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a15      	ldr	r2, [pc, #84]	; (8006958 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d10c      	bne.n	8006920 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800690c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	4313      	orrs	r3, r2
 8006916:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68ba      	ldr	r2, [r7, #8]
 800691e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3714      	adds	r7, #20
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	40010000 	.word	0x40010000
 8006944:	40000400 	.word	0x40000400
 8006948:	40000800 	.word	0x40000800
 800694c:	40000c00 	.word	0x40000c00
 8006950:	40010400 	.word	0x40010400
 8006954:	40014000 	.word	0x40014000
 8006958:	40001800 	.word	0x40001800

0800695c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006966:	2300      	movs	r3, #0
 8006968:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006970:	2b01      	cmp	r3, #1
 8006972:	d101      	bne.n	8006978 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006974:	2302      	movs	r3, #2
 8006976:	e03d      	b.n	80069f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	4313      	orrs	r3, r2
 800698c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	4313      	orrs	r3, r2
 800699a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	695b      	ldr	r3, [r3, #20]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	4313      	orrs	r3, r2
 80069e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3714      	adds	r7, #20
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a1c:	bf00      	nop
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d101      	bne.n	8006a3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e03f      	b.n	8006aba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d106      	bne.n	8006a54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f7fc fd54 	bl	80034fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2224      	movs	r2, #36	; 0x24
 8006a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68da      	ldr	r2, [r3, #12]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 ff43 	bl	80078f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	691a      	ldr	r2, [r3, #16]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	695a      	ldr	r2, [r3, #20]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68da      	ldr	r2, [r3, #12]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006aa0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2220      	movs	r2, #32
 8006aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2220      	movs	r2, #32
 8006ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3708      	adds	r7, #8
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
	...

08006ac4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b08c      	sub	sp, #48	; 0x30
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b20      	cmp	r3, #32
 8006adc:	d165      	bne.n	8006baa <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d002      	beq.n	8006aea <HAL_UART_Transmit_DMA+0x26>
 8006ae4:	88fb      	ldrh	r3, [r7, #6]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d101      	bne.n	8006aee <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e05e      	b.n	8006bac <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d101      	bne.n	8006afc <HAL_UART_Transmit_DMA+0x38>
 8006af8:	2302      	movs	r3, #2
 8006afa:	e057      	b.n	8006bac <HAL_UART_Transmit_DMA+0xe8>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	88fa      	ldrh	r2, [r7, #6]
 8006b0e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	88fa      	ldrh	r2, [r7, #6]
 8006b14:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2221      	movs	r2, #33	; 0x21
 8006b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b28:	4a22      	ldr	r2, [pc, #136]	; (8006bb4 <HAL_UART_Transmit_DMA+0xf0>)
 8006b2a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b30:	4a21      	ldr	r2, [pc, #132]	; (8006bb8 <HAL_UART_Transmit_DMA+0xf4>)
 8006b32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b38:	4a20      	ldr	r2, [pc, #128]	; (8006bbc <HAL_UART_Transmit_DMA+0xf8>)
 8006b3a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b40:	2200      	movs	r2, #0
 8006b42:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006b44:	f107 0308 	add.w	r3, r7, #8
 8006b48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b50:	6819      	ldr	r1, [r3, #0]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	3304      	adds	r3, #4
 8006b58:	461a      	mov	r2, r3
 8006b5a:	88fb      	ldrh	r3, [r7, #6]
 8006b5c:	f7fd fb56 	bl	800420c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b68:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	3314      	adds	r3, #20
 8006b78:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	e853 3f00 	ldrex	r3, [r3]
 8006b80:	617b      	str	r3, [r7, #20]
   return(result);
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b88:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	3314      	adds	r3, #20
 8006b90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b92:	627a      	str	r2, [r7, #36]	; 0x24
 8006b94:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b96:	6a39      	ldr	r1, [r7, #32]
 8006b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b9a:	e841 2300 	strex	r3, r2, [r1]
 8006b9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1e5      	bne.n	8006b72 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	e000      	b.n	8006bac <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8006baa:	2302      	movs	r3, #2
  }
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3730      	adds	r7, #48	; 0x30
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	08007191 	.word	0x08007191
 8006bb8:	0800722b 	.word	0x0800722b
 8006bbc:	080073a3 	.word	0x080073a3

08006bc0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	2b20      	cmp	r3, #32
 8006bd8:	d11d      	bne.n	8006c16 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d002      	beq.n	8006be6 <HAL_UART_Receive_DMA+0x26>
 8006be0:	88fb      	ldrh	r3, [r7, #6]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d101      	bne.n	8006bea <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e016      	b.n	8006c18 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d101      	bne.n	8006bf8 <HAL_UART_Receive_DMA+0x38>
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	e00f      	b.n	8006c18 <HAL_UART_Receive_DMA+0x58>
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006c06:	88fb      	ldrh	r3, [r7, #6]
 8006c08:	461a      	mov	r2, r3
 8006c0a:	68b9      	ldr	r1, [r7, #8]
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f000 fc13 	bl	8007438 <UART_Start_Receive_DMA>
 8006c12:	4603      	mov	r3, r0
 8006c14:	e000      	b.n	8006c18 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006c16:	2302      	movs	r3, #2
  }
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b0ba      	sub	sp, #232	; 0xe8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006c46:	2300      	movs	r3, #0
 8006c48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c56:	f003 030f 	and.w	r3, r3, #15
 8006c5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006c5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d10f      	bne.n	8006c86 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c6a:	f003 0320 	and.w	r3, r3, #32
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d009      	beq.n	8006c86 <HAL_UART_IRQHandler+0x66>
 8006c72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c76:	f003 0320 	and.w	r3, r3, #32
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d003      	beq.n	8006c86 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fd7f 	bl	8007782 <UART_Receive_IT>
      return;
 8006c84:	e256      	b.n	8007134 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006c86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	f000 80de 	beq.w	8006e4c <HAL_UART_IRQHandler+0x22c>
 8006c90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d106      	bne.n	8006caa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ca0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f000 80d1 	beq.w	8006e4c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cae:	f003 0301 	and.w	r3, r3, #1
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d00b      	beq.n	8006cce <HAL_UART_IRQHandler+0xae>
 8006cb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d005      	beq.n	8006cce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc6:	f043 0201 	orr.w	r2, r3, #1
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cd2:	f003 0304 	and.w	r3, r3, #4
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00b      	beq.n	8006cf2 <HAL_UART_IRQHandler+0xd2>
 8006cda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cde:	f003 0301 	and.w	r3, r3, #1
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d005      	beq.n	8006cf2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cea:	f043 0202 	orr.w	r2, r3, #2
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cf6:	f003 0302 	and.w	r3, r3, #2
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00b      	beq.n	8006d16 <HAL_UART_IRQHandler+0xf6>
 8006cfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d02:	f003 0301 	and.w	r3, r3, #1
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d005      	beq.n	8006d16 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0e:	f043 0204 	orr.w	r2, r3, #4
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d1a:	f003 0308 	and.w	r3, r3, #8
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d011      	beq.n	8006d46 <HAL_UART_IRQHandler+0x126>
 8006d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d26:	f003 0320 	and.w	r3, r3, #32
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d105      	bne.n	8006d3a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006d2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d32:	f003 0301 	and.w	r3, r3, #1
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d005      	beq.n	8006d46 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3e:	f043 0208 	orr.w	r2, r3, #8
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f000 81ed 	beq.w	800712a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d54:	f003 0320 	and.w	r3, r3, #32
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d008      	beq.n	8006d6e <HAL_UART_IRQHandler+0x14e>
 8006d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d60:	f003 0320 	and.w	r3, r3, #32
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d002      	beq.n	8006d6e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 fd0a 	bl	8007782 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	695b      	ldr	r3, [r3, #20]
 8006d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d78:	2b40      	cmp	r3, #64	; 0x40
 8006d7a:	bf0c      	ite	eq
 8006d7c:	2301      	moveq	r3, #1
 8006d7e:	2300      	movne	r3, #0
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8a:	f003 0308 	and.w	r3, r3, #8
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d103      	bne.n	8006d9a <HAL_UART_IRQHandler+0x17a>
 8006d92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d04f      	beq.n	8006e3a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 fc12 	bl	80075c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006daa:	2b40      	cmp	r3, #64	; 0x40
 8006dac:	d141      	bne.n	8006e32 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	3314      	adds	r3, #20
 8006db4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006dbc:	e853 3f00 	ldrex	r3, [r3]
 8006dc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006dc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006dc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	3314      	adds	r3, #20
 8006dd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006dda:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006dde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006de6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006dea:	e841 2300 	strex	r3, r2, [r1]
 8006dee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006df2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1d9      	bne.n	8006dae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d013      	beq.n	8006e2a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e06:	4a7d      	ldr	r2, [pc, #500]	; (8006ffc <HAL_UART_IRQHandler+0x3dc>)
 8006e08:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7fd fac4 	bl	800439c <HAL_DMA_Abort_IT>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d016      	beq.n	8006e48 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006e24:	4610      	mov	r0, r2
 8006e26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e28:	e00e      	b.n	8006e48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 f99a 	bl	8007164 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e30:	e00a      	b.n	8006e48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f996 	bl	8007164 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e38:	e006      	b.n	8006e48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 f992 	bl	8007164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006e46:	e170      	b.n	800712a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e48:	bf00      	nop
    return;
 8006e4a:	e16e      	b.n	800712a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	f040 814a 	bne.w	80070ea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e5a:	f003 0310 	and.w	r3, r3, #16
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	f000 8143 	beq.w	80070ea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e68:	f003 0310 	and.w	r3, r3, #16
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	f000 813c 	beq.w	80070ea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e72:	2300      	movs	r3, #0
 8006e74:	60bb      	str	r3, [r7, #8]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	60bb      	str	r3, [r7, #8]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	60bb      	str	r3, [r7, #8]
 8006e86:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	695b      	ldr	r3, [r3, #20]
 8006e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e92:	2b40      	cmp	r3, #64	; 0x40
 8006e94:	f040 80b4 	bne.w	8007000 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ea4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f000 8140 	beq.w	800712e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006eb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	f080 8139 	bcs.w	800712e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ec2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec8:	69db      	ldr	r3, [r3, #28]
 8006eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ece:	f000 8088 	beq.w	8006fe2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	330c      	adds	r3, #12
 8006ed8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006edc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ee0:	e853 3f00 	ldrex	r3, [r3]
 8006ee4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ee8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006eec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ef0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	330c      	adds	r3, #12
 8006efa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006efe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f06:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006f0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f0e:	e841 2300 	strex	r3, r2, [r1]
 8006f12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006f16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1d9      	bne.n	8006ed2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	3314      	adds	r3, #20
 8006f24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f28:	e853 3f00 	ldrex	r3, [r3]
 8006f2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006f2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f30:	f023 0301 	bic.w	r3, r3, #1
 8006f34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	3314      	adds	r3, #20
 8006f3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006f42:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006f46:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006f4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f4e:	e841 2300 	strex	r3, r2, [r1]
 8006f52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006f54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1e1      	bne.n	8006f1e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	3314      	adds	r3, #20
 8006f60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f64:	e853 3f00 	ldrex	r3, [r3]
 8006f68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006f6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	3314      	adds	r3, #20
 8006f7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006f7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006f80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f86:	e841 2300 	strex	r3, r2, [r1]
 8006f8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1e3      	bne.n	8006f5a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2220      	movs	r2, #32
 8006f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	330c      	adds	r3, #12
 8006fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006faa:	e853 3f00 	ldrex	r3, [r3]
 8006fae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fb2:	f023 0310 	bic.w	r3, r3, #16
 8006fb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	330c      	adds	r3, #12
 8006fc0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006fc4:	65ba      	str	r2, [r7, #88]	; 0x58
 8006fc6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006fca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fcc:	e841 2300 	strex	r3, r2, [r1]
 8006fd0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d1e3      	bne.n	8006fa0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7fd f96d 	bl	80042bc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 f8c0 	bl	8007178 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ff8:	e099      	b.n	800712e <HAL_UART_IRQHandler+0x50e>
 8006ffa:	bf00      	nop
 8006ffc:	0800768b 	.word	0x0800768b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007008:	b29b      	uxth	r3, r3
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007014:	b29b      	uxth	r3, r3
 8007016:	2b00      	cmp	r3, #0
 8007018:	f000 808b 	beq.w	8007132 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800701c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007020:	2b00      	cmp	r3, #0
 8007022:	f000 8086 	beq.w	8007132 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	330c      	adds	r3, #12
 800702c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007030:	e853 3f00 	ldrex	r3, [r3]
 8007034:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007038:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800703c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	330c      	adds	r3, #12
 8007046:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800704a:	647a      	str	r2, [r7, #68]	; 0x44
 800704c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007050:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007052:	e841 2300 	strex	r3, r2, [r1]
 8007056:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800705a:	2b00      	cmp	r3, #0
 800705c:	d1e3      	bne.n	8007026 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	3314      	adds	r3, #20
 8007064:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007068:	e853 3f00 	ldrex	r3, [r3]
 800706c:	623b      	str	r3, [r7, #32]
   return(result);
 800706e:	6a3b      	ldr	r3, [r7, #32]
 8007070:	f023 0301 	bic.w	r3, r3, #1
 8007074:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	3314      	adds	r3, #20
 800707e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007082:	633a      	str	r2, [r7, #48]	; 0x30
 8007084:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007086:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800708a:	e841 2300 	strex	r3, r2, [r1]
 800708e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1e3      	bne.n	800705e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2220      	movs	r2, #32
 800709a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	330c      	adds	r3, #12
 80070aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	e853 3f00 	ldrex	r3, [r3]
 80070b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f023 0310 	bic.w	r3, r3, #16
 80070ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	330c      	adds	r3, #12
 80070c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80070c8:	61fa      	str	r2, [r7, #28]
 80070ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070cc:	69b9      	ldr	r1, [r7, #24]
 80070ce:	69fa      	ldr	r2, [r7, #28]
 80070d0:	e841 2300 	strex	r3, r2, [r1]
 80070d4:	617b      	str	r3, [r7, #20]
   return(result);
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1e3      	bne.n	80070a4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070e0:	4619      	mov	r1, r3
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 f848 	bl	8007178 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80070e8:	e023      	b.n	8007132 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80070ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d009      	beq.n	800710a <HAL_UART_IRQHandler+0x4ea>
 80070f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d003      	beq.n	800710a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fad5 	bl	80076b2 <UART_Transmit_IT>
    return;
 8007108:	e014      	b.n	8007134 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800710a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800710e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00e      	beq.n	8007134 <HAL_UART_IRQHandler+0x514>
 8007116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800711a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800711e:	2b00      	cmp	r3, #0
 8007120:	d008      	beq.n	8007134 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 fb15 	bl	8007752 <UART_EndTransmit_IT>
    return;
 8007128:	e004      	b.n	8007134 <HAL_UART_IRQHandler+0x514>
    return;
 800712a:	bf00      	nop
 800712c:	e002      	b.n	8007134 <HAL_UART_IRQHandler+0x514>
      return;
 800712e:	bf00      	nop
 8007130:	e000      	b.n	8007134 <HAL_UART_IRQHandler+0x514>
      return;
 8007132:	bf00      	nop
  }
}
 8007134:	37e8      	adds	r7, #232	; 0xe8
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop

0800713c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007144:	bf00      	nop
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007158:	bf00      	nop
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	460b      	mov	r3, r1
 8007182:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007184:	bf00      	nop
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b090      	sub	sp, #64	; 0x40
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d137      	bne.n	800721c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80071ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ae:	2200      	movs	r2, #0
 80071b0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80071b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	3314      	adds	r3, #20
 80071b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071bc:	e853 3f00 	ldrex	r3, [r3]
 80071c0:	623b      	str	r3, [r7, #32]
   return(result);
 80071c2:	6a3b      	ldr	r3, [r7, #32]
 80071c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80071ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	3314      	adds	r3, #20
 80071d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071d2:	633a      	str	r2, [r7, #48]	; 0x30
 80071d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071da:	e841 2300 	strex	r3, r2, [r1]
 80071de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1e5      	bne.n	80071b2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	330c      	adds	r3, #12
 80071ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	e853 3f00 	ldrex	r3, [r3]
 80071f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071fc:	637b      	str	r3, [r7, #52]	; 0x34
 80071fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	330c      	adds	r3, #12
 8007204:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007206:	61fa      	str	r2, [r7, #28]
 8007208:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720a:	69b9      	ldr	r1, [r7, #24]
 800720c:	69fa      	ldr	r2, [r7, #28]
 800720e:	e841 2300 	strex	r3, r2, [r1]
 8007212:	617b      	str	r3, [r7, #20]
   return(result);
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1e5      	bne.n	80071e6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800721a:	e002      	b.n	8007222 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800721c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800721e:	f7fa fa73 	bl	8001708 <HAL_UART_TxCpltCallback>
}
 8007222:	bf00      	nop
 8007224:	3740      	adds	r7, #64	; 0x40
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b084      	sub	sp, #16
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007236:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f7ff ff7f 	bl	800713c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800723e:	bf00      	nop
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b09c      	sub	sp, #112	; 0x70
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007252:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800725e:	2b00      	cmp	r3, #0
 8007260:	d172      	bne.n	8007348 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007264:	2200      	movs	r2, #0
 8007266:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	330c      	adds	r3, #12
 800726e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007272:	e853 3f00 	ldrex	r3, [r3]
 8007276:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800727a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800727e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	330c      	adds	r3, #12
 8007286:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007288:	65ba      	str	r2, [r7, #88]	; 0x58
 800728a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800728e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007290:	e841 2300 	strex	r3, r2, [r1]
 8007294:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1e5      	bne.n	8007268 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800729c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	3314      	adds	r3, #20
 80072a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a6:	e853 3f00 	ldrex	r3, [r3]
 80072aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ae:	f023 0301 	bic.w	r3, r3, #1
 80072b2:	667b      	str	r3, [r7, #100]	; 0x64
 80072b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	3314      	adds	r3, #20
 80072ba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80072bc:	647a      	str	r2, [r7, #68]	; 0x44
 80072be:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072c4:	e841 2300 	strex	r3, r2, [r1]
 80072c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1e5      	bne.n	800729c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	3314      	adds	r3, #20
 80072d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072da:	e853 3f00 	ldrex	r3, [r3]
 80072de:	623b      	str	r3, [r7, #32]
   return(result);
 80072e0:	6a3b      	ldr	r3, [r7, #32]
 80072e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072e6:	663b      	str	r3, [r7, #96]	; 0x60
 80072e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	3314      	adds	r3, #20
 80072ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80072f0:	633a      	str	r2, [r7, #48]	; 0x30
 80072f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072f8:	e841 2300 	strex	r3, r2, [r1]
 80072fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1e5      	bne.n	80072d0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007306:	2220      	movs	r2, #32
 8007308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800730c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800730e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007310:	2b01      	cmp	r3, #1
 8007312:	d119      	bne.n	8007348 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	330c      	adds	r3, #12
 800731a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	e853 3f00 	ldrex	r3, [r3]
 8007322:	60fb      	str	r3, [r7, #12]
   return(result);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f023 0310 	bic.w	r3, r3, #16
 800732a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800732c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	330c      	adds	r3, #12
 8007332:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007334:	61fa      	str	r2, [r7, #28]
 8007336:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007338:	69b9      	ldr	r1, [r7, #24]
 800733a:	69fa      	ldr	r2, [r7, #28]
 800733c:	e841 2300 	strex	r3, r2, [r1]
 8007340:	617b      	str	r3, [r7, #20]
   return(result);
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1e5      	bne.n	8007314 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800734a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800734c:	2b01      	cmp	r3, #1
 800734e:	d106      	bne.n	800735e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007352:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007354:	4619      	mov	r1, r3
 8007356:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007358:	f7ff ff0e 	bl	8007178 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800735c:	e002      	b.n	8007364 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800735e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007360:	f7fa f9e4 	bl	800172c <HAL_UART_RxCpltCallback>
}
 8007364:	bf00      	nop
 8007366:	3770      	adds	r7, #112	; 0x70
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007378:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800737e:	2b01      	cmp	r3, #1
 8007380:	d108      	bne.n	8007394 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007386:	085b      	lsrs	r3, r3, #1
 8007388:	b29b      	uxth	r3, r3
 800738a:	4619      	mov	r1, r3
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f7ff fef3 	bl	8007178 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007392:	e002      	b.n	800739a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f7ff fedb 	bl	8007150 <HAL_UART_RxHalfCpltCallback>
}
 800739a:	bf00      	nop
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b084      	sub	sp, #16
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80073aa:	2300      	movs	r3, #0
 80073ac:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073be:	2b80      	cmp	r3, #128	; 0x80
 80073c0:	bf0c      	ite	eq
 80073c2:	2301      	moveq	r3, #1
 80073c4:	2300      	movne	r3, #0
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2b21      	cmp	r3, #33	; 0x21
 80073d4:	d108      	bne.n	80073e8 <UART_DMAError+0x46>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d005      	beq.n	80073e8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	2200      	movs	r2, #0
 80073e0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80073e2:	68b8      	ldr	r0, [r7, #8]
 80073e4:	f000 f8c6 	bl	8007574 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	695b      	ldr	r3, [r3, #20]
 80073ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073f2:	2b40      	cmp	r3, #64	; 0x40
 80073f4:	bf0c      	ite	eq
 80073f6:	2301      	moveq	r3, #1
 80073f8:	2300      	movne	r3, #0
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007404:	b2db      	uxtb	r3, r3
 8007406:	2b22      	cmp	r3, #34	; 0x22
 8007408:	d108      	bne.n	800741c <UART_DMAError+0x7a>
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d005      	beq.n	800741c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	2200      	movs	r2, #0
 8007414:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007416:	68b8      	ldr	r0, [r7, #8]
 8007418:	f000 f8d4 	bl	80075c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007420:	f043 0210 	orr.w	r2, r3, #16
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007428:	68b8      	ldr	r0, [r7, #8]
 800742a:	f7ff fe9b 	bl	8007164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800742e:	bf00      	nop
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
	...

08007438 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b098      	sub	sp, #96	; 0x60
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	4613      	mov	r3, r2
 8007444:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	88fa      	ldrh	r2, [r7, #6]
 8007450:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2222      	movs	r2, #34	; 0x22
 800745c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007464:	4a40      	ldr	r2, [pc, #256]	; (8007568 <UART_Start_Receive_DMA+0x130>)
 8007466:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746c:	4a3f      	ldr	r2, [pc, #252]	; (800756c <UART_Start_Receive_DMA+0x134>)
 800746e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007474:	4a3e      	ldr	r2, [pc, #248]	; (8007570 <UART_Start_Receive_DMA+0x138>)
 8007476:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747c:	2200      	movs	r2, #0
 800747e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007480:	f107 0308 	add.w	r3, r7, #8
 8007484:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	3304      	adds	r3, #4
 8007490:	4619      	mov	r1, r3
 8007492:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	88fb      	ldrh	r3, [r7, #6]
 8007498:	f7fc feb8 	bl	800420c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800749c:	2300      	movs	r3, #0
 800749e:	613b      	str	r3, [r7, #16]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	613b      	str	r3, [r7, #16]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	613b      	str	r3, [r7, #16]
 80074b0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d019      	beq.n	80074f6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	330c      	adds	r3, #12
 80074c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074cc:	e853 3f00 	ldrex	r3, [r3]
 80074d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	330c      	adds	r3, #12
 80074e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80074e2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80074e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80074e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80074ea:	e841 2300 	strex	r3, r2, [r1]
 80074ee:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80074f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1e5      	bne.n	80074c2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	3314      	adds	r3, #20
 80074fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007500:	e853 3f00 	ldrex	r3, [r3]
 8007504:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007508:	f043 0301 	orr.w	r3, r3, #1
 800750c:	657b      	str	r3, [r7, #84]	; 0x54
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	3314      	adds	r3, #20
 8007514:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007516:	63ba      	str	r2, [r7, #56]	; 0x38
 8007518:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800751c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800751e:	e841 2300 	strex	r3, r2, [r1]
 8007522:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1e5      	bne.n	80074f6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	3314      	adds	r3, #20
 8007530:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	e853 3f00 	ldrex	r3, [r3]
 8007538:	617b      	str	r3, [r7, #20]
   return(result);
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007540:	653b      	str	r3, [r7, #80]	; 0x50
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	3314      	adds	r3, #20
 8007548:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800754a:	627a      	str	r2, [r7, #36]	; 0x24
 800754c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754e:	6a39      	ldr	r1, [r7, #32]
 8007550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007552:	e841 2300 	strex	r3, r2, [r1]
 8007556:	61fb      	str	r3, [r7, #28]
   return(result);
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1e5      	bne.n	800752a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800755e:	2300      	movs	r3, #0
}
 8007560:	4618      	mov	r0, r3
 8007562:	3760      	adds	r7, #96	; 0x60
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	08007247 	.word	0x08007247
 800756c:	0800736d 	.word	0x0800736d
 8007570:	080073a3 	.word	0x080073a3

08007574 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007574:	b480      	push	{r7}
 8007576:	b089      	sub	sp, #36	; 0x24
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	330c      	adds	r3, #12
 8007582:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	e853 3f00 	ldrex	r3, [r3]
 800758a:	60bb      	str	r3, [r7, #8]
   return(result);
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007592:	61fb      	str	r3, [r7, #28]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	330c      	adds	r3, #12
 800759a:	69fa      	ldr	r2, [r7, #28]
 800759c:	61ba      	str	r2, [r7, #24]
 800759e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a0:	6979      	ldr	r1, [r7, #20]
 80075a2:	69ba      	ldr	r2, [r7, #24]
 80075a4:	e841 2300 	strex	r3, r2, [r1]
 80075a8:	613b      	str	r3, [r7, #16]
   return(result);
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1e5      	bne.n	800757c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2220      	movs	r2, #32
 80075b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80075b8:	bf00      	nop
 80075ba:	3724      	adds	r7, #36	; 0x24
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b095      	sub	sp, #84	; 0x54
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	330c      	adds	r3, #12
 80075d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d6:	e853 3f00 	ldrex	r3, [r3]
 80075da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	330c      	adds	r3, #12
 80075ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075ec:	643a      	str	r2, [r7, #64]	; 0x40
 80075ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075f4:	e841 2300 	strex	r3, r2, [r1]
 80075f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1e5      	bne.n	80075cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	3314      	adds	r3, #20
 8007606:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007608:	6a3b      	ldr	r3, [r7, #32]
 800760a:	e853 3f00 	ldrex	r3, [r3]
 800760e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	f023 0301 	bic.w	r3, r3, #1
 8007616:	64bb      	str	r3, [r7, #72]	; 0x48
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	3314      	adds	r3, #20
 800761e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007620:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007622:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007624:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007628:	e841 2300 	strex	r3, r2, [r1]
 800762c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800762e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1e5      	bne.n	8007600 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007638:	2b01      	cmp	r3, #1
 800763a:	d119      	bne.n	8007670 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	330c      	adds	r3, #12
 8007642:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	e853 3f00 	ldrex	r3, [r3]
 800764a:	60bb      	str	r3, [r7, #8]
   return(result);
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	f023 0310 	bic.w	r3, r3, #16
 8007652:	647b      	str	r3, [r7, #68]	; 0x44
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	330c      	adds	r3, #12
 800765a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800765c:	61ba      	str	r2, [r7, #24]
 800765e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007660:	6979      	ldr	r1, [r7, #20]
 8007662:	69ba      	ldr	r2, [r7, #24]
 8007664:	e841 2300 	strex	r3, r2, [r1]
 8007668:	613b      	str	r3, [r7, #16]
   return(result);
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d1e5      	bne.n	800763c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2220      	movs	r2, #32
 8007674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800767e:	bf00      	nop
 8007680:	3754      	adds	r7, #84	; 0x54
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b084      	sub	sp, #16
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007696:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2200      	movs	r2, #0
 800769c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2200      	movs	r2, #0
 80076a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	f7ff fd5d 	bl	8007164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076aa:	bf00      	nop
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80076b2:	b480      	push	{r7}
 80076b4:	b085      	sub	sp, #20
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	2b21      	cmp	r3, #33	; 0x21
 80076c4:	d13e      	bne.n	8007744 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076ce:	d114      	bne.n	80076fa <UART_Transmit_IT+0x48>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d110      	bne.n	80076fa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6a1b      	ldr	r3, [r3, #32]
 80076dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	881b      	ldrh	r3, [r3, #0]
 80076e2:	461a      	mov	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a1b      	ldr	r3, [r3, #32]
 80076f2:	1c9a      	adds	r2, r3, #2
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	621a      	str	r2, [r3, #32]
 80076f8:	e008      	b.n	800770c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a1b      	ldr	r3, [r3, #32]
 80076fe:	1c59      	adds	r1, r3, #1
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	6211      	str	r1, [r2, #32]
 8007704:	781a      	ldrb	r2, [r3, #0]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007710:	b29b      	uxth	r3, r3
 8007712:	3b01      	subs	r3, #1
 8007714:	b29b      	uxth	r3, r3
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	4619      	mov	r1, r3
 800771a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800771c:	2b00      	cmp	r3, #0
 800771e:	d10f      	bne.n	8007740 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	68da      	ldr	r2, [r3, #12]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800772e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68da      	ldr	r2, [r3, #12]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800773e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007740:	2300      	movs	r3, #0
 8007742:	e000      	b.n	8007746 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007744:	2302      	movs	r3, #2
  }
}
 8007746:	4618      	mov	r0, r3
 8007748:	3714      	adds	r7, #20
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007752:	b580      	push	{r7, lr}
 8007754:	b082      	sub	sp, #8
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68da      	ldr	r2, [r3, #12]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007768:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2220      	movs	r2, #32
 800776e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f7f9 ffc8 	bl	8001708 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3708      	adds	r7, #8
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b08c      	sub	sp, #48	; 0x30
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007790:	b2db      	uxtb	r3, r3
 8007792:	2b22      	cmp	r3, #34	; 0x22
 8007794:	f040 80ab 	bne.w	80078ee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077a0:	d117      	bne.n	80077d2 <UART_Receive_IT+0x50>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d113      	bne.n	80077d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80077aa:	2300      	movs	r3, #0
 80077ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ca:	1c9a      	adds	r2, r3, #2
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	629a      	str	r2, [r3, #40]	; 0x28
 80077d0:	e026      	b.n	8007820 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80077d8:	2300      	movs	r3, #0
 80077da:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077e4:	d007      	beq.n	80077f6 <UART_Receive_IT+0x74>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d10a      	bne.n	8007804 <UART_Receive_IT+0x82>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d106      	bne.n	8007804 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	b2da      	uxtb	r2, r3
 80077fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007800:	701a      	strb	r2, [r3, #0]
 8007802:	e008      	b.n	8007816 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	b2db      	uxtb	r3, r3
 800780c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007810:	b2da      	uxtb	r2, r3
 8007812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007814:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800781a:	1c5a      	adds	r2, r3, #1
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007824:	b29b      	uxth	r3, r3
 8007826:	3b01      	subs	r3, #1
 8007828:	b29b      	uxth	r3, r3
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	4619      	mov	r1, r3
 800782e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007830:	2b00      	cmp	r3, #0
 8007832:	d15a      	bne.n	80078ea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	68da      	ldr	r2, [r3, #12]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f022 0220 	bic.w	r2, r2, #32
 8007842:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68da      	ldr	r2, [r3, #12]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007852:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	695a      	ldr	r2, [r3, #20]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f022 0201 	bic.w	r2, r2, #1
 8007862:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2220      	movs	r2, #32
 8007868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007870:	2b01      	cmp	r3, #1
 8007872:	d135      	bne.n	80078e0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	330c      	adds	r3, #12
 8007880:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	e853 3f00 	ldrex	r3, [r3]
 8007888:	613b      	str	r3, [r7, #16]
   return(result);
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	f023 0310 	bic.w	r3, r3, #16
 8007890:	627b      	str	r3, [r7, #36]	; 0x24
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	330c      	adds	r3, #12
 8007898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800789a:	623a      	str	r2, [r7, #32]
 800789c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789e:	69f9      	ldr	r1, [r7, #28]
 80078a0:	6a3a      	ldr	r2, [r7, #32]
 80078a2:	e841 2300 	strex	r3, r2, [r1]
 80078a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1e5      	bne.n	800787a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f003 0310 	and.w	r3, r3, #16
 80078b8:	2b10      	cmp	r3, #16
 80078ba:	d10a      	bne.n	80078d2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078bc:	2300      	movs	r3, #0
 80078be:	60fb      	str	r3, [r7, #12]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	60fb      	str	r3, [r7, #12]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	60fb      	str	r3, [r7, #12]
 80078d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80078d6:	4619      	mov	r1, r3
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f7ff fc4d 	bl	8007178 <HAL_UARTEx_RxEventCallback>
 80078de:	e002      	b.n	80078e6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f7f9 ff23 	bl	800172c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80078e6:	2300      	movs	r3, #0
 80078e8:	e002      	b.n	80078f0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80078ea:	2300      	movs	r3, #0
 80078ec:	e000      	b.n	80078f0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80078ee:	2302      	movs	r3, #2
  }
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3730      	adds	r7, #48	; 0x30
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078fc:	b0c0      	sub	sp, #256	; 0x100
 80078fe:	af00      	add	r7, sp, #0
 8007900:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007914:	68d9      	ldr	r1, [r3, #12]
 8007916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	ea40 0301 	orr.w	r3, r0, r1
 8007920:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007926:	689a      	ldr	r2, [r3, #8]
 8007928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	431a      	orrs	r2, r3
 8007930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	431a      	orrs	r2, r3
 8007938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800793c:	69db      	ldr	r3, [r3, #28]
 800793e:	4313      	orrs	r3, r2
 8007940:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007950:	f021 010c 	bic.w	r1, r1, #12
 8007954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800795e:	430b      	orrs	r3, r1
 8007960:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	695b      	ldr	r3, [r3, #20]
 800796a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800796e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007972:	6999      	ldr	r1, [r3, #24]
 8007974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	ea40 0301 	orr.w	r3, r0, r1
 800797e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	4b8f      	ldr	r3, [pc, #572]	; (8007bc4 <UART_SetConfig+0x2cc>)
 8007988:	429a      	cmp	r2, r3
 800798a:	d005      	beq.n	8007998 <UART_SetConfig+0xa0>
 800798c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	4b8d      	ldr	r3, [pc, #564]	; (8007bc8 <UART_SetConfig+0x2d0>)
 8007994:	429a      	cmp	r2, r3
 8007996:	d104      	bne.n	80079a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007998:	f7fd ffc8 	bl	800592c <HAL_RCC_GetPCLK2Freq>
 800799c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80079a0:	e003      	b.n	80079aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80079a2:	f7fd ffaf 	bl	8005904 <HAL_RCC_GetPCLK1Freq>
 80079a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079ae:	69db      	ldr	r3, [r3, #28]
 80079b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079b4:	f040 810c 	bne.w	8007bd0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80079b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079bc:	2200      	movs	r2, #0
 80079be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80079c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80079c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80079ca:	4622      	mov	r2, r4
 80079cc:	462b      	mov	r3, r5
 80079ce:	1891      	adds	r1, r2, r2
 80079d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80079d2:	415b      	adcs	r3, r3
 80079d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80079da:	4621      	mov	r1, r4
 80079dc:	eb12 0801 	adds.w	r8, r2, r1
 80079e0:	4629      	mov	r1, r5
 80079e2:	eb43 0901 	adc.w	r9, r3, r1
 80079e6:	f04f 0200 	mov.w	r2, #0
 80079ea:	f04f 0300 	mov.w	r3, #0
 80079ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80079f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80079f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80079fa:	4690      	mov	r8, r2
 80079fc:	4699      	mov	r9, r3
 80079fe:	4623      	mov	r3, r4
 8007a00:	eb18 0303 	adds.w	r3, r8, r3
 8007a04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007a08:	462b      	mov	r3, r5
 8007a0a:	eb49 0303 	adc.w	r3, r9, r3
 8007a0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a1e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007a22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007a26:	460b      	mov	r3, r1
 8007a28:	18db      	adds	r3, r3, r3
 8007a2a:	653b      	str	r3, [r7, #80]	; 0x50
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	eb42 0303 	adc.w	r3, r2, r3
 8007a32:	657b      	str	r3, [r7, #84]	; 0x54
 8007a34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007a38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007a3c:	f7f8 fbe0 	bl	8000200 <__aeabi_uldivmod>
 8007a40:	4602      	mov	r2, r0
 8007a42:	460b      	mov	r3, r1
 8007a44:	4b61      	ldr	r3, [pc, #388]	; (8007bcc <UART_SetConfig+0x2d4>)
 8007a46:	fba3 2302 	umull	r2, r3, r3, r2
 8007a4a:	095b      	lsrs	r3, r3, #5
 8007a4c:	011c      	lsls	r4, r3, #4
 8007a4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a52:	2200      	movs	r2, #0
 8007a54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a58:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007a5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007a60:	4642      	mov	r2, r8
 8007a62:	464b      	mov	r3, r9
 8007a64:	1891      	adds	r1, r2, r2
 8007a66:	64b9      	str	r1, [r7, #72]	; 0x48
 8007a68:	415b      	adcs	r3, r3
 8007a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007a70:	4641      	mov	r1, r8
 8007a72:	eb12 0a01 	adds.w	sl, r2, r1
 8007a76:	4649      	mov	r1, r9
 8007a78:	eb43 0b01 	adc.w	fp, r3, r1
 8007a7c:	f04f 0200 	mov.w	r2, #0
 8007a80:	f04f 0300 	mov.w	r3, #0
 8007a84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007a88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007a8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a90:	4692      	mov	sl, r2
 8007a92:	469b      	mov	fp, r3
 8007a94:	4643      	mov	r3, r8
 8007a96:	eb1a 0303 	adds.w	r3, sl, r3
 8007a9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a9e:	464b      	mov	r3, r9
 8007aa0:	eb4b 0303 	adc.w	r3, fp, r3
 8007aa4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ab4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007ab8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007abc:	460b      	mov	r3, r1
 8007abe:	18db      	adds	r3, r3, r3
 8007ac0:	643b      	str	r3, [r7, #64]	; 0x40
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	eb42 0303 	adc.w	r3, r2, r3
 8007ac8:	647b      	str	r3, [r7, #68]	; 0x44
 8007aca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007ace:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007ad2:	f7f8 fb95 	bl	8000200 <__aeabi_uldivmod>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	460b      	mov	r3, r1
 8007ada:	4611      	mov	r1, r2
 8007adc:	4b3b      	ldr	r3, [pc, #236]	; (8007bcc <UART_SetConfig+0x2d4>)
 8007ade:	fba3 2301 	umull	r2, r3, r3, r1
 8007ae2:	095b      	lsrs	r3, r3, #5
 8007ae4:	2264      	movs	r2, #100	; 0x64
 8007ae6:	fb02 f303 	mul.w	r3, r2, r3
 8007aea:	1acb      	subs	r3, r1, r3
 8007aec:	00db      	lsls	r3, r3, #3
 8007aee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007af2:	4b36      	ldr	r3, [pc, #216]	; (8007bcc <UART_SetConfig+0x2d4>)
 8007af4:	fba3 2302 	umull	r2, r3, r3, r2
 8007af8:	095b      	lsrs	r3, r3, #5
 8007afa:	005b      	lsls	r3, r3, #1
 8007afc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007b00:	441c      	add	r4, r3
 8007b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b06:	2200      	movs	r2, #0
 8007b08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b0c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007b10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007b14:	4642      	mov	r2, r8
 8007b16:	464b      	mov	r3, r9
 8007b18:	1891      	adds	r1, r2, r2
 8007b1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007b1c:	415b      	adcs	r3, r3
 8007b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007b24:	4641      	mov	r1, r8
 8007b26:	1851      	adds	r1, r2, r1
 8007b28:	6339      	str	r1, [r7, #48]	; 0x30
 8007b2a:	4649      	mov	r1, r9
 8007b2c:	414b      	adcs	r3, r1
 8007b2e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b30:	f04f 0200 	mov.w	r2, #0
 8007b34:	f04f 0300 	mov.w	r3, #0
 8007b38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007b3c:	4659      	mov	r1, fp
 8007b3e:	00cb      	lsls	r3, r1, #3
 8007b40:	4651      	mov	r1, sl
 8007b42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b46:	4651      	mov	r1, sl
 8007b48:	00ca      	lsls	r2, r1, #3
 8007b4a:	4610      	mov	r0, r2
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	4603      	mov	r3, r0
 8007b50:	4642      	mov	r2, r8
 8007b52:	189b      	adds	r3, r3, r2
 8007b54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b58:	464b      	mov	r3, r9
 8007b5a:	460a      	mov	r2, r1
 8007b5c:	eb42 0303 	adc.w	r3, r2, r3
 8007b60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007b70:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007b74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007b78:	460b      	mov	r3, r1
 8007b7a:	18db      	adds	r3, r3, r3
 8007b7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b7e:	4613      	mov	r3, r2
 8007b80:	eb42 0303 	adc.w	r3, r2, r3
 8007b84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007b8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007b8e:	f7f8 fb37 	bl	8000200 <__aeabi_uldivmod>
 8007b92:	4602      	mov	r2, r0
 8007b94:	460b      	mov	r3, r1
 8007b96:	4b0d      	ldr	r3, [pc, #52]	; (8007bcc <UART_SetConfig+0x2d4>)
 8007b98:	fba3 1302 	umull	r1, r3, r3, r2
 8007b9c:	095b      	lsrs	r3, r3, #5
 8007b9e:	2164      	movs	r1, #100	; 0x64
 8007ba0:	fb01 f303 	mul.w	r3, r1, r3
 8007ba4:	1ad3      	subs	r3, r2, r3
 8007ba6:	00db      	lsls	r3, r3, #3
 8007ba8:	3332      	adds	r3, #50	; 0x32
 8007baa:	4a08      	ldr	r2, [pc, #32]	; (8007bcc <UART_SetConfig+0x2d4>)
 8007bac:	fba2 2303 	umull	r2, r3, r2, r3
 8007bb0:	095b      	lsrs	r3, r3, #5
 8007bb2:	f003 0207 	and.w	r2, r3, #7
 8007bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4422      	add	r2, r4
 8007bbe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007bc0:	e105      	b.n	8007dce <UART_SetConfig+0x4d6>
 8007bc2:	bf00      	nop
 8007bc4:	40011000 	.word	0x40011000
 8007bc8:	40011400 	.word	0x40011400
 8007bcc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007bd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007bda:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007bde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007be2:	4642      	mov	r2, r8
 8007be4:	464b      	mov	r3, r9
 8007be6:	1891      	adds	r1, r2, r2
 8007be8:	6239      	str	r1, [r7, #32]
 8007bea:	415b      	adcs	r3, r3
 8007bec:	627b      	str	r3, [r7, #36]	; 0x24
 8007bee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007bf2:	4641      	mov	r1, r8
 8007bf4:	1854      	adds	r4, r2, r1
 8007bf6:	4649      	mov	r1, r9
 8007bf8:	eb43 0501 	adc.w	r5, r3, r1
 8007bfc:	f04f 0200 	mov.w	r2, #0
 8007c00:	f04f 0300 	mov.w	r3, #0
 8007c04:	00eb      	lsls	r3, r5, #3
 8007c06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c0a:	00e2      	lsls	r2, r4, #3
 8007c0c:	4614      	mov	r4, r2
 8007c0e:	461d      	mov	r5, r3
 8007c10:	4643      	mov	r3, r8
 8007c12:	18e3      	adds	r3, r4, r3
 8007c14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007c18:	464b      	mov	r3, r9
 8007c1a:	eb45 0303 	adc.w	r3, r5, r3
 8007c1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007c32:	f04f 0200 	mov.w	r2, #0
 8007c36:	f04f 0300 	mov.w	r3, #0
 8007c3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007c3e:	4629      	mov	r1, r5
 8007c40:	008b      	lsls	r3, r1, #2
 8007c42:	4621      	mov	r1, r4
 8007c44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c48:	4621      	mov	r1, r4
 8007c4a:	008a      	lsls	r2, r1, #2
 8007c4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007c50:	f7f8 fad6 	bl	8000200 <__aeabi_uldivmod>
 8007c54:	4602      	mov	r2, r0
 8007c56:	460b      	mov	r3, r1
 8007c58:	4b60      	ldr	r3, [pc, #384]	; (8007ddc <UART_SetConfig+0x4e4>)
 8007c5a:	fba3 2302 	umull	r2, r3, r3, r2
 8007c5e:	095b      	lsrs	r3, r3, #5
 8007c60:	011c      	lsls	r4, r3, #4
 8007c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c66:	2200      	movs	r2, #0
 8007c68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007c6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007c70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007c74:	4642      	mov	r2, r8
 8007c76:	464b      	mov	r3, r9
 8007c78:	1891      	adds	r1, r2, r2
 8007c7a:	61b9      	str	r1, [r7, #24]
 8007c7c:	415b      	adcs	r3, r3
 8007c7e:	61fb      	str	r3, [r7, #28]
 8007c80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c84:	4641      	mov	r1, r8
 8007c86:	1851      	adds	r1, r2, r1
 8007c88:	6139      	str	r1, [r7, #16]
 8007c8a:	4649      	mov	r1, r9
 8007c8c:	414b      	adcs	r3, r1
 8007c8e:	617b      	str	r3, [r7, #20]
 8007c90:	f04f 0200 	mov.w	r2, #0
 8007c94:	f04f 0300 	mov.w	r3, #0
 8007c98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c9c:	4659      	mov	r1, fp
 8007c9e:	00cb      	lsls	r3, r1, #3
 8007ca0:	4651      	mov	r1, sl
 8007ca2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ca6:	4651      	mov	r1, sl
 8007ca8:	00ca      	lsls	r2, r1, #3
 8007caa:	4610      	mov	r0, r2
 8007cac:	4619      	mov	r1, r3
 8007cae:	4603      	mov	r3, r0
 8007cb0:	4642      	mov	r2, r8
 8007cb2:	189b      	adds	r3, r3, r2
 8007cb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007cb8:	464b      	mov	r3, r9
 8007cba:	460a      	mov	r2, r1
 8007cbc:	eb42 0303 	adc.w	r3, r2, r3
 8007cc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	67bb      	str	r3, [r7, #120]	; 0x78
 8007cce:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007cd0:	f04f 0200 	mov.w	r2, #0
 8007cd4:	f04f 0300 	mov.w	r3, #0
 8007cd8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007cdc:	4649      	mov	r1, r9
 8007cde:	008b      	lsls	r3, r1, #2
 8007ce0:	4641      	mov	r1, r8
 8007ce2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ce6:	4641      	mov	r1, r8
 8007ce8:	008a      	lsls	r2, r1, #2
 8007cea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007cee:	f7f8 fa87 	bl	8000200 <__aeabi_uldivmod>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	4b39      	ldr	r3, [pc, #228]	; (8007ddc <UART_SetConfig+0x4e4>)
 8007cf8:	fba3 1302 	umull	r1, r3, r3, r2
 8007cfc:	095b      	lsrs	r3, r3, #5
 8007cfe:	2164      	movs	r1, #100	; 0x64
 8007d00:	fb01 f303 	mul.w	r3, r1, r3
 8007d04:	1ad3      	subs	r3, r2, r3
 8007d06:	011b      	lsls	r3, r3, #4
 8007d08:	3332      	adds	r3, #50	; 0x32
 8007d0a:	4a34      	ldr	r2, [pc, #208]	; (8007ddc <UART_SetConfig+0x4e4>)
 8007d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d10:	095b      	lsrs	r3, r3, #5
 8007d12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d16:	441c      	add	r4, r3
 8007d18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	673b      	str	r3, [r7, #112]	; 0x70
 8007d20:	677a      	str	r2, [r7, #116]	; 0x74
 8007d22:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007d26:	4642      	mov	r2, r8
 8007d28:	464b      	mov	r3, r9
 8007d2a:	1891      	adds	r1, r2, r2
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	415b      	adcs	r3, r3
 8007d30:	60fb      	str	r3, [r7, #12]
 8007d32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d36:	4641      	mov	r1, r8
 8007d38:	1851      	adds	r1, r2, r1
 8007d3a:	6039      	str	r1, [r7, #0]
 8007d3c:	4649      	mov	r1, r9
 8007d3e:	414b      	adcs	r3, r1
 8007d40:	607b      	str	r3, [r7, #4]
 8007d42:	f04f 0200 	mov.w	r2, #0
 8007d46:	f04f 0300 	mov.w	r3, #0
 8007d4a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007d4e:	4659      	mov	r1, fp
 8007d50:	00cb      	lsls	r3, r1, #3
 8007d52:	4651      	mov	r1, sl
 8007d54:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d58:	4651      	mov	r1, sl
 8007d5a:	00ca      	lsls	r2, r1, #3
 8007d5c:	4610      	mov	r0, r2
 8007d5e:	4619      	mov	r1, r3
 8007d60:	4603      	mov	r3, r0
 8007d62:	4642      	mov	r2, r8
 8007d64:	189b      	adds	r3, r3, r2
 8007d66:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d68:	464b      	mov	r3, r9
 8007d6a:	460a      	mov	r2, r1
 8007d6c:	eb42 0303 	adc.w	r3, r2, r3
 8007d70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	663b      	str	r3, [r7, #96]	; 0x60
 8007d7c:	667a      	str	r2, [r7, #100]	; 0x64
 8007d7e:	f04f 0200 	mov.w	r2, #0
 8007d82:	f04f 0300 	mov.w	r3, #0
 8007d86:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007d8a:	4649      	mov	r1, r9
 8007d8c:	008b      	lsls	r3, r1, #2
 8007d8e:	4641      	mov	r1, r8
 8007d90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d94:	4641      	mov	r1, r8
 8007d96:	008a      	lsls	r2, r1, #2
 8007d98:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007d9c:	f7f8 fa30 	bl	8000200 <__aeabi_uldivmod>
 8007da0:	4602      	mov	r2, r0
 8007da2:	460b      	mov	r3, r1
 8007da4:	4b0d      	ldr	r3, [pc, #52]	; (8007ddc <UART_SetConfig+0x4e4>)
 8007da6:	fba3 1302 	umull	r1, r3, r3, r2
 8007daa:	095b      	lsrs	r3, r3, #5
 8007dac:	2164      	movs	r1, #100	; 0x64
 8007dae:	fb01 f303 	mul.w	r3, r1, r3
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	011b      	lsls	r3, r3, #4
 8007db6:	3332      	adds	r3, #50	; 0x32
 8007db8:	4a08      	ldr	r2, [pc, #32]	; (8007ddc <UART_SetConfig+0x4e4>)
 8007dba:	fba2 2303 	umull	r2, r3, r2, r3
 8007dbe:	095b      	lsrs	r3, r3, #5
 8007dc0:	f003 020f 	and.w	r2, r3, #15
 8007dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4422      	add	r2, r4
 8007dcc:	609a      	str	r2, [r3, #8]
}
 8007dce:	bf00      	nop
 8007dd0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007dda:	bf00      	nop
 8007ddc:	51eb851f 	.word	0x51eb851f

08007de0 <__NVIC_SetPriority>:
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	4603      	mov	r3, r0
 8007de8:	6039      	str	r1, [r7, #0]
 8007dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	db0a      	blt.n	8007e0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	b2da      	uxtb	r2, r3
 8007df8:	490c      	ldr	r1, [pc, #48]	; (8007e2c <__NVIC_SetPriority+0x4c>)
 8007dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dfe:	0112      	lsls	r2, r2, #4
 8007e00:	b2d2      	uxtb	r2, r2
 8007e02:	440b      	add	r3, r1
 8007e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007e08:	e00a      	b.n	8007e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	b2da      	uxtb	r2, r3
 8007e0e:	4908      	ldr	r1, [pc, #32]	; (8007e30 <__NVIC_SetPriority+0x50>)
 8007e10:	79fb      	ldrb	r3, [r7, #7]
 8007e12:	f003 030f 	and.w	r3, r3, #15
 8007e16:	3b04      	subs	r3, #4
 8007e18:	0112      	lsls	r2, r2, #4
 8007e1a:	b2d2      	uxtb	r2, r2
 8007e1c:	440b      	add	r3, r1
 8007e1e:	761a      	strb	r2, [r3, #24]
}
 8007e20:	bf00      	nop
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr
 8007e2c:	e000e100 	.word	0xe000e100
 8007e30:	e000ed00 	.word	0xe000ed00

08007e34 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007e34:	b580      	push	{r7, lr}
 8007e36:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007e38:	4b05      	ldr	r3, [pc, #20]	; (8007e50 <SysTick_Handler+0x1c>)
 8007e3a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007e3c:	f001 fcfe 	bl	800983c <xTaskGetSchedulerState>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d001      	beq.n	8007e4a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007e46:	f002 fae7 	bl	800a418 <xPortSysTickHandler>
  }
}
 8007e4a:	bf00      	nop
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	e000e010 	.word	0xe000e010

08007e54 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007e54:	b580      	push	{r7, lr}
 8007e56:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007e58:	2100      	movs	r1, #0
 8007e5a:	f06f 0004 	mvn.w	r0, #4
 8007e5e:	f7ff ffbf 	bl	8007de0 <__NVIC_SetPriority>
#endif
}
 8007e62:	bf00      	nop
 8007e64:	bd80      	pop	{r7, pc}
	...

08007e68 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e6e:	f3ef 8305 	mrs	r3, IPSR
 8007e72:	603b      	str	r3, [r7, #0]
  return(result);
 8007e74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d003      	beq.n	8007e82 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007e7a:	f06f 0305 	mvn.w	r3, #5
 8007e7e:	607b      	str	r3, [r7, #4]
 8007e80:	e00c      	b.n	8007e9c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007e82:	4b0a      	ldr	r3, [pc, #40]	; (8007eac <osKernelInitialize+0x44>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d105      	bne.n	8007e96 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007e8a:	4b08      	ldr	r3, [pc, #32]	; (8007eac <osKernelInitialize+0x44>)
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007e90:	2300      	movs	r3, #0
 8007e92:	607b      	str	r3, [r7, #4]
 8007e94:	e002      	b.n	8007e9c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007e96:	f04f 33ff 	mov.w	r3, #4294967295
 8007e9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007e9c:	687b      	ldr	r3, [r7, #4]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	370c      	adds	r7, #12
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop
 8007eac:	20000e60 	.word	0x20000e60

08007eb0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007eb6:	f3ef 8305 	mrs	r3, IPSR
 8007eba:	603b      	str	r3, [r7, #0]
  return(result);
 8007ebc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d003      	beq.n	8007eca <osKernelStart+0x1a>
    stat = osErrorISR;
 8007ec2:	f06f 0305 	mvn.w	r3, #5
 8007ec6:	607b      	str	r3, [r7, #4]
 8007ec8:	e010      	b.n	8007eec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007eca:	4b0b      	ldr	r3, [pc, #44]	; (8007ef8 <osKernelStart+0x48>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d109      	bne.n	8007ee6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007ed2:	f7ff ffbf 	bl	8007e54 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007ed6:	4b08      	ldr	r3, [pc, #32]	; (8007ef8 <osKernelStart+0x48>)
 8007ed8:	2202      	movs	r2, #2
 8007eda:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007edc:	f001 f866 	bl	8008fac <vTaskStartScheduler>
      stat = osOK;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	607b      	str	r3, [r7, #4]
 8007ee4:	e002      	b.n	8007eec <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8007eea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007eec:	687b      	ldr	r3, [r7, #4]
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3708      	adds	r7, #8
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	20000e60 	.word	0x20000e60

08007efc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b08e      	sub	sp, #56	; 0x38
 8007f00:	af04      	add	r7, sp, #16
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f0c:	f3ef 8305 	mrs	r3, IPSR
 8007f10:	617b      	str	r3, [r7, #20]
  return(result);
 8007f12:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d17e      	bne.n	8008016 <osThreadNew+0x11a>
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d07b      	beq.n	8008016 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007f1e:	2380      	movs	r3, #128	; 0x80
 8007f20:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007f22:	2318      	movs	r3, #24
 8007f24:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007f26:	2300      	movs	r3, #0
 8007f28:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f2e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d045      	beq.n	8007fc2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d002      	beq.n	8007f44 <osThreadNew+0x48>
        name = attr->name;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	699b      	ldr	r3, [r3, #24]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d002      	beq.n	8007f52 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	699b      	ldr	r3, [r3, #24]
 8007f50:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d008      	beq.n	8007f6a <osThreadNew+0x6e>
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	2b38      	cmp	r3, #56	; 0x38
 8007f5c:	d805      	bhi.n	8007f6a <osThreadNew+0x6e>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	f003 0301 	and.w	r3, r3, #1
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d001      	beq.n	8007f6e <osThreadNew+0x72>
        return (NULL);
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	e054      	b.n	8008018 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	695b      	ldr	r3, [r3, #20]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d003      	beq.n	8007f7e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	695b      	ldr	r3, [r3, #20]
 8007f7a:	089b      	lsrs	r3, r3, #2
 8007f7c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00e      	beq.n	8007fa4 <osThreadNew+0xa8>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	2b5b      	cmp	r3, #91	; 0x5b
 8007f8c:	d90a      	bls.n	8007fa4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d006      	beq.n	8007fa4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	695b      	ldr	r3, [r3, #20]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d002      	beq.n	8007fa4 <osThreadNew+0xa8>
        mem = 1;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	61bb      	str	r3, [r7, #24]
 8007fa2:	e010      	b.n	8007fc6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d10c      	bne.n	8007fc6 <osThreadNew+0xca>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d108      	bne.n	8007fc6 <osThreadNew+0xca>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d104      	bne.n	8007fc6 <osThreadNew+0xca>
          mem = 0;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	61bb      	str	r3, [r7, #24]
 8007fc0:	e001      	b.n	8007fc6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d110      	bne.n	8007fee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007fd4:	9202      	str	r2, [sp, #8]
 8007fd6:	9301      	str	r3, [sp, #4]
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	9300      	str	r3, [sp, #0]
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	6a3a      	ldr	r2, [r7, #32]
 8007fe0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	f000 fe0c 	bl	8008c00 <xTaskCreateStatic>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	613b      	str	r3, [r7, #16]
 8007fec:	e013      	b.n	8008016 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d110      	bne.n	8008016 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007ff4:	6a3b      	ldr	r3, [r7, #32]
 8007ff6:	b29a      	uxth	r2, r3
 8007ff8:	f107 0310 	add.w	r3, r7, #16
 8007ffc:	9301      	str	r3, [sp, #4]
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	9300      	str	r3, [sp, #0]
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008006:	68f8      	ldr	r0, [r7, #12]
 8008008:	f000 fe57 	bl	8008cba <xTaskCreate>
 800800c:	4603      	mov	r3, r0
 800800e:	2b01      	cmp	r3, #1
 8008010:	d001      	beq.n	8008016 <osThreadNew+0x11a>
            hTask = NULL;
 8008012:	2300      	movs	r3, #0
 8008014:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008016:	693b      	ldr	r3, [r7, #16]
}
 8008018:	4618      	mov	r0, r3
 800801a:	3728      	adds	r7, #40	; 0x28
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008028:	f3ef 8305 	mrs	r3, IPSR
 800802c:	60bb      	str	r3, [r7, #8]
  return(result);
 800802e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008030:	2b00      	cmp	r3, #0
 8008032:	d003      	beq.n	800803c <osDelay+0x1c>
    stat = osErrorISR;
 8008034:	f06f 0305 	mvn.w	r3, #5
 8008038:	60fb      	str	r3, [r7, #12]
 800803a:	e007      	b.n	800804c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800803c:	2300      	movs	r3, #0
 800803e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d002      	beq.n	800804c <osDelay+0x2c>
      vTaskDelay(ticks);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 ff7c 	bl	8008f44 <vTaskDelay>
    }
  }

  return (stat);
 800804c:	68fb      	ldr	r3, [r7, #12]
}
 800804e:	4618      	mov	r0, r3
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
	...

08008058 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008058:	b480      	push	{r7}
 800805a:	b085      	sub	sp, #20
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	4a07      	ldr	r2, [pc, #28]	; (8008084 <vApplicationGetIdleTaskMemory+0x2c>)
 8008068:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	4a06      	ldr	r2, [pc, #24]	; (8008088 <vApplicationGetIdleTaskMemory+0x30>)
 800806e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2280      	movs	r2, #128	; 0x80
 8008074:	601a      	str	r2, [r3, #0]
}
 8008076:	bf00      	nop
 8008078:	3714      	adds	r7, #20
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	20000e64 	.word	0x20000e64
 8008088:	20000ec0 	.word	0x20000ec0

0800808c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	4a07      	ldr	r2, [pc, #28]	; (80080b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800809c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	4a06      	ldr	r2, [pc, #24]	; (80080bc <vApplicationGetTimerTaskMemory+0x30>)
 80080a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80080aa:	601a      	str	r2, [r3, #0]
}
 80080ac:	bf00      	nop
 80080ae:	3714      	adds	r7, #20
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr
 80080b8:	200010c0 	.word	0x200010c0
 80080bc:	2000111c 	.word	0x2000111c

080080c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f103 0208 	add.w	r2, r3, #8
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f04f 32ff 	mov.w	r2, #4294967295
 80080d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f103 0208 	add.w	r2, r3, #8
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f103 0208 	add.w	r2, r3, #8
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80080f4:	bf00      	nop
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800810e:	bf00      	nop
 8008110:	370c      	adds	r7, #12
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr

0800811a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800811a:	b480      	push	{r7}
 800811c:	b085      	sub	sp, #20
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
 8008122:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	689a      	ldr	r2, [r3, #8]
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	683a      	ldr	r2, [r7, #0]
 800813e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	683a      	ldr	r2, [r7, #0]
 8008144:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	1c5a      	adds	r2, r3, #1
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	601a      	str	r2, [r3, #0]
}
 8008156:	bf00      	nop
 8008158:	3714      	adds	r7, #20
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr

08008162 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008162:	b480      	push	{r7}
 8008164:	b085      	sub	sp, #20
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
 800816a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008178:	d103      	bne.n	8008182 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	60fb      	str	r3, [r7, #12]
 8008180:	e00c      	b.n	800819c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	3308      	adds	r3, #8
 8008186:	60fb      	str	r3, [r7, #12]
 8008188:	e002      	b.n	8008190 <vListInsert+0x2e>
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	60fb      	str	r3, [r7, #12]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68ba      	ldr	r2, [r7, #8]
 8008198:	429a      	cmp	r2, r3
 800819a:	d2f6      	bcs.n	800818a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	685a      	ldr	r2, [r3, #4]
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	683a      	ldr	r2, [r7, #0]
 80081aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	683a      	ldr	r2, [r7, #0]
 80081b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	1c5a      	adds	r2, r3, #1
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	601a      	str	r2, [r3, #0]
}
 80081c8:	bf00      	nop
 80081ca:	3714      	adds	r7, #20
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	691b      	ldr	r3, [r3, #16]
 80081e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	6892      	ldr	r2, [r2, #8]
 80081ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	6852      	ldr	r2, [r2, #4]
 80081f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d103      	bne.n	8008208 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	689a      	ldr	r2, [r3, #8]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	1e5a      	subs	r2, r3, #1
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
}
 800821c:	4618      	mov	r0, r3
 800821e:	3714      	adds	r7, #20
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d10a      	bne.n	8008252 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800823c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008240:	f383 8811 	msr	BASEPRI, r3
 8008244:	f3bf 8f6f 	isb	sy
 8008248:	f3bf 8f4f 	dsb	sy
 800824c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800824e:	bf00      	nop
 8008250:	e7fe      	b.n	8008250 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008252:	f002 f84f 	bl	800a2f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800825e:	68f9      	ldr	r1, [r7, #12]
 8008260:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008262:	fb01 f303 	mul.w	r3, r1, r3
 8008266:	441a      	add	r2, r3
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2200      	movs	r2, #0
 8008270:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008282:	3b01      	subs	r3, #1
 8008284:	68f9      	ldr	r1, [r7, #12]
 8008286:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008288:	fb01 f303 	mul.w	r3, r1, r3
 800828c:	441a      	add	r2, r3
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	22ff      	movs	r2, #255	; 0xff
 8008296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	22ff      	movs	r2, #255	; 0xff
 800829e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d114      	bne.n	80082d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	691b      	ldr	r3, [r3, #16]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d01a      	beq.n	80082e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	3310      	adds	r3, #16
 80082b4:	4618      	mov	r0, r3
 80082b6:	f001 f903 	bl	80094c0 <xTaskRemoveFromEventList>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d012      	beq.n	80082e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80082c0:	4b0c      	ldr	r3, [pc, #48]	; (80082f4 <xQueueGenericReset+0xcc>)
 80082c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082c6:	601a      	str	r2, [r3, #0]
 80082c8:	f3bf 8f4f 	dsb	sy
 80082cc:	f3bf 8f6f 	isb	sy
 80082d0:	e009      	b.n	80082e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	3310      	adds	r3, #16
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7ff fef2 	bl	80080c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	3324      	adds	r3, #36	; 0x24
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7ff feed 	bl	80080c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80082e6:	f002 f835 	bl	800a354 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80082ea:	2301      	movs	r3, #1
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3710      	adds	r7, #16
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	e000ed04 	.word	0xe000ed04

080082f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b08e      	sub	sp, #56	; 0x38
 80082fc:	af02      	add	r7, sp, #8
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	607a      	str	r2, [r7, #4]
 8008304:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10a      	bne.n	8008322 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800830c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008310:	f383 8811 	msr	BASEPRI, r3
 8008314:	f3bf 8f6f 	isb	sy
 8008318:	f3bf 8f4f 	dsb	sy
 800831c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800831e:	bf00      	nop
 8008320:	e7fe      	b.n	8008320 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d10a      	bne.n	800833e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832c:	f383 8811 	msr	BASEPRI, r3
 8008330:	f3bf 8f6f 	isb	sy
 8008334:	f3bf 8f4f 	dsb	sy
 8008338:	627b      	str	r3, [r7, #36]	; 0x24
}
 800833a:	bf00      	nop
 800833c:	e7fe      	b.n	800833c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d002      	beq.n	800834a <xQueueGenericCreateStatic+0x52>
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d001      	beq.n	800834e <xQueueGenericCreateStatic+0x56>
 800834a:	2301      	movs	r3, #1
 800834c:	e000      	b.n	8008350 <xQueueGenericCreateStatic+0x58>
 800834e:	2300      	movs	r3, #0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d10a      	bne.n	800836a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008358:	f383 8811 	msr	BASEPRI, r3
 800835c:	f3bf 8f6f 	isb	sy
 8008360:	f3bf 8f4f 	dsb	sy
 8008364:	623b      	str	r3, [r7, #32]
}
 8008366:	bf00      	nop
 8008368:	e7fe      	b.n	8008368 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d102      	bne.n	8008376 <xQueueGenericCreateStatic+0x7e>
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d101      	bne.n	800837a <xQueueGenericCreateStatic+0x82>
 8008376:	2301      	movs	r3, #1
 8008378:	e000      	b.n	800837c <xQueueGenericCreateStatic+0x84>
 800837a:	2300      	movs	r3, #0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d10a      	bne.n	8008396 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008384:	f383 8811 	msr	BASEPRI, r3
 8008388:	f3bf 8f6f 	isb	sy
 800838c:	f3bf 8f4f 	dsb	sy
 8008390:	61fb      	str	r3, [r7, #28]
}
 8008392:	bf00      	nop
 8008394:	e7fe      	b.n	8008394 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008396:	2350      	movs	r3, #80	; 0x50
 8008398:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	2b50      	cmp	r3, #80	; 0x50
 800839e:	d00a      	beq.n	80083b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80083a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a4:	f383 8811 	msr	BASEPRI, r3
 80083a8:	f3bf 8f6f 	isb	sy
 80083ac:	f3bf 8f4f 	dsb	sy
 80083b0:	61bb      	str	r3, [r7, #24]
}
 80083b2:	bf00      	nop
 80083b4:	e7fe      	b.n	80083b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80083b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80083bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d00d      	beq.n	80083de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80083c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c4:	2201      	movs	r2, #1
 80083c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80083ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80083ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d0:	9300      	str	r3, [sp, #0]
 80083d2:	4613      	mov	r3, r2
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	68b9      	ldr	r1, [r7, #8]
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	f000 f805 	bl	80083e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80083de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3730      	adds	r7, #48	; 0x30
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	607a      	str	r2, [r7, #4]
 80083f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d103      	bne.n	8008404 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80083fc:	69bb      	ldr	r3, [r7, #24]
 80083fe:	69ba      	ldr	r2, [r7, #24]
 8008400:	601a      	str	r2, [r3, #0]
 8008402:	e002      	b.n	800840a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008404:	69bb      	ldr	r3, [r7, #24]
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	68fa      	ldr	r2, [r7, #12]
 800840e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	68ba      	ldr	r2, [r7, #8]
 8008414:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008416:	2101      	movs	r1, #1
 8008418:	69b8      	ldr	r0, [r7, #24]
 800841a:	f7ff ff05 	bl	8008228 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	78fa      	ldrb	r2, [r7, #3]
 8008422:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008426:	bf00      	nop
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
	...

08008430 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b08e      	sub	sp, #56	; 0x38
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	607a      	str	r2, [r7, #4]
 800843c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800843e:	2300      	movs	r3, #0
 8008440:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008448:	2b00      	cmp	r3, #0
 800844a:	d10a      	bne.n	8008462 <xQueueGenericSend+0x32>
	__asm volatile
 800844c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008450:	f383 8811 	msr	BASEPRI, r3
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	f3bf 8f4f 	dsb	sy
 800845c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800845e:	bf00      	nop
 8008460:	e7fe      	b.n	8008460 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d103      	bne.n	8008470 <xQueueGenericSend+0x40>
 8008468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800846c:	2b00      	cmp	r3, #0
 800846e:	d101      	bne.n	8008474 <xQueueGenericSend+0x44>
 8008470:	2301      	movs	r3, #1
 8008472:	e000      	b.n	8008476 <xQueueGenericSend+0x46>
 8008474:	2300      	movs	r3, #0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d10a      	bne.n	8008490 <xQueueGenericSend+0x60>
	__asm volatile
 800847a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847e:	f383 8811 	msr	BASEPRI, r3
 8008482:	f3bf 8f6f 	isb	sy
 8008486:	f3bf 8f4f 	dsb	sy
 800848a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800848c:	bf00      	nop
 800848e:	e7fe      	b.n	800848e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	2b02      	cmp	r3, #2
 8008494:	d103      	bne.n	800849e <xQueueGenericSend+0x6e>
 8008496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800849a:	2b01      	cmp	r3, #1
 800849c:	d101      	bne.n	80084a2 <xQueueGenericSend+0x72>
 800849e:	2301      	movs	r3, #1
 80084a0:	e000      	b.n	80084a4 <xQueueGenericSend+0x74>
 80084a2:	2300      	movs	r3, #0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d10a      	bne.n	80084be <xQueueGenericSend+0x8e>
	__asm volatile
 80084a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ac:	f383 8811 	msr	BASEPRI, r3
 80084b0:	f3bf 8f6f 	isb	sy
 80084b4:	f3bf 8f4f 	dsb	sy
 80084b8:	623b      	str	r3, [r7, #32]
}
 80084ba:	bf00      	nop
 80084bc:	e7fe      	b.n	80084bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80084be:	f001 f9bd 	bl	800983c <xTaskGetSchedulerState>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d102      	bne.n	80084ce <xQueueGenericSend+0x9e>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d101      	bne.n	80084d2 <xQueueGenericSend+0xa2>
 80084ce:	2301      	movs	r3, #1
 80084d0:	e000      	b.n	80084d4 <xQueueGenericSend+0xa4>
 80084d2:	2300      	movs	r3, #0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d10a      	bne.n	80084ee <xQueueGenericSend+0xbe>
	__asm volatile
 80084d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084dc:	f383 8811 	msr	BASEPRI, r3
 80084e0:	f3bf 8f6f 	isb	sy
 80084e4:	f3bf 8f4f 	dsb	sy
 80084e8:	61fb      	str	r3, [r7, #28]
}
 80084ea:	bf00      	nop
 80084ec:	e7fe      	b.n	80084ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80084ee:	f001 ff01 	bl	800a2f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80084f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d302      	bcc.n	8008504 <xQueueGenericSend+0xd4>
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	2b02      	cmp	r3, #2
 8008502:	d129      	bne.n	8008558 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008504:	683a      	ldr	r2, [r7, #0]
 8008506:	68b9      	ldr	r1, [r7, #8]
 8008508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800850a:	f000 fa0b 	bl	8008924 <prvCopyDataToQueue>
 800850e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008514:	2b00      	cmp	r3, #0
 8008516:	d010      	beq.n	800853a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851a:	3324      	adds	r3, #36	; 0x24
 800851c:	4618      	mov	r0, r3
 800851e:	f000 ffcf 	bl	80094c0 <xTaskRemoveFromEventList>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d013      	beq.n	8008550 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008528:	4b3f      	ldr	r3, [pc, #252]	; (8008628 <xQueueGenericSend+0x1f8>)
 800852a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800852e:	601a      	str	r2, [r3, #0]
 8008530:	f3bf 8f4f 	dsb	sy
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	e00a      	b.n	8008550 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800853a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800853c:	2b00      	cmp	r3, #0
 800853e:	d007      	beq.n	8008550 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008540:	4b39      	ldr	r3, [pc, #228]	; (8008628 <xQueueGenericSend+0x1f8>)
 8008542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008546:	601a      	str	r2, [r3, #0]
 8008548:	f3bf 8f4f 	dsb	sy
 800854c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008550:	f001 ff00 	bl	800a354 <vPortExitCritical>
				return pdPASS;
 8008554:	2301      	movs	r3, #1
 8008556:	e063      	b.n	8008620 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d103      	bne.n	8008566 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800855e:	f001 fef9 	bl	800a354 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008562:	2300      	movs	r3, #0
 8008564:	e05c      	b.n	8008620 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008568:	2b00      	cmp	r3, #0
 800856a:	d106      	bne.n	800857a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800856c:	f107 0314 	add.w	r3, r7, #20
 8008570:	4618      	mov	r0, r3
 8008572:	f001 f809 	bl	8009588 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008576:	2301      	movs	r3, #1
 8008578:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800857a:	f001 feeb 	bl	800a354 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800857e:	f000 fd7b 	bl	8009078 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008582:	f001 feb7 	bl	800a2f4 <vPortEnterCritical>
 8008586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008588:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800858c:	b25b      	sxtb	r3, r3
 800858e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008592:	d103      	bne.n	800859c <xQueueGenericSend+0x16c>
 8008594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008596:	2200      	movs	r2, #0
 8008598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800859c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800859e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085a2:	b25b      	sxtb	r3, r3
 80085a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a8:	d103      	bne.n	80085b2 <xQueueGenericSend+0x182>
 80085aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085b2:	f001 fecf 	bl	800a354 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80085b6:	1d3a      	adds	r2, r7, #4
 80085b8:	f107 0314 	add.w	r3, r7, #20
 80085bc:	4611      	mov	r1, r2
 80085be:	4618      	mov	r0, r3
 80085c0:	f000 fff8 	bl	80095b4 <xTaskCheckForTimeOut>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d124      	bne.n	8008614 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80085ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085cc:	f000 faa2 	bl	8008b14 <prvIsQueueFull>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d018      	beq.n	8008608 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80085d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d8:	3310      	adds	r3, #16
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	4611      	mov	r1, r2
 80085de:	4618      	mov	r0, r3
 80085e0:	f000 ff1e 	bl	8009420 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80085e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085e6:	f000 fa2d 	bl	8008a44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80085ea:	f000 fd53 	bl	8009094 <xTaskResumeAll>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f47f af7c 	bne.w	80084ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80085f6:	4b0c      	ldr	r3, [pc, #48]	; (8008628 <xQueueGenericSend+0x1f8>)
 80085f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085fc:	601a      	str	r2, [r3, #0]
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	f3bf 8f6f 	isb	sy
 8008606:	e772      	b.n	80084ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008608:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800860a:	f000 fa1b 	bl	8008a44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800860e:	f000 fd41 	bl	8009094 <xTaskResumeAll>
 8008612:	e76c      	b.n	80084ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008614:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008616:	f000 fa15 	bl	8008a44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800861a:	f000 fd3b 	bl	8009094 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800861e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008620:	4618      	mov	r0, r3
 8008622:	3738      	adds	r7, #56	; 0x38
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}
 8008628:	e000ed04 	.word	0xe000ed04

0800862c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b090      	sub	sp, #64	; 0x40
 8008630:	af00      	add	r7, sp, #0
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	607a      	str	r2, [r7, #4]
 8008638:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800863e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008640:	2b00      	cmp	r3, #0
 8008642:	d10a      	bne.n	800865a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008648:	f383 8811 	msr	BASEPRI, r3
 800864c:	f3bf 8f6f 	isb	sy
 8008650:	f3bf 8f4f 	dsb	sy
 8008654:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008656:	bf00      	nop
 8008658:	e7fe      	b.n	8008658 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d103      	bne.n	8008668 <xQueueGenericSendFromISR+0x3c>
 8008660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008664:	2b00      	cmp	r3, #0
 8008666:	d101      	bne.n	800866c <xQueueGenericSendFromISR+0x40>
 8008668:	2301      	movs	r3, #1
 800866a:	e000      	b.n	800866e <xQueueGenericSendFromISR+0x42>
 800866c:	2300      	movs	r3, #0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d10a      	bne.n	8008688 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008676:	f383 8811 	msr	BASEPRI, r3
 800867a:	f3bf 8f6f 	isb	sy
 800867e:	f3bf 8f4f 	dsb	sy
 8008682:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008684:	bf00      	nop
 8008686:	e7fe      	b.n	8008686 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	2b02      	cmp	r3, #2
 800868c:	d103      	bne.n	8008696 <xQueueGenericSendFromISR+0x6a>
 800868e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008692:	2b01      	cmp	r3, #1
 8008694:	d101      	bne.n	800869a <xQueueGenericSendFromISR+0x6e>
 8008696:	2301      	movs	r3, #1
 8008698:	e000      	b.n	800869c <xQueueGenericSendFromISR+0x70>
 800869a:	2300      	movs	r3, #0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d10a      	bne.n	80086b6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80086a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a4:	f383 8811 	msr	BASEPRI, r3
 80086a8:	f3bf 8f6f 	isb	sy
 80086ac:	f3bf 8f4f 	dsb	sy
 80086b0:	623b      	str	r3, [r7, #32]
}
 80086b2:	bf00      	nop
 80086b4:	e7fe      	b.n	80086b4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80086b6:	f001 feff 	bl	800a4b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80086ba:	f3ef 8211 	mrs	r2, BASEPRI
 80086be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c2:	f383 8811 	msr	BASEPRI, r3
 80086c6:	f3bf 8f6f 	isb	sy
 80086ca:	f3bf 8f4f 	dsb	sy
 80086ce:	61fa      	str	r2, [r7, #28]
 80086d0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80086d2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80086d4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80086d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086de:	429a      	cmp	r2, r3
 80086e0:	d302      	bcc.n	80086e8 <xQueueGenericSendFromISR+0xbc>
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	2b02      	cmp	r3, #2
 80086e6:	d12f      	bne.n	8008748 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80086e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80086f8:	683a      	ldr	r2, [r7, #0]
 80086fa:	68b9      	ldr	r1, [r7, #8]
 80086fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80086fe:	f000 f911 	bl	8008924 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008702:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800870a:	d112      	bne.n	8008732 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800870c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008710:	2b00      	cmp	r3, #0
 8008712:	d016      	beq.n	8008742 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008716:	3324      	adds	r3, #36	; 0x24
 8008718:	4618      	mov	r0, r3
 800871a:	f000 fed1 	bl	80094c0 <xTaskRemoveFromEventList>
 800871e:	4603      	mov	r3, r0
 8008720:	2b00      	cmp	r3, #0
 8008722:	d00e      	beq.n	8008742 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00b      	beq.n	8008742 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2201      	movs	r2, #1
 800872e:	601a      	str	r2, [r3, #0]
 8008730:	e007      	b.n	8008742 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008732:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008736:	3301      	adds	r3, #1
 8008738:	b2db      	uxtb	r3, r3
 800873a:	b25a      	sxtb	r2, r3
 800873c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008742:	2301      	movs	r3, #1
 8008744:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008746:	e001      	b.n	800874c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008748:	2300      	movs	r3, #0
 800874a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800874c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800874e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008756:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800875a:	4618      	mov	r0, r3
 800875c:	3740      	adds	r7, #64	; 0x40
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
	...

08008764 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b08c      	sub	sp, #48	; 0x30
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008770:	2300      	movs	r3, #0
 8008772:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877a:	2b00      	cmp	r3, #0
 800877c:	d10a      	bne.n	8008794 <xQueueReceive+0x30>
	__asm volatile
 800877e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008782:	f383 8811 	msr	BASEPRI, r3
 8008786:	f3bf 8f6f 	isb	sy
 800878a:	f3bf 8f4f 	dsb	sy
 800878e:	623b      	str	r3, [r7, #32]
}
 8008790:	bf00      	nop
 8008792:	e7fe      	b.n	8008792 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d103      	bne.n	80087a2 <xQueueReceive+0x3e>
 800879a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d101      	bne.n	80087a6 <xQueueReceive+0x42>
 80087a2:	2301      	movs	r3, #1
 80087a4:	e000      	b.n	80087a8 <xQueueReceive+0x44>
 80087a6:	2300      	movs	r3, #0
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d10a      	bne.n	80087c2 <xQueueReceive+0x5e>
	__asm volatile
 80087ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b0:	f383 8811 	msr	BASEPRI, r3
 80087b4:	f3bf 8f6f 	isb	sy
 80087b8:	f3bf 8f4f 	dsb	sy
 80087bc:	61fb      	str	r3, [r7, #28]
}
 80087be:	bf00      	nop
 80087c0:	e7fe      	b.n	80087c0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087c2:	f001 f83b 	bl	800983c <xTaskGetSchedulerState>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d102      	bne.n	80087d2 <xQueueReceive+0x6e>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d101      	bne.n	80087d6 <xQueueReceive+0x72>
 80087d2:	2301      	movs	r3, #1
 80087d4:	e000      	b.n	80087d8 <xQueueReceive+0x74>
 80087d6:	2300      	movs	r3, #0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d10a      	bne.n	80087f2 <xQueueReceive+0x8e>
	__asm volatile
 80087dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e0:	f383 8811 	msr	BASEPRI, r3
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	f3bf 8f4f 	dsb	sy
 80087ec:	61bb      	str	r3, [r7, #24]
}
 80087ee:	bf00      	nop
 80087f0:	e7fe      	b.n	80087f0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80087f2:	f001 fd7f 	bl	800a2f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d01f      	beq.n	8008842 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008802:	68b9      	ldr	r1, [r7, #8]
 8008804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008806:	f000 f8f7 	bl	80089f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800880a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880c:	1e5a      	subs	r2, r3, #1
 800880e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008810:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00f      	beq.n	800883a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800881a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800881c:	3310      	adds	r3, #16
 800881e:	4618      	mov	r0, r3
 8008820:	f000 fe4e 	bl	80094c0 <xTaskRemoveFromEventList>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d007      	beq.n	800883a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800882a:	4b3d      	ldr	r3, [pc, #244]	; (8008920 <xQueueReceive+0x1bc>)
 800882c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008830:	601a      	str	r2, [r3, #0]
 8008832:	f3bf 8f4f 	dsb	sy
 8008836:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800883a:	f001 fd8b 	bl	800a354 <vPortExitCritical>
				return pdPASS;
 800883e:	2301      	movs	r3, #1
 8008840:	e069      	b.n	8008916 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d103      	bne.n	8008850 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008848:	f001 fd84 	bl	800a354 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800884c:	2300      	movs	r3, #0
 800884e:	e062      	b.n	8008916 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008852:	2b00      	cmp	r3, #0
 8008854:	d106      	bne.n	8008864 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008856:	f107 0310 	add.w	r3, r7, #16
 800885a:	4618      	mov	r0, r3
 800885c:	f000 fe94 	bl	8009588 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008860:	2301      	movs	r3, #1
 8008862:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008864:	f001 fd76 	bl	800a354 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008868:	f000 fc06 	bl	8009078 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800886c:	f001 fd42 	bl	800a2f4 <vPortEnterCritical>
 8008870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008872:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008876:	b25b      	sxtb	r3, r3
 8008878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800887c:	d103      	bne.n	8008886 <xQueueReceive+0x122>
 800887e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008880:	2200      	movs	r2, #0
 8008882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008888:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800888c:	b25b      	sxtb	r3, r3
 800888e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008892:	d103      	bne.n	800889c <xQueueReceive+0x138>
 8008894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008896:	2200      	movs	r2, #0
 8008898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800889c:	f001 fd5a 	bl	800a354 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088a0:	1d3a      	adds	r2, r7, #4
 80088a2:	f107 0310 	add.w	r3, r7, #16
 80088a6:	4611      	mov	r1, r2
 80088a8:	4618      	mov	r0, r3
 80088aa:	f000 fe83 	bl	80095b4 <xTaskCheckForTimeOut>
 80088ae:	4603      	mov	r3, r0
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d123      	bne.n	80088fc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088b6:	f000 f917 	bl	8008ae8 <prvIsQueueEmpty>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d017      	beq.n	80088f0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80088c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c2:	3324      	adds	r3, #36	; 0x24
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	4611      	mov	r1, r2
 80088c8:	4618      	mov	r0, r3
 80088ca:	f000 fda9 	bl	8009420 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80088ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088d0:	f000 f8b8 	bl	8008a44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80088d4:	f000 fbde 	bl	8009094 <xTaskResumeAll>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d189      	bne.n	80087f2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80088de:	4b10      	ldr	r3, [pc, #64]	; (8008920 <xQueueReceive+0x1bc>)
 80088e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088e4:	601a      	str	r2, [r3, #0]
 80088e6:	f3bf 8f4f 	dsb	sy
 80088ea:	f3bf 8f6f 	isb	sy
 80088ee:	e780      	b.n	80087f2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80088f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088f2:	f000 f8a7 	bl	8008a44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80088f6:	f000 fbcd 	bl	8009094 <xTaskResumeAll>
 80088fa:	e77a      	b.n	80087f2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80088fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088fe:	f000 f8a1 	bl	8008a44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008902:	f000 fbc7 	bl	8009094 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008906:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008908:	f000 f8ee 	bl	8008ae8 <prvIsQueueEmpty>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	f43f af6f 	beq.w	80087f2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008914:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008916:	4618      	mov	r0, r3
 8008918:	3730      	adds	r7, #48	; 0x30
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	e000ed04 	.word	0xe000ed04

08008924 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b086      	sub	sp, #24
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008930:	2300      	movs	r3, #0
 8008932:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008938:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800893e:	2b00      	cmp	r3, #0
 8008940:	d10d      	bne.n	800895e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d14d      	bne.n	80089e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	4618      	mov	r0, r3
 8008950:	f000 ff92 	bl	8009878 <xTaskPriorityDisinherit>
 8008954:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2200      	movs	r2, #0
 800895a:	609a      	str	r2, [r3, #8]
 800895c:	e043      	b.n	80089e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d119      	bne.n	8008998 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	6858      	ldr	r0, [r3, #4]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800896c:	461a      	mov	r2, r3
 800896e:	68b9      	ldr	r1, [r7, #8]
 8008970:	f002 f812 	bl	800a998 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	685a      	ldr	r2, [r3, #4]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800897c:	441a      	add	r2, r3
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	685a      	ldr	r2, [r3, #4]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	429a      	cmp	r2, r3
 800898c:	d32b      	bcc.n	80089e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	605a      	str	r2, [r3, #4]
 8008996:	e026      	b.n	80089e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	68d8      	ldr	r0, [r3, #12]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a0:	461a      	mov	r2, r3
 80089a2:	68b9      	ldr	r1, [r7, #8]
 80089a4:	f001 fff8 	bl	800a998 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	68da      	ldr	r2, [r3, #12]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b0:	425b      	negs	r3, r3
 80089b2:	441a      	add	r2, r3
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	68da      	ldr	r2, [r3, #12]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d207      	bcs.n	80089d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	689a      	ldr	r2, [r3, #8]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089cc:	425b      	negs	r3, r3
 80089ce:	441a      	add	r2, r3
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2b02      	cmp	r3, #2
 80089d8:	d105      	bne.n	80089e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d002      	beq.n	80089e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	3b01      	subs	r3, #1
 80089e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	1c5a      	adds	r2, r3, #1
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80089ee:	697b      	ldr	r3, [r7, #20]
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3718      	adds	r7, #24
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d018      	beq.n	8008a3c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	68da      	ldr	r2, [r3, #12]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a12:	441a      	add	r2, r3
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	68da      	ldr	r2, [r3, #12]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d303      	bcc.n	8008a2c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	68d9      	ldr	r1, [r3, #12]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a34:	461a      	mov	r2, r3
 8008a36:	6838      	ldr	r0, [r7, #0]
 8008a38:	f001 ffae 	bl	800a998 <memcpy>
	}
}
 8008a3c:	bf00      	nop
 8008a3e:	3708      	adds	r7, #8
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008a4c:	f001 fc52 	bl	800a2f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a58:	e011      	b.n	8008a7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d012      	beq.n	8008a88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	3324      	adds	r3, #36	; 0x24
 8008a66:	4618      	mov	r0, r3
 8008a68:	f000 fd2a 	bl	80094c0 <xTaskRemoveFromEventList>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d001      	beq.n	8008a76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008a72:	f000 fe01 	bl	8009678 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008a76:	7bfb      	ldrb	r3, [r7, #15]
 8008a78:	3b01      	subs	r3, #1
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	dce9      	bgt.n	8008a5a <prvUnlockQueue+0x16>
 8008a86:	e000      	b.n	8008a8a <prvUnlockQueue+0x46>
					break;
 8008a88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	22ff      	movs	r2, #255	; 0xff
 8008a8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008a92:	f001 fc5f 	bl	800a354 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008a96:	f001 fc2d 	bl	800a2f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008aa0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008aa2:	e011      	b.n	8008ac8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d012      	beq.n	8008ad2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	3310      	adds	r3, #16
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f000 fd05 	bl	80094c0 <xTaskRemoveFromEventList>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d001      	beq.n	8008ac0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008abc:	f000 fddc 	bl	8009678 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008ac0:	7bbb      	ldrb	r3, [r7, #14]
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ac8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	dce9      	bgt.n	8008aa4 <prvUnlockQueue+0x60>
 8008ad0:	e000      	b.n	8008ad4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008ad2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	22ff      	movs	r2, #255	; 0xff
 8008ad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008adc:	f001 fc3a 	bl	800a354 <vPortExitCritical>
}
 8008ae0:	bf00      	nop
 8008ae2:	3710      	adds	r7, #16
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008af0:	f001 fc00 	bl	800a2f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d102      	bne.n	8008b02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008afc:	2301      	movs	r3, #1
 8008afe:	60fb      	str	r3, [r7, #12]
 8008b00:	e001      	b.n	8008b06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008b02:	2300      	movs	r3, #0
 8008b04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b06:	f001 fc25 	bl	800a354 <vPortExitCritical>

	return xReturn;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3710      	adds	r7, #16
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b1c:	f001 fbea 	bl	800a2f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d102      	bne.n	8008b32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	60fb      	str	r3, [r7, #12]
 8008b30:	e001      	b.n	8008b36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008b32:	2300      	movs	r3, #0
 8008b34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b36:	f001 fc0d 	bl	800a354 <vPortExitCritical>

	return xReturn;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008b44:	b480      	push	{r7}
 8008b46:	b085      	sub	sp, #20
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b4e:	2300      	movs	r3, #0
 8008b50:	60fb      	str	r3, [r7, #12]
 8008b52:	e014      	b.n	8008b7e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008b54:	4a0f      	ldr	r2, [pc, #60]	; (8008b94 <vQueueAddToRegistry+0x50>)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d10b      	bne.n	8008b78 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008b60:	490c      	ldr	r1, [pc, #48]	; (8008b94 <vQueueAddToRegistry+0x50>)
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	683a      	ldr	r2, [r7, #0]
 8008b66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008b6a:	4a0a      	ldr	r2, [pc, #40]	; (8008b94 <vQueueAddToRegistry+0x50>)
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	00db      	lsls	r3, r3, #3
 8008b70:	4413      	add	r3, r2
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008b76:	e006      	b.n	8008b86 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	60fb      	str	r3, [r7, #12]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2b07      	cmp	r3, #7
 8008b82:	d9e7      	bls.n	8008b54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008b84:	bf00      	nop
 8008b86:	bf00      	nop
 8008b88:	3714      	adds	r7, #20
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	2000151c 	.word	0x2000151c

08008b98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b086      	sub	sp, #24
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008ba8:	f001 fba4 	bl	800a2f4 <vPortEnterCritical>
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008bb2:	b25b      	sxtb	r3, r3
 8008bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb8:	d103      	bne.n	8008bc2 <vQueueWaitForMessageRestricted+0x2a>
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bc8:	b25b      	sxtb	r3, r3
 8008bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bce:	d103      	bne.n	8008bd8 <vQueueWaitForMessageRestricted+0x40>
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008bd8:	f001 fbbc 	bl	800a354 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d106      	bne.n	8008bf2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	3324      	adds	r3, #36	; 0x24
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	68b9      	ldr	r1, [r7, #8]
 8008bec:	4618      	mov	r0, r3
 8008bee:	f000 fc3b 	bl	8009468 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008bf2:	6978      	ldr	r0, [r7, #20]
 8008bf4:	f7ff ff26 	bl	8008a44 <prvUnlockQueue>
	}
 8008bf8:	bf00      	nop
 8008bfa:	3718      	adds	r7, #24
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b08e      	sub	sp, #56	; 0x38
 8008c04:	af04      	add	r7, sp, #16
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	60b9      	str	r1, [r7, #8]
 8008c0a:	607a      	str	r2, [r7, #4]
 8008c0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10a      	bne.n	8008c2a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c18:	f383 8811 	msr	BASEPRI, r3
 8008c1c:	f3bf 8f6f 	isb	sy
 8008c20:	f3bf 8f4f 	dsb	sy
 8008c24:	623b      	str	r3, [r7, #32]
}
 8008c26:	bf00      	nop
 8008c28:	e7fe      	b.n	8008c28 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d10a      	bne.n	8008c46 <xTaskCreateStatic+0x46>
	__asm volatile
 8008c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c34:	f383 8811 	msr	BASEPRI, r3
 8008c38:	f3bf 8f6f 	isb	sy
 8008c3c:	f3bf 8f4f 	dsb	sy
 8008c40:	61fb      	str	r3, [r7, #28]
}
 8008c42:	bf00      	nop
 8008c44:	e7fe      	b.n	8008c44 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008c46:	235c      	movs	r3, #92	; 0x5c
 8008c48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	2b5c      	cmp	r3, #92	; 0x5c
 8008c4e:	d00a      	beq.n	8008c66 <xTaskCreateStatic+0x66>
	__asm volatile
 8008c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c54:	f383 8811 	msr	BASEPRI, r3
 8008c58:	f3bf 8f6f 	isb	sy
 8008c5c:	f3bf 8f4f 	dsb	sy
 8008c60:	61bb      	str	r3, [r7, #24]
}
 8008c62:	bf00      	nop
 8008c64:	e7fe      	b.n	8008c64 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008c66:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d01e      	beq.n	8008cac <xTaskCreateStatic+0xac>
 8008c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d01b      	beq.n	8008cac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c76:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c7c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c80:	2202      	movs	r2, #2
 8008c82:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008c86:	2300      	movs	r3, #0
 8008c88:	9303      	str	r3, [sp, #12]
 8008c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8c:	9302      	str	r3, [sp, #8]
 8008c8e:	f107 0314 	add.w	r3, r7, #20
 8008c92:	9301      	str	r3, [sp, #4]
 8008c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c96:	9300      	str	r3, [sp, #0]
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	68b9      	ldr	r1, [r7, #8]
 8008c9e:	68f8      	ldr	r0, [r7, #12]
 8008ca0:	f000 f850 	bl	8008d44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ca4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ca6:	f000 f8dd 	bl	8008e64 <prvAddNewTaskToReadyList>
 8008caa:	e001      	b.n	8008cb0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008cac:	2300      	movs	r3, #0
 8008cae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008cb0:	697b      	ldr	r3, [r7, #20]
	}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3728      	adds	r7, #40	; 0x28
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b08c      	sub	sp, #48	; 0x30
 8008cbe:	af04      	add	r7, sp, #16
 8008cc0:	60f8      	str	r0, [r7, #12]
 8008cc2:	60b9      	str	r1, [r7, #8]
 8008cc4:	603b      	str	r3, [r7, #0]
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008cca:	88fb      	ldrh	r3, [r7, #6]
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f001 fc32 	bl	800a538 <pvPortMalloc>
 8008cd4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00e      	beq.n	8008cfa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008cdc:	205c      	movs	r0, #92	; 0x5c
 8008cde:	f001 fc2b 	bl	800a538 <pvPortMalloc>
 8008ce2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d003      	beq.n	8008cf2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008cea:	69fb      	ldr	r3, [r7, #28]
 8008cec:	697a      	ldr	r2, [r7, #20]
 8008cee:	631a      	str	r2, [r3, #48]	; 0x30
 8008cf0:	e005      	b.n	8008cfe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008cf2:	6978      	ldr	r0, [r7, #20]
 8008cf4:	f001 fcec 	bl	800a6d0 <vPortFree>
 8008cf8:	e001      	b.n	8008cfe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008cfe:	69fb      	ldr	r3, [r7, #28]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d017      	beq.n	8008d34 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	2200      	movs	r2, #0
 8008d08:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008d0c:	88fa      	ldrh	r2, [r7, #6]
 8008d0e:	2300      	movs	r3, #0
 8008d10:	9303      	str	r3, [sp, #12]
 8008d12:	69fb      	ldr	r3, [r7, #28]
 8008d14:	9302      	str	r3, [sp, #8]
 8008d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d18:	9301      	str	r3, [sp, #4]
 8008d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1c:	9300      	str	r3, [sp, #0]
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	68b9      	ldr	r1, [r7, #8]
 8008d22:	68f8      	ldr	r0, [r7, #12]
 8008d24:	f000 f80e 	bl	8008d44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d28:	69f8      	ldr	r0, [r7, #28]
 8008d2a:	f000 f89b 	bl	8008e64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	61bb      	str	r3, [r7, #24]
 8008d32:	e002      	b.n	8008d3a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008d34:	f04f 33ff 	mov.w	r3, #4294967295
 8008d38:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008d3a:	69bb      	ldr	r3, [r7, #24]
	}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3720      	adds	r7, #32
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b088      	sub	sp, #32
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	607a      	str	r2, [r7, #4]
 8008d50:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d54:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	21a5      	movs	r1, #165	; 0xa5
 8008d5e:	f001 fe29 	bl	800a9b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008d6c:	3b01      	subs	r3, #1
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	4413      	add	r3, r2
 8008d72:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008d74:	69bb      	ldr	r3, [r7, #24]
 8008d76:	f023 0307 	bic.w	r3, r3, #7
 8008d7a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008d7c:	69bb      	ldr	r3, [r7, #24]
 8008d7e:	f003 0307 	and.w	r3, r3, #7
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d00a      	beq.n	8008d9c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8a:	f383 8811 	msr	BASEPRI, r3
 8008d8e:	f3bf 8f6f 	isb	sy
 8008d92:	f3bf 8f4f 	dsb	sy
 8008d96:	617b      	str	r3, [r7, #20]
}
 8008d98:	bf00      	nop
 8008d9a:	e7fe      	b.n	8008d9a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d01f      	beq.n	8008de2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008da2:	2300      	movs	r3, #0
 8008da4:	61fb      	str	r3, [r7, #28]
 8008da6:	e012      	b.n	8008dce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008da8:	68ba      	ldr	r2, [r7, #8]
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	4413      	add	r3, r2
 8008dae:	7819      	ldrb	r1, [r3, #0]
 8008db0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008db2:	69fb      	ldr	r3, [r7, #28]
 8008db4:	4413      	add	r3, r2
 8008db6:	3334      	adds	r3, #52	; 0x34
 8008db8:	460a      	mov	r2, r1
 8008dba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008dbc:	68ba      	ldr	r2, [r7, #8]
 8008dbe:	69fb      	ldr	r3, [r7, #28]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d006      	beq.n	8008dd6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	3301      	adds	r3, #1
 8008dcc:	61fb      	str	r3, [r7, #28]
 8008dce:	69fb      	ldr	r3, [r7, #28]
 8008dd0:	2b0f      	cmp	r3, #15
 8008dd2:	d9e9      	bls.n	8008da8 <prvInitialiseNewTask+0x64>
 8008dd4:	e000      	b.n	8008dd8 <prvInitialiseNewTask+0x94>
			{
				break;
 8008dd6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008de0:	e003      	b.n	8008dea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de4:	2200      	movs	r2, #0
 8008de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dec:	2b37      	cmp	r3, #55	; 0x37
 8008dee:	d901      	bls.n	8008df4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008df0:	2337      	movs	r3, #55	; 0x37
 8008df2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008df8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dfe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e02:	2200      	movs	r2, #0
 8008e04:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e08:	3304      	adds	r3, #4
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7ff f978 	bl	8008100 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e12:	3318      	adds	r3, #24
 8008e14:	4618      	mov	r0, r3
 8008e16:	f7ff f973 	bl	8008100 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e22:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e2e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e32:	2200      	movs	r2, #0
 8008e34:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008e3e:	683a      	ldr	r2, [r7, #0]
 8008e40:	68f9      	ldr	r1, [r7, #12]
 8008e42:	69b8      	ldr	r0, [r7, #24]
 8008e44:	f001 f928 	bl	800a098 <pxPortInitialiseStack>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e4c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d002      	beq.n	8008e5a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e5a:	bf00      	nop
 8008e5c:	3720      	adds	r7, #32
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
	...

08008e64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008e6c:	f001 fa42 	bl	800a2f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008e70:	4b2d      	ldr	r3, [pc, #180]	; (8008f28 <prvAddNewTaskToReadyList+0xc4>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	3301      	adds	r3, #1
 8008e76:	4a2c      	ldr	r2, [pc, #176]	; (8008f28 <prvAddNewTaskToReadyList+0xc4>)
 8008e78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008e7a:	4b2c      	ldr	r3, [pc, #176]	; (8008f2c <prvAddNewTaskToReadyList+0xc8>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d109      	bne.n	8008e96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008e82:	4a2a      	ldr	r2, [pc, #168]	; (8008f2c <prvAddNewTaskToReadyList+0xc8>)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e88:	4b27      	ldr	r3, [pc, #156]	; (8008f28 <prvAddNewTaskToReadyList+0xc4>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d110      	bne.n	8008eb2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008e90:	f000 fc16 	bl	80096c0 <prvInitialiseTaskLists>
 8008e94:	e00d      	b.n	8008eb2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008e96:	4b26      	ldr	r3, [pc, #152]	; (8008f30 <prvAddNewTaskToReadyList+0xcc>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d109      	bne.n	8008eb2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008e9e:	4b23      	ldr	r3, [pc, #140]	; (8008f2c <prvAddNewTaskToReadyList+0xc8>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d802      	bhi.n	8008eb2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008eac:	4a1f      	ldr	r2, [pc, #124]	; (8008f2c <prvAddNewTaskToReadyList+0xc8>)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008eb2:	4b20      	ldr	r3, [pc, #128]	; (8008f34 <prvAddNewTaskToReadyList+0xd0>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	4a1e      	ldr	r2, [pc, #120]	; (8008f34 <prvAddNewTaskToReadyList+0xd0>)
 8008eba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008ebc:	4b1d      	ldr	r3, [pc, #116]	; (8008f34 <prvAddNewTaskToReadyList+0xd0>)
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ec8:	4b1b      	ldr	r3, [pc, #108]	; (8008f38 <prvAddNewTaskToReadyList+0xd4>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d903      	bls.n	8008ed8 <prvAddNewTaskToReadyList+0x74>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed4:	4a18      	ldr	r2, [pc, #96]	; (8008f38 <prvAddNewTaskToReadyList+0xd4>)
 8008ed6:	6013      	str	r3, [r2, #0]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008edc:	4613      	mov	r3, r2
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	4413      	add	r3, r2
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	4a15      	ldr	r2, [pc, #84]	; (8008f3c <prvAddNewTaskToReadyList+0xd8>)
 8008ee6:	441a      	add	r2, r3
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	3304      	adds	r3, #4
 8008eec:	4619      	mov	r1, r3
 8008eee:	4610      	mov	r0, r2
 8008ef0:	f7ff f913 	bl	800811a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008ef4:	f001 fa2e 	bl	800a354 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008ef8:	4b0d      	ldr	r3, [pc, #52]	; (8008f30 <prvAddNewTaskToReadyList+0xcc>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d00e      	beq.n	8008f1e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008f00:	4b0a      	ldr	r3, [pc, #40]	; (8008f2c <prvAddNewTaskToReadyList+0xc8>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d207      	bcs.n	8008f1e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008f0e:	4b0c      	ldr	r3, [pc, #48]	; (8008f40 <prvAddNewTaskToReadyList+0xdc>)
 8008f10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f14:	601a      	str	r2, [r3, #0]
 8008f16:	f3bf 8f4f 	dsb	sy
 8008f1a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f1e:	bf00      	nop
 8008f20:	3708      	adds	r7, #8
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	20001a30 	.word	0x20001a30
 8008f2c:	2000155c 	.word	0x2000155c
 8008f30:	20001a3c 	.word	0x20001a3c
 8008f34:	20001a4c 	.word	0x20001a4c
 8008f38:	20001a38 	.word	0x20001a38
 8008f3c:	20001560 	.word	0x20001560
 8008f40:	e000ed04 	.word	0xe000ed04

08008f44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d017      	beq.n	8008f86 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008f56:	4b13      	ldr	r3, [pc, #76]	; (8008fa4 <vTaskDelay+0x60>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00a      	beq.n	8008f74 <vTaskDelay+0x30>
	__asm volatile
 8008f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f62:	f383 8811 	msr	BASEPRI, r3
 8008f66:	f3bf 8f6f 	isb	sy
 8008f6a:	f3bf 8f4f 	dsb	sy
 8008f6e:	60bb      	str	r3, [r7, #8]
}
 8008f70:	bf00      	nop
 8008f72:	e7fe      	b.n	8008f72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008f74:	f000 f880 	bl	8009078 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008f78:	2100      	movs	r1, #0
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fcea 	bl	8009954 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008f80:	f000 f888 	bl	8009094 <xTaskResumeAll>
 8008f84:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d107      	bne.n	8008f9c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008f8c:	4b06      	ldr	r3, [pc, #24]	; (8008fa8 <vTaskDelay+0x64>)
 8008f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f92:	601a      	str	r2, [r3, #0]
 8008f94:	f3bf 8f4f 	dsb	sy
 8008f98:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f9c:	bf00      	nop
 8008f9e:	3710      	adds	r7, #16
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	20001a58 	.word	0x20001a58
 8008fa8:	e000ed04 	.word	0xe000ed04

08008fac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b08a      	sub	sp, #40	; 0x28
 8008fb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008fba:	463a      	mov	r2, r7
 8008fbc:	1d39      	adds	r1, r7, #4
 8008fbe:	f107 0308 	add.w	r3, r7, #8
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f7ff f848 	bl	8008058 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008fc8:	6839      	ldr	r1, [r7, #0]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	68ba      	ldr	r2, [r7, #8]
 8008fce:	9202      	str	r2, [sp, #8]
 8008fd0:	9301      	str	r3, [sp, #4]
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	9300      	str	r3, [sp, #0]
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	460a      	mov	r2, r1
 8008fda:	4921      	ldr	r1, [pc, #132]	; (8009060 <vTaskStartScheduler+0xb4>)
 8008fdc:	4821      	ldr	r0, [pc, #132]	; (8009064 <vTaskStartScheduler+0xb8>)
 8008fde:	f7ff fe0f 	bl	8008c00 <xTaskCreateStatic>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	4a20      	ldr	r2, [pc, #128]	; (8009068 <vTaskStartScheduler+0xbc>)
 8008fe6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008fe8:	4b1f      	ldr	r3, [pc, #124]	; (8009068 <vTaskStartScheduler+0xbc>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d002      	beq.n	8008ff6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	617b      	str	r3, [r7, #20]
 8008ff4:	e001      	b.n	8008ffa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d102      	bne.n	8009006 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009000:	f000 fcfc 	bl	80099fc <xTimerCreateTimerTask>
 8009004:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	2b01      	cmp	r3, #1
 800900a:	d116      	bne.n	800903a <vTaskStartScheduler+0x8e>
	__asm volatile
 800900c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009010:	f383 8811 	msr	BASEPRI, r3
 8009014:	f3bf 8f6f 	isb	sy
 8009018:	f3bf 8f4f 	dsb	sy
 800901c:	613b      	str	r3, [r7, #16]
}
 800901e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009020:	4b12      	ldr	r3, [pc, #72]	; (800906c <vTaskStartScheduler+0xc0>)
 8009022:	f04f 32ff 	mov.w	r2, #4294967295
 8009026:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009028:	4b11      	ldr	r3, [pc, #68]	; (8009070 <vTaskStartScheduler+0xc4>)
 800902a:	2201      	movs	r2, #1
 800902c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800902e:	4b11      	ldr	r3, [pc, #68]	; (8009074 <vTaskStartScheduler+0xc8>)
 8009030:	2200      	movs	r2, #0
 8009032:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009034:	f001 f8bc 	bl	800a1b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009038:	e00e      	b.n	8009058 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009040:	d10a      	bne.n	8009058 <vTaskStartScheduler+0xac>
	__asm volatile
 8009042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009046:	f383 8811 	msr	BASEPRI, r3
 800904a:	f3bf 8f6f 	isb	sy
 800904e:	f3bf 8f4f 	dsb	sy
 8009052:	60fb      	str	r3, [r7, #12]
}
 8009054:	bf00      	nop
 8009056:	e7fe      	b.n	8009056 <vTaskStartScheduler+0xaa>
}
 8009058:	bf00      	nop
 800905a:	3718      	adds	r7, #24
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}
 8009060:	0800ae90 	.word	0x0800ae90
 8009064:	08009691 	.word	0x08009691
 8009068:	20001a54 	.word	0x20001a54
 800906c:	20001a50 	.word	0x20001a50
 8009070:	20001a3c 	.word	0x20001a3c
 8009074:	20001a34 	.word	0x20001a34

08009078 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009078:	b480      	push	{r7}
 800907a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800907c:	4b04      	ldr	r3, [pc, #16]	; (8009090 <vTaskSuspendAll+0x18>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	3301      	adds	r3, #1
 8009082:	4a03      	ldr	r2, [pc, #12]	; (8009090 <vTaskSuspendAll+0x18>)
 8009084:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009086:	bf00      	nop
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr
 8009090:	20001a58 	.word	0x20001a58

08009094 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b084      	sub	sp, #16
 8009098:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800909a:	2300      	movs	r3, #0
 800909c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800909e:	2300      	movs	r3, #0
 80090a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80090a2:	4b42      	ldr	r3, [pc, #264]	; (80091ac <xTaskResumeAll+0x118>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d10a      	bne.n	80090c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80090aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ae:	f383 8811 	msr	BASEPRI, r3
 80090b2:	f3bf 8f6f 	isb	sy
 80090b6:	f3bf 8f4f 	dsb	sy
 80090ba:	603b      	str	r3, [r7, #0]
}
 80090bc:	bf00      	nop
 80090be:	e7fe      	b.n	80090be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80090c0:	f001 f918 	bl	800a2f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80090c4:	4b39      	ldr	r3, [pc, #228]	; (80091ac <xTaskResumeAll+0x118>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	3b01      	subs	r3, #1
 80090ca:	4a38      	ldr	r2, [pc, #224]	; (80091ac <xTaskResumeAll+0x118>)
 80090cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090ce:	4b37      	ldr	r3, [pc, #220]	; (80091ac <xTaskResumeAll+0x118>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d162      	bne.n	800919c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80090d6:	4b36      	ldr	r3, [pc, #216]	; (80091b0 <xTaskResumeAll+0x11c>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d05e      	beq.n	800919c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80090de:	e02f      	b.n	8009140 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090e0:	4b34      	ldr	r3, [pc, #208]	; (80091b4 <xTaskResumeAll+0x120>)
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	3318      	adds	r3, #24
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7ff f871 	bl	80081d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	3304      	adds	r3, #4
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7ff f86c 	bl	80081d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009100:	4b2d      	ldr	r3, [pc, #180]	; (80091b8 <xTaskResumeAll+0x124>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	429a      	cmp	r2, r3
 8009106:	d903      	bls.n	8009110 <xTaskResumeAll+0x7c>
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800910c:	4a2a      	ldr	r2, [pc, #168]	; (80091b8 <xTaskResumeAll+0x124>)
 800910e:	6013      	str	r3, [r2, #0]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009114:	4613      	mov	r3, r2
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	4413      	add	r3, r2
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	4a27      	ldr	r2, [pc, #156]	; (80091bc <xTaskResumeAll+0x128>)
 800911e:	441a      	add	r2, r3
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	3304      	adds	r3, #4
 8009124:	4619      	mov	r1, r3
 8009126:	4610      	mov	r0, r2
 8009128:	f7fe fff7 	bl	800811a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009130:	4b23      	ldr	r3, [pc, #140]	; (80091c0 <xTaskResumeAll+0x12c>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009136:	429a      	cmp	r2, r3
 8009138:	d302      	bcc.n	8009140 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800913a:	4b22      	ldr	r3, [pc, #136]	; (80091c4 <xTaskResumeAll+0x130>)
 800913c:	2201      	movs	r2, #1
 800913e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009140:	4b1c      	ldr	r3, [pc, #112]	; (80091b4 <xTaskResumeAll+0x120>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d1cb      	bne.n	80090e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d001      	beq.n	8009152 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800914e:	f000 fb55 	bl	80097fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009152:	4b1d      	ldr	r3, [pc, #116]	; (80091c8 <xTaskResumeAll+0x134>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d010      	beq.n	8009180 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800915e:	f000 f847 	bl	80091f0 <xTaskIncrementTick>
 8009162:	4603      	mov	r3, r0
 8009164:	2b00      	cmp	r3, #0
 8009166:	d002      	beq.n	800916e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009168:	4b16      	ldr	r3, [pc, #88]	; (80091c4 <xTaskResumeAll+0x130>)
 800916a:	2201      	movs	r2, #1
 800916c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	3b01      	subs	r3, #1
 8009172:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1f1      	bne.n	800915e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800917a:	4b13      	ldr	r3, [pc, #76]	; (80091c8 <xTaskResumeAll+0x134>)
 800917c:	2200      	movs	r2, #0
 800917e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009180:	4b10      	ldr	r3, [pc, #64]	; (80091c4 <xTaskResumeAll+0x130>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d009      	beq.n	800919c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009188:	2301      	movs	r3, #1
 800918a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800918c:	4b0f      	ldr	r3, [pc, #60]	; (80091cc <xTaskResumeAll+0x138>)
 800918e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009192:	601a      	str	r2, [r3, #0]
 8009194:	f3bf 8f4f 	dsb	sy
 8009198:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800919c:	f001 f8da 	bl	800a354 <vPortExitCritical>

	return xAlreadyYielded;
 80091a0:	68bb      	ldr	r3, [r7, #8]
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3710      	adds	r7, #16
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	20001a58 	.word	0x20001a58
 80091b0:	20001a30 	.word	0x20001a30
 80091b4:	200019f0 	.word	0x200019f0
 80091b8:	20001a38 	.word	0x20001a38
 80091bc:	20001560 	.word	0x20001560
 80091c0:	2000155c 	.word	0x2000155c
 80091c4:	20001a44 	.word	0x20001a44
 80091c8:	20001a40 	.word	0x20001a40
 80091cc:	e000ed04 	.word	0xe000ed04

080091d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80091d6:	4b05      	ldr	r3, [pc, #20]	; (80091ec <xTaskGetTickCount+0x1c>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80091dc:	687b      	ldr	r3, [r7, #4]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	370c      	adds	r7, #12
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr
 80091ea:	bf00      	nop
 80091ec:	20001a34 	.word	0x20001a34

080091f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b086      	sub	sp, #24
 80091f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80091f6:	2300      	movs	r3, #0
 80091f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091fa:	4b4f      	ldr	r3, [pc, #316]	; (8009338 <xTaskIncrementTick+0x148>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	f040 808f 	bne.w	8009322 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009204:	4b4d      	ldr	r3, [pc, #308]	; (800933c <xTaskIncrementTick+0x14c>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	3301      	adds	r3, #1
 800920a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800920c:	4a4b      	ldr	r2, [pc, #300]	; (800933c <xTaskIncrementTick+0x14c>)
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d120      	bne.n	800925a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009218:	4b49      	ldr	r3, [pc, #292]	; (8009340 <xTaskIncrementTick+0x150>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00a      	beq.n	8009238 <xTaskIncrementTick+0x48>
	__asm volatile
 8009222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009226:	f383 8811 	msr	BASEPRI, r3
 800922a:	f3bf 8f6f 	isb	sy
 800922e:	f3bf 8f4f 	dsb	sy
 8009232:	603b      	str	r3, [r7, #0]
}
 8009234:	bf00      	nop
 8009236:	e7fe      	b.n	8009236 <xTaskIncrementTick+0x46>
 8009238:	4b41      	ldr	r3, [pc, #260]	; (8009340 <xTaskIncrementTick+0x150>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	60fb      	str	r3, [r7, #12]
 800923e:	4b41      	ldr	r3, [pc, #260]	; (8009344 <xTaskIncrementTick+0x154>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a3f      	ldr	r2, [pc, #252]	; (8009340 <xTaskIncrementTick+0x150>)
 8009244:	6013      	str	r3, [r2, #0]
 8009246:	4a3f      	ldr	r2, [pc, #252]	; (8009344 <xTaskIncrementTick+0x154>)
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	6013      	str	r3, [r2, #0]
 800924c:	4b3e      	ldr	r3, [pc, #248]	; (8009348 <xTaskIncrementTick+0x158>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	3301      	adds	r3, #1
 8009252:	4a3d      	ldr	r2, [pc, #244]	; (8009348 <xTaskIncrementTick+0x158>)
 8009254:	6013      	str	r3, [r2, #0]
 8009256:	f000 fad1 	bl	80097fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800925a:	4b3c      	ldr	r3, [pc, #240]	; (800934c <xTaskIncrementTick+0x15c>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	693a      	ldr	r2, [r7, #16]
 8009260:	429a      	cmp	r2, r3
 8009262:	d349      	bcc.n	80092f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009264:	4b36      	ldr	r3, [pc, #216]	; (8009340 <xTaskIncrementTick+0x150>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d104      	bne.n	8009278 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800926e:	4b37      	ldr	r3, [pc, #220]	; (800934c <xTaskIncrementTick+0x15c>)
 8009270:	f04f 32ff 	mov.w	r2, #4294967295
 8009274:	601a      	str	r2, [r3, #0]
					break;
 8009276:	e03f      	b.n	80092f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009278:	4b31      	ldr	r3, [pc, #196]	; (8009340 <xTaskIncrementTick+0x150>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009288:	693a      	ldr	r2, [r7, #16]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	429a      	cmp	r2, r3
 800928e:	d203      	bcs.n	8009298 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009290:	4a2e      	ldr	r2, [pc, #184]	; (800934c <xTaskIncrementTick+0x15c>)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009296:	e02f      	b.n	80092f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	3304      	adds	r3, #4
 800929c:	4618      	mov	r0, r3
 800929e:	f7fe ff99 	bl	80081d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d004      	beq.n	80092b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	3318      	adds	r3, #24
 80092ae:	4618      	mov	r0, r3
 80092b0:	f7fe ff90 	bl	80081d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092b8:	4b25      	ldr	r3, [pc, #148]	; (8009350 <xTaskIncrementTick+0x160>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	429a      	cmp	r2, r3
 80092be:	d903      	bls.n	80092c8 <xTaskIncrementTick+0xd8>
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c4:	4a22      	ldr	r2, [pc, #136]	; (8009350 <xTaskIncrementTick+0x160>)
 80092c6:	6013      	str	r3, [r2, #0]
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092cc:	4613      	mov	r3, r2
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	4413      	add	r3, r2
 80092d2:	009b      	lsls	r3, r3, #2
 80092d4:	4a1f      	ldr	r2, [pc, #124]	; (8009354 <xTaskIncrementTick+0x164>)
 80092d6:	441a      	add	r2, r3
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	3304      	adds	r3, #4
 80092dc:	4619      	mov	r1, r3
 80092de:	4610      	mov	r0, r2
 80092e0:	f7fe ff1b 	bl	800811a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092e8:	4b1b      	ldr	r3, [pc, #108]	; (8009358 <xTaskIncrementTick+0x168>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d3b8      	bcc.n	8009264 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80092f2:	2301      	movs	r3, #1
 80092f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092f6:	e7b5      	b.n	8009264 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80092f8:	4b17      	ldr	r3, [pc, #92]	; (8009358 <xTaskIncrementTick+0x168>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092fe:	4915      	ldr	r1, [pc, #84]	; (8009354 <xTaskIncrementTick+0x164>)
 8009300:	4613      	mov	r3, r2
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	4413      	add	r3, r2
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	440b      	add	r3, r1
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	2b01      	cmp	r3, #1
 800930e:	d901      	bls.n	8009314 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009310:	2301      	movs	r3, #1
 8009312:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009314:	4b11      	ldr	r3, [pc, #68]	; (800935c <xTaskIncrementTick+0x16c>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d007      	beq.n	800932c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800931c:	2301      	movs	r3, #1
 800931e:	617b      	str	r3, [r7, #20]
 8009320:	e004      	b.n	800932c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009322:	4b0f      	ldr	r3, [pc, #60]	; (8009360 <xTaskIncrementTick+0x170>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	3301      	adds	r3, #1
 8009328:	4a0d      	ldr	r2, [pc, #52]	; (8009360 <xTaskIncrementTick+0x170>)
 800932a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800932c:	697b      	ldr	r3, [r7, #20]
}
 800932e:	4618      	mov	r0, r3
 8009330:	3718      	adds	r7, #24
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	20001a58 	.word	0x20001a58
 800933c:	20001a34 	.word	0x20001a34
 8009340:	200019e8 	.word	0x200019e8
 8009344:	200019ec 	.word	0x200019ec
 8009348:	20001a48 	.word	0x20001a48
 800934c:	20001a50 	.word	0x20001a50
 8009350:	20001a38 	.word	0x20001a38
 8009354:	20001560 	.word	0x20001560
 8009358:	2000155c 	.word	0x2000155c
 800935c:	20001a44 	.word	0x20001a44
 8009360:	20001a40 	.word	0x20001a40

08009364 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009364:	b480      	push	{r7}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800936a:	4b28      	ldr	r3, [pc, #160]	; (800940c <vTaskSwitchContext+0xa8>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d003      	beq.n	800937a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009372:	4b27      	ldr	r3, [pc, #156]	; (8009410 <vTaskSwitchContext+0xac>)
 8009374:	2201      	movs	r2, #1
 8009376:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009378:	e041      	b.n	80093fe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800937a:	4b25      	ldr	r3, [pc, #148]	; (8009410 <vTaskSwitchContext+0xac>)
 800937c:	2200      	movs	r2, #0
 800937e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009380:	4b24      	ldr	r3, [pc, #144]	; (8009414 <vTaskSwitchContext+0xb0>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	60fb      	str	r3, [r7, #12]
 8009386:	e010      	b.n	80093aa <vTaskSwitchContext+0x46>
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d10a      	bne.n	80093a4 <vTaskSwitchContext+0x40>
	__asm volatile
 800938e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009392:	f383 8811 	msr	BASEPRI, r3
 8009396:	f3bf 8f6f 	isb	sy
 800939a:	f3bf 8f4f 	dsb	sy
 800939e:	607b      	str	r3, [r7, #4]
}
 80093a0:	bf00      	nop
 80093a2:	e7fe      	b.n	80093a2 <vTaskSwitchContext+0x3e>
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	3b01      	subs	r3, #1
 80093a8:	60fb      	str	r3, [r7, #12]
 80093aa:	491b      	ldr	r1, [pc, #108]	; (8009418 <vTaskSwitchContext+0xb4>)
 80093ac:	68fa      	ldr	r2, [r7, #12]
 80093ae:	4613      	mov	r3, r2
 80093b0:	009b      	lsls	r3, r3, #2
 80093b2:	4413      	add	r3, r2
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	440b      	add	r3, r1
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d0e4      	beq.n	8009388 <vTaskSwitchContext+0x24>
 80093be:	68fa      	ldr	r2, [r7, #12]
 80093c0:	4613      	mov	r3, r2
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	4413      	add	r3, r2
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	4a13      	ldr	r2, [pc, #76]	; (8009418 <vTaskSwitchContext+0xb4>)
 80093ca:	4413      	add	r3, r2
 80093cc:	60bb      	str	r3, [r7, #8]
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	685a      	ldr	r2, [r3, #4]
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	605a      	str	r2, [r3, #4]
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	685a      	ldr	r2, [r3, #4]
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	3308      	adds	r3, #8
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d104      	bne.n	80093ee <vTaskSwitchContext+0x8a>
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	685a      	ldr	r2, [r3, #4]
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	605a      	str	r2, [r3, #4]
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	4a09      	ldr	r2, [pc, #36]	; (800941c <vTaskSwitchContext+0xb8>)
 80093f6:	6013      	str	r3, [r2, #0]
 80093f8:	4a06      	ldr	r2, [pc, #24]	; (8009414 <vTaskSwitchContext+0xb0>)
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	6013      	str	r3, [r2, #0]
}
 80093fe:	bf00      	nop
 8009400:	3714      	adds	r7, #20
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr
 800940a:	bf00      	nop
 800940c:	20001a58 	.word	0x20001a58
 8009410:	20001a44 	.word	0x20001a44
 8009414:	20001a38 	.word	0x20001a38
 8009418:	20001560 	.word	0x20001560
 800941c:	2000155c 	.word	0x2000155c

08009420 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b084      	sub	sp, #16
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d10a      	bne.n	8009446 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009434:	f383 8811 	msr	BASEPRI, r3
 8009438:	f3bf 8f6f 	isb	sy
 800943c:	f3bf 8f4f 	dsb	sy
 8009440:	60fb      	str	r3, [r7, #12]
}
 8009442:	bf00      	nop
 8009444:	e7fe      	b.n	8009444 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009446:	4b07      	ldr	r3, [pc, #28]	; (8009464 <vTaskPlaceOnEventList+0x44>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	3318      	adds	r3, #24
 800944c:	4619      	mov	r1, r3
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f7fe fe87 	bl	8008162 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009454:	2101      	movs	r1, #1
 8009456:	6838      	ldr	r0, [r7, #0]
 8009458:	f000 fa7c 	bl	8009954 <prvAddCurrentTaskToDelayedList>
}
 800945c:	bf00      	nop
 800945e:	3710      	adds	r7, #16
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}
 8009464:	2000155c 	.word	0x2000155c

08009468 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009468:	b580      	push	{r7, lr}
 800946a:	b086      	sub	sp, #24
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d10a      	bne.n	8009490 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800947a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800947e:	f383 8811 	msr	BASEPRI, r3
 8009482:	f3bf 8f6f 	isb	sy
 8009486:	f3bf 8f4f 	dsb	sy
 800948a:	617b      	str	r3, [r7, #20]
}
 800948c:	bf00      	nop
 800948e:	e7fe      	b.n	800948e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009490:	4b0a      	ldr	r3, [pc, #40]	; (80094bc <vTaskPlaceOnEventListRestricted+0x54>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	3318      	adds	r3, #24
 8009496:	4619      	mov	r1, r3
 8009498:	68f8      	ldr	r0, [r7, #12]
 800949a:	f7fe fe3e 	bl	800811a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d002      	beq.n	80094aa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80094a4:	f04f 33ff 	mov.w	r3, #4294967295
 80094a8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80094aa:	6879      	ldr	r1, [r7, #4]
 80094ac:	68b8      	ldr	r0, [r7, #8]
 80094ae:	f000 fa51 	bl	8009954 <prvAddCurrentTaskToDelayedList>
	}
 80094b2:	bf00      	nop
 80094b4:	3718      	adds	r7, #24
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	2000155c 	.word	0x2000155c

080094c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b086      	sub	sp, #24
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	68db      	ldr	r3, [r3, #12]
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d10a      	bne.n	80094ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80094d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094da:	f383 8811 	msr	BASEPRI, r3
 80094de:	f3bf 8f6f 	isb	sy
 80094e2:	f3bf 8f4f 	dsb	sy
 80094e6:	60fb      	str	r3, [r7, #12]
}
 80094e8:	bf00      	nop
 80094ea:	e7fe      	b.n	80094ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	3318      	adds	r3, #24
 80094f0:	4618      	mov	r0, r3
 80094f2:	f7fe fe6f 	bl	80081d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094f6:	4b1e      	ldr	r3, [pc, #120]	; (8009570 <xTaskRemoveFromEventList+0xb0>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d11d      	bne.n	800953a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	3304      	adds	r3, #4
 8009502:	4618      	mov	r0, r3
 8009504:	f7fe fe66 	bl	80081d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800950c:	4b19      	ldr	r3, [pc, #100]	; (8009574 <xTaskRemoveFromEventList+0xb4>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	429a      	cmp	r2, r3
 8009512:	d903      	bls.n	800951c <xTaskRemoveFromEventList+0x5c>
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009518:	4a16      	ldr	r2, [pc, #88]	; (8009574 <xTaskRemoveFromEventList+0xb4>)
 800951a:	6013      	str	r3, [r2, #0]
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009520:	4613      	mov	r3, r2
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	4413      	add	r3, r2
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	4a13      	ldr	r2, [pc, #76]	; (8009578 <xTaskRemoveFromEventList+0xb8>)
 800952a:	441a      	add	r2, r3
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	3304      	adds	r3, #4
 8009530:	4619      	mov	r1, r3
 8009532:	4610      	mov	r0, r2
 8009534:	f7fe fdf1 	bl	800811a <vListInsertEnd>
 8009538:	e005      	b.n	8009546 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	3318      	adds	r3, #24
 800953e:	4619      	mov	r1, r3
 8009540:	480e      	ldr	r0, [pc, #56]	; (800957c <xTaskRemoveFromEventList+0xbc>)
 8009542:	f7fe fdea 	bl	800811a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800954a:	4b0d      	ldr	r3, [pc, #52]	; (8009580 <xTaskRemoveFromEventList+0xc0>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009550:	429a      	cmp	r2, r3
 8009552:	d905      	bls.n	8009560 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009554:	2301      	movs	r3, #1
 8009556:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009558:	4b0a      	ldr	r3, [pc, #40]	; (8009584 <xTaskRemoveFromEventList+0xc4>)
 800955a:	2201      	movs	r2, #1
 800955c:	601a      	str	r2, [r3, #0]
 800955e:	e001      	b.n	8009564 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009560:	2300      	movs	r3, #0
 8009562:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009564:	697b      	ldr	r3, [r7, #20]
}
 8009566:	4618      	mov	r0, r3
 8009568:	3718      	adds	r7, #24
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	20001a58 	.word	0x20001a58
 8009574:	20001a38 	.word	0x20001a38
 8009578:	20001560 	.word	0x20001560
 800957c:	200019f0 	.word	0x200019f0
 8009580:	2000155c 	.word	0x2000155c
 8009584:	20001a44 	.word	0x20001a44

08009588 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009590:	4b06      	ldr	r3, [pc, #24]	; (80095ac <vTaskInternalSetTimeOutState+0x24>)
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009598:	4b05      	ldr	r3, [pc, #20]	; (80095b0 <vTaskInternalSetTimeOutState+0x28>)
 800959a:	681a      	ldr	r2, [r3, #0]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	605a      	str	r2, [r3, #4]
}
 80095a0:	bf00      	nop
 80095a2:	370c      	adds	r7, #12
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr
 80095ac:	20001a48 	.word	0x20001a48
 80095b0:	20001a34 	.word	0x20001a34

080095b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b088      	sub	sp, #32
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d10a      	bne.n	80095da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80095c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c8:	f383 8811 	msr	BASEPRI, r3
 80095cc:	f3bf 8f6f 	isb	sy
 80095d0:	f3bf 8f4f 	dsb	sy
 80095d4:	613b      	str	r3, [r7, #16]
}
 80095d6:	bf00      	nop
 80095d8:	e7fe      	b.n	80095d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d10a      	bne.n	80095f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80095e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e4:	f383 8811 	msr	BASEPRI, r3
 80095e8:	f3bf 8f6f 	isb	sy
 80095ec:	f3bf 8f4f 	dsb	sy
 80095f0:	60fb      	str	r3, [r7, #12]
}
 80095f2:	bf00      	nop
 80095f4:	e7fe      	b.n	80095f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80095f6:	f000 fe7d 	bl	800a2f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80095fa:	4b1d      	ldr	r3, [pc, #116]	; (8009670 <xTaskCheckForTimeOut+0xbc>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	69ba      	ldr	r2, [r7, #24]
 8009606:	1ad3      	subs	r3, r2, r3
 8009608:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009612:	d102      	bne.n	800961a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009614:	2300      	movs	r3, #0
 8009616:	61fb      	str	r3, [r7, #28]
 8009618:	e023      	b.n	8009662 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	4b15      	ldr	r3, [pc, #84]	; (8009674 <xTaskCheckForTimeOut+0xc0>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	429a      	cmp	r2, r3
 8009624:	d007      	beq.n	8009636 <xTaskCheckForTimeOut+0x82>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	69ba      	ldr	r2, [r7, #24]
 800962c:	429a      	cmp	r2, r3
 800962e:	d302      	bcc.n	8009636 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009630:	2301      	movs	r3, #1
 8009632:	61fb      	str	r3, [r7, #28]
 8009634:	e015      	b.n	8009662 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	697a      	ldr	r2, [r7, #20]
 800963c:	429a      	cmp	r2, r3
 800963e:	d20b      	bcs.n	8009658 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	1ad2      	subs	r2, r2, r3
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f7ff ff9b 	bl	8009588 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009652:	2300      	movs	r3, #0
 8009654:	61fb      	str	r3, [r7, #28]
 8009656:	e004      	b.n	8009662 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	2200      	movs	r2, #0
 800965c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800965e:	2301      	movs	r3, #1
 8009660:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009662:	f000 fe77 	bl	800a354 <vPortExitCritical>

	return xReturn;
 8009666:	69fb      	ldr	r3, [r7, #28]
}
 8009668:	4618      	mov	r0, r3
 800966a:	3720      	adds	r7, #32
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}
 8009670:	20001a34 	.word	0x20001a34
 8009674:	20001a48 	.word	0x20001a48

08009678 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009678:	b480      	push	{r7}
 800967a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800967c:	4b03      	ldr	r3, [pc, #12]	; (800968c <vTaskMissedYield+0x14>)
 800967e:	2201      	movs	r2, #1
 8009680:	601a      	str	r2, [r3, #0]
}
 8009682:	bf00      	nop
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr
 800968c:	20001a44 	.word	0x20001a44

08009690 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009698:	f000 f852 	bl	8009740 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800969c:	4b06      	ldr	r3, [pc, #24]	; (80096b8 <prvIdleTask+0x28>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d9f9      	bls.n	8009698 <prvIdleTask+0x8>
			{
				taskYIELD();
 80096a4:	4b05      	ldr	r3, [pc, #20]	; (80096bc <prvIdleTask+0x2c>)
 80096a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096aa:	601a      	str	r2, [r3, #0]
 80096ac:	f3bf 8f4f 	dsb	sy
 80096b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80096b4:	e7f0      	b.n	8009698 <prvIdleTask+0x8>
 80096b6:	bf00      	nop
 80096b8:	20001560 	.word	0x20001560
 80096bc:	e000ed04 	.word	0xe000ed04

080096c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80096c6:	2300      	movs	r3, #0
 80096c8:	607b      	str	r3, [r7, #4]
 80096ca:	e00c      	b.n	80096e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	4613      	mov	r3, r2
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	4413      	add	r3, r2
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	4a12      	ldr	r2, [pc, #72]	; (8009720 <prvInitialiseTaskLists+0x60>)
 80096d8:	4413      	add	r3, r2
 80096da:	4618      	mov	r0, r3
 80096dc:	f7fe fcf0 	bl	80080c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	3301      	adds	r3, #1
 80096e4:	607b      	str	r3, [r7, #4]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2b37      	cmp	r3, #55	; 0x37
 80096ea:	d9ef      	bls.n	80096cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80096ec:	480d      	ldr	r0, [pc, #52]	; (8009724 <prvInitialiseTaskLists+0x64>)
 80096ee:	f7fe fce7 	bl	80080c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80096f2:	480d      	ldr	r0, [pc, #52]	; (8009728 <prvInitialiseTaskLists+0x68>)
 80096f4:	f7fe fce4 	bl	80080c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80096f8:	480c      	ldr	r0, [pc, #48]	; (800972c <prvInitialiseTaskLists+0x6c>)
 80096fa:	f7fe fce1 	bl	80080c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80096fe:	480c      	ldr	r0, [pc, #48]	; (8009730 <prvInitialiseTaskLists+0x70>)
 8009700:	f7fe fcde 	bl	80080c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009704:	480b      	ldr	r0, [pc, #44]	; (8009734 <prvInitialiseTaskLists+0x74>)
 8009706:	f7fe fcdb 	bl	80080c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800970a:	4b0b      	ldr	r3, [pc, #44]	; (8009738 <prvInitialiseTaskLists+0x78>)
 800970c:	4a05      	ldr	r2, [pc, #20]	; (8009724 <prvInitialiseTaskLists+0x64>)
 800970e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009710:	4b0a      	ldr	r3, [pc, #40]	; (800973c <prvInitialiseTaskLists+0x7c>)
 8009712:	4a05      	ldr	r2, [pc, #20]	; (8009728 <prvInitialiseTaskLists+0x68>)
 8009714:	601a      	str	r2, [r3, #0]
}
 8009716:	bf00      	nop
 8009718:	3708      	adds	r7, #8
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	20001560 	.word	0x20001560
 8009724:	200019c0 	.word	0x200019c0
 8009728:	200019d4 	.word	0x200019d4
 800972c:	200019f0 	.word	0x200019f0
 8009730:	20001a04 	.word	0x20001a04
 8009734:	20001a1c 	.word	0x20001a1c
 8009738:	200019e8 	.word	0x200019e8
 800973c:	200019ec 	.word	0x200019ec

08009740 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009746:	e019      	b.n	800977c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009748:	f000 fdd4 	bl	800a2f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800974c:	4b10      	ldr	r3, [pc, #64]	; (8009790 <prvCheckTasksWaitingTermination+0x50>)
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	3304      	adds	r3, #4
 8009758:	4618      	mov	r0, r3
 800975a:	f7fe fd3b 	bl	80081d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800975e:	4b0d      	ldr	r3, [pc, #52]	; (8009794 <prvCheckTasksWaitingTermination+0x54>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	3b01      	subs	r3, #1
 8009764:	4a0b      	ldr	r2, [pc, #44]	; (8009794 <prvCheckTasksWaitingTermination+0x54>)
 8009766:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009768:	4b0b      	ldr	r3, [pc, #44]	; (8009798 <prvCheckTasksWaitingTermination+0x58>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	3b01      	subs	r3, #1
 800976e:	4a0a      	ldr	r2, [pc, #40]	; (8009798 <prvCheckTasksWaitingTermination+0x58>)
 8009770:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009772:	f000 fdef 	bl	800a354 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 f810 	bl	800979c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800977c:	4b06      	ldr	r3, [pc, #24]	; (8009798 <prvCheckTasksWaitingTermination+0x58>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d1e1      	bne.n	8009748 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009784:	bf00      	nop
 8009786:	bf00      	nop
 8009788:	3708      	adds	r7, #8
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	20001a04 	.word	0x20001a04
 8009794:	20001a30 	.word	0x20001a30
 8009798:	20001a18 	.word	0x20001a18

0800979c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d108      	bne.n	80097c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097b2:	4618      	mov	r0, r3
 80097b4:	f000 ff8c 	bl	800a6d0 <vPortFree>
				vPortFree( pxTCB );
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 ff89 	bl	800a6d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80097be:	e018      	b.n	80097f2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d103      	bne.n	80097d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 ff80 	bl	800a6d0 <vPortFree>
	}
 80097d0:	e00f      	b.n	80097f2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80097d8:	2b02      	cmp	r3, #2
 80097da:	d00a      	beq.n	80097f2 <prvDeleteTCB+0x56>
	__asm volatile
 80097dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e0:	f383 8811 	msr	BASEPRI, r3
 80097e4:	f3bf 8f6f 	isb	sy
 80097e8:	f3bf 8f4f 	dsb	sy
 80097ec:	60fb      	str	r3, [r7, #12]
}
 80097ee:	bf00      	nop
 80097f0:	e7fe      	b.n	80097f0 <prvDeleteTCB+0x54>
	}
 80097f2:	bf00      	nop
 80097f4:	3710      	adds	r7, #16
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
	...

080097fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009802:	4b0c      	ldr	r3, [pc, #48]	; (8009834 <prvResetNextTaskUnblockTime+0x38>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d104      	bne.n	8009816 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800980c:	4b0a      	ldr	r3, [pc, #40]	; (8009838 <prvResetNextTaskUnblockTime+0x3c>)
 800980e:	f04f 32ff 	mov.w	r2, #4294967295
 8009812:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009814:	e008      	b.n	8009828 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009816:	4b07      	ldr	r3, [pc, #28]	; (8009834 <prvResetNextTaskUnblockTime+0x38>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	68db      	ldr	r3, [r3, #12]
 800981c:	68db      	ldr	r3, [r3, #12]
 800981e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	4a04      	ldr	r2, [pc, #16]	; (8009838 <prvResetNextTaskUnblockTime+0x3c>)
 8009826:	6013      	str	r3, [r2, #0]
}
 8009828:	bf00      	nop
 800982a:	370c      	adds	r7, #12
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr
 8009834:	200019e8 	.word	0x200019e8
 8009838:	20001a50 	.word	0x20001a50

0800983c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009842:	4b0b      	ldr	r3, [pc, #44]	; (8009870 <xTaskGetSchedulerState+0x34>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d102      	bne.n	8009850 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800984a:	2301      	movs	r3, #1
 800984c:	607b      	str	r3, [r7, #4]
 800984e:	e008      	b.n	8009862 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009850:	4b08      	ldr	r3, [pc, #32]	; (8009874 <xTaskGetSchedulerState+0x38>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d102      	bne.n	800985e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009858:	2302      	movs	r3, #2
 800985a:	607b      	str	r3, [r7, #4]
 800985c:	e001      	b.n	8009862 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800985e:	2300      	movs	r3, #0
 8009860:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009862:	687b      	ldr	r3, [r7, #4]
	}
 8009864:	4618      	mov	r0, r3
 8009866:	370c      	adds	r7, #12
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr
 8009870:	20001a3c 	.word	0x20001a3c
 8009874:	20001a58 	.word	0x20001a58

08009878 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009878:	b580      	push	{r7, lr}
 800987a:	b086      	sub	sp, #24
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009884:	2300      	movs	r3, #0
 8009886:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d056      	beq.n	800993c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800988e:	4b2e      	ldr	r3, [pc, #184]	; (8009948 <xTaskPriorityDisinherit+0xd0>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	693a      	ldr	r2, [r7, #16]
 8009894:	429a      	cmp	r2, r3
 8009896:	d00a      	beq.n	80098ae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800989c:	f383 8811 	msr	BASEPRI, r3
 80098a0:	f3bf 8f6f 	isb	sy
 80098a4:	f3bf 8f4f 	dsb	sy
 80098a8:	60fb      	str	r3, [r7, #12]
}
 80098aa:	bf00      	nop
 80098ac:	e7fe      	b.n	80098ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d10a      	bne.n	80098cc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80098b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ba:	f383 8811 	msr	BASEPRI, r3
 80098be:	f3bf 8f6f 	isb	sy
 80098c2:	f3bf 8f4f 	dsb	sy
 80098c6:	60bb      	str	r3, [r7, #8]
}
 80098c8:	bf00      	nop
 80098ca:	e7fe      	b.n	80098ca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098d0:	1e5a      	subs	r2, r3, #1
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098de:	429a      	cmp	r2, r3
 80098e0:	d02c      	beq.n	800993c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d128      	bne.n	800993c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	3304      	adds	r3, #4
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7fe fc70 	bl	80081d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009900:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800990c:	4b0f      	ldr	r3, [pc, #60]	; (800994c <xTaskPriorityDisinherit+0xd4>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	429a      	cmp	r2, r3
 8009912:	d903      	bls.n	800991c <xTaskPriorityDisinherit+0xa4>
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009918:	4a0c      	ldr	r2, [pc, #48]	; (800994c <xTaskPriorityDisinherit+0xd4>)
 800991a:	6013      	str	r3, [r2, #0]
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009920:	4613      	mov	r3, r2
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	4413      	add	r3, r2
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	4a09      	ldr	r2, [pc, #36]	; (8009950 <xTaskPriorityDisinherit+0xd8>)
 800992a:	441a      	add	r2, r3
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	3304      	adds	r3, #4
 8009930:	4619      	mov	r1, r3
 8009932:	4610      	mov	r0, r2
 8009934:	f7fe fbf1 	bl	800811a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009938:	2301      	movs	r3, #1
 800993a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800993c:	697b      	ldr	r3, [r7, #20]
	}
 800993e:	4618      	mov	r0, r3
 8009940:	3718      	adds	r7, #24
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	2000155c 	.word	0x2000155c
 800994c:	20001a38 	.word	0x20001a38
 8009950:	20001560 	.word	0x20001560

08009954 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800995e:	4b21      	ldr	r3, [pc, #132]	; (80099e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009964:	4b20      	ldr	r3, [pc, #128]	; (80099e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	3304      	adds	r3, #4
 800996a:	4618      	mov	r0, r3
 800996c:	f7fe fc32 	bl	80081d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009976:	d10a      	bne.n	800998e <prvAddCurrentTaskToDelayedList+0x3a>
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d007      	beq.n	800998e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800997e:	4b1a      	ldr	r3, [pc, #104]	; (80099e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	3304      	adds	r3, #4
 8009984:	4619      	mov	r1, r3
 8009986:	4819      	ldr	r0, [pc, #100]	; (80099ec <prvAddCurrentTaskToDelayedList+0x98>)
 8009988:	f7fe fbc7 	bl	800811a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800998c:	e026      	b.n	80099dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800998e:	68fa      	ldr	r2, [r7, #12]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4413      	add	r3, r2
 8009994:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009996:	4b14      	ldr	r3, [pc, #80]	; (80099e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	68ba      	ldr	r2, [r7, #8]
 800999c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800999e:	68ba      	ldr	r2, [r7, #8]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d209      	bcs.n	80099ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099a6:	4b12      	ldr	r3, [pc, #72]	; (80099f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	4b0f      	ldr	r3, [pc, #60]	; (80099e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	3304      	adds	r3, #4
 80099b0:	4619      	mov	r1, r3
 80099b2:	4610      	mov	r0, r2
 80099b4:	f7fe fbd5 	bl	8008162 <vListInsert>
}
 80099b8:	e010      	b.n	80099dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099ba:	4b0e      	ldr	r3, [pc, #56]	; (80099f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	4b0a      	ldr	r3, [pc, #40]	; (80099e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	3304      	adds	r3, #4
 80099c4:	4619      	mov	r1, r3
 80099c6:	4610      	mov	r0, r2
 80099c8:	f7fe fbcb 	bl	8008162 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80099cc:	4b0a      	ldr	r3, [pc, #40]	; (80099f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	68ba      	ldr	r2, [r7, #8]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d202      	bcs.n	80099dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80099d6:	4a08      	ldr	r2, [pc, #32]	; (80099f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	6013      	str	r3, [r2, #0]
}
 80099dc:	bf00      	nop
 80099de:	3710      	adds	r7, #16
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}
 80099e4:	20001a34 	.word	0x20001a34
 80099e8:	2000155c 	.word	0x2000155c
 80099ec:	20001a1c 	.word	0x20001a1c
 80099f0:	200019ec 	.word	0x200019ec
 80099f4:	200019e8 	.word	0x200019e8
 80099f8:	20001a50 	.word	0x20001a50

080099fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b08a      	sub	sp, #40	; 0x28
 8009a00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009a02:	2300      	movs	r3, #0
 8009a04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009a06:	f000 fb07 	bl	800a018 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009a0a:	4b1c      	ldr	r3, [pc, #112]	; (8009a7c <xTimerCreateTimerTask+0x80>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d021      	beq.n	8009a56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009a12:	2300      	movs	r3, #0
 8009a14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009a16:	2300      	movs	r3, #0
 8009a18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009a1a:	1d3a      	adds	r2, r7, #4
 8009a1c:	f107 0108 	add.w	r1, r7, #8
 8009a20:	f107 030c 	add.w	r3, r7, #12
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7fe fb31 	bl	800808c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009a2a:	6879      	ldr	r1, [r7, #4]
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	68fa      	ldr	r2, [r7, #12]
 8009a30:	9202      	str	r2, [sp, #8]
 8009a32:	9301      	str	r3, [sp, #4]
 8009a34:	2302      	movs	r3, #2
 8009a36:	9300      	str	r3, [sp, #0]
 8009a38:	2300      	movs	r3, #0
 8009a3a:	460a      	mov	r2, r1
 8009a3c:	4910      	ldr	r1, [pc, #64]	; (8009a80 <xTimerCreateTimerTask+0x84>)
 8009a3e:	4811      	ldr	r0, [pc, #68]	; (8009a84 <xTimerCreateTimerTask+0x88>)
 8009a40:	f7ff f8de 	bl	8008c00 <xTaskCreateStatic>
 8009a44:	4603      	mov	r3, r0
 8009a46:	4a10      	ldr	r2, [pc, #64]	; (8009a88 <xTimerCreateTimerTask+0x8c>)
 8009a48:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009a4a:	4b0f      	ldr	r3, [pc, #60]	; (8009a88 <xTimerCreateTimerTask+0x8c>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d001      	beq.n	8009a56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009a52:	2301      	movs	r3, #1
 8009a54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d10a      	bne.n	8009a72 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a60:	f383 8811 	msr	BASEPRI, r3
 8009a64:	f3bf 8f6f 	isb	sy
 8009a68:	f3bf 8f4f 	dsb	sy
 8009a6c:	613b      	str	r3, [r7, #16]
}
 8009a6e:	bf00      	nop
 8009a70:	e7fe      	b.n	8009a70 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009a72:	697b      	ldr	r3, [r7, #20]
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3718      	adds	r7, #24
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}
 8009a7c:	20001a8c 	.word	0x20001a8c
 8009a80:	0800ae98 	.word	0x0800ae98
 8009a84:	08009bc1 	.word	0x08009bc1
 8009a88:	20001a90 	.word	0x20001a90

08009a8c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b08a      	sub	sp, #40	; 0x28
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	60f8      	str	r0, [r7, #12]
 8009a94:	60b9      	str	r1, [r7, #8]
 8009a96:	607a      	str	r2, [r7, #4]
 8009a98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d10a      	bne.n	8009aba <xTimerGenericCommand+0x2e>
	__asm volatile
 8009aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa8:	f383 8811 	msr	BASEPRI, r3
 8009aac:	f3bf 8f6f 	isb	sy
 8009ab0:	f3bf 8f4f 	dsb	sy
 8009ab4:	623b      	str	r3, [r7, #32]
}
 8009ab6:	bf00      	nop
 8009ab8:	e7fe      	b.n	8009ab8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009aba:	4b1a      	ldr	r3, [pc, #104]	; (8009b24 <xTimerGenericCommand+0x98>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d02a      	beq.n	8009b18 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	2b05      	cmp	r3, #5
 8009ad2:	dc18      	bgt.n	8009b06 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009ad4:	f7ff feb2 	bl	800983c <xTaskGetSchedulerState>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2b02      	cmp	r3, #2
 8009adc:	d109      	bne.n	8009af2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009ade:	4b11      	ldr	r3, [pc, #68]	; (8009b24 <xTimerGenericCommand+0x98>)
 8009ae0:	6818      	ldr	r0, [r3, #0]
 8009ae2:	f107 0110 	add.w	r1, r7, #16
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009aea:	f7fe fca1 	bl	8008430 <xQueueGenericSend>
 8009aee:	6278      	str	r0, [r7, #36]	; 0x24
 8009af0:	e012      	b.n	8009b18 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009af2:	4b0c      	ldr	r3, [pc, #48]	; (8009b24 <xTimerGenericCommand+0x98>)
 8009af4:	6818      	ldr	r0, [r3, #0]
 8009af6:	f107 0110 	add.w	r1, r7, #16
 8009afa:	2300      	movs	r3, #0
 8009afc:	2200      	movs	r2, #0
 8009afe:	f7fe fc97 	bl	8008430 <xQueueGenericSend>
 8009b02:	6278      	str	r0, [r7, #36]	; 0x24
 8009b04:	e008      	b.n	8009b18 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009b06:	4b07      	ldr	r3, [pc, #28]	; (8009b24 <xTimerGenericCommand+0x98>)
 8009b08:	6818      	ldr	r0, [r3, #0]
 8009b0a:	f107 0110 	add.w	r1, r7, #16
 8009b0e:	2300      	movs	r3, #0
 8009b10:	683a      	ldr	r2, [r7, #0]
 8009b12:	f7fe fd8b 	bl	800862c <xQueueGenericSendFromISR>
 8009b16:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3728      	adds	r7, #40	; 0x28
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop
 8009b24:	20001a8c 	.word	0x20001a8c

08009b28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b088      	sub	sp, #32
 8009b2c:	af02      	add	r7, sp, #8
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b32:	4b22      	ldr	r3, [pc, #136]	; (8009bbc <prvProcessExpiredTimer+0x94>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	68db      	ldr	r3, [r3, #12]
 8009b38:	68db      	ldr	r3, [r3, #12]
 8009b3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	3304      	adds	r3, #4
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7fe fb47 	bl	80081d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b4c:	f003 0304 	and.w	r3, r3, #4
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d022      	beq.n	8009b9a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	699a      	ldr	r2, [r3, #24]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	18d1      	adds	r1, r2, r3
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	683a      	ldr	r2, [r7, #0]
 8009b60:	6978      	ldr	r0, [r7, #20]
 8009b62:	f000 f8d1 	bl	8009d08 <prvInsertTimerInActiveList>
 8009b66:	4603      	mov	r3, r0
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d01f      	beq.n	8009bac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	9300      	str	r3, [sp, #0]
 8009b70:	2300      	movs	r3, #0
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	2100      	movs	r1, #0
 8009b76:	6978      	ldr	r0, [r7, #20]
 8009b78:	f7ff ff88 	bl	8009a8c <xTimerGenericCommand>
 8009b7c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d113      	bne.n	8009bac <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b88:	f383 8811 	msr	BASEPRI, r3
 8009b8c:	f3bf 8f6f 	isb	sy
 8009b90:	f3bf 8f4f 	dsb	sy
 8009b94:	60fb      	str	r3, [r7, #12]
}
 8009b96:	bf00      	nop
 8009b98:	e7fe      	b.n	8009b98 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ba0:	f023 0301 	bic.w	r3, r3, #1
 8009ba4:	b2da      	uxtb	r2, r3
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	6a1b      	ldr	r3, [r3, #32]
 8009bb0:	6978      	ldr	r0, [r7, #20]
 8009bb2:	4798      	blx	r3
}
 8009bb4:	bf00      	nop
 8009bb6:	3718      	adds	r7, #24
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}
 8009bbc:	20001a84 	.word	0x20001a84

08009bc0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b084      	sub	sp, #16
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009bc8:	f107 0308 	add.w	r3, r7, #8
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f000 f857 	bl	8009c80 <prvGetNextExpireTime>
 8009bd2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	68f8      	ldr	r0, [r7, #12]
 8009bda:	f000 f803 	bl	8009be4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009bde:	f000 f8d5 	bl	8009d8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009be2:	e7f1      	b.n	8009bc8 <prvTimerTask+0x8>

08009be4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b084      	sub	sp, #16
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009bee:	f7ff fa43 	bl	8009078 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009bf2:	f107 0308 	add.w	r3, r7, #8
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f000 f866 	bl	8009cc8 <prvSampleTimeNow>
 8009bfc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d130      	bne.n	8009c66 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d10a      	bne.n	8009c20 <prvProcessTimerOrBlockTask+0x3c>
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d806      	bhi.n	8009c20 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009c12:	f7ff fa3f 	bl	8009094 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009c16:	68f9      	ldr	r1, [r7, #12]
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f7ff ff85 	bl	8009b28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009c1e:	e024      	b.n	8009c6a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d008      	beq.n	8009c38 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009c26:	4b13      	ldr	r3, [pc, #76]	; (8009c74 <prvProcessTimerOrBlockTask+0x90>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d101      	bne.n	8009c34 <prvProcessTimerOrBlockTask+0x50>
 8009c30:	2301      	movs	r3, #1
 8009c32:	e000      	b.n	8009c36 <prvProcessTimerOrBlockTask+0x52>
 8009c34:	2300      	movs	r3, #0
 8009c36:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009c38:	4b0f      	ldr	r3, [pc, #60]	; (8009c78 <prvProcessTimerOrBlockTask+0x94>)
 8009c3a:	6818      	ldr	r0, [r3, #0]
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	1ad3      	subs	r3, r2, r3
 8009c42:	683a      	ldr	r2, [r7, #0]
 8009c44:	4619      	mov	r1, r3
 8009c46:	f7fe ffa7 	bl	8008b98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009c4a:	f7ff fa23 	bl	8009094 <xTaskResumeAll>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d10a      	bne.n	8009c6a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009c54:	4b09      	ldr	r3, [pc, #36]	; (8009c7c <prvProcessTimerOrBlockTask+0x98>)
 8009c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c5a:	601a      	str	r2, [r3, #0]
 8009c5c:	f3bf 8f4f 	dsb	sy
 8009c60:	f3bf 8f6f 	isb	sy
}
 8009c64:	e001      	b.n	8009c6a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009c66:	f7ff fa15 	bl	8009094 <xTaskResumeAll>
}
 8009c6a:	bf00      	nop
 8009c6c:	3710      	adds	r7, #16
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	20001a88 	.word	0x20001a88
 8009c78:	20001a8c 	.word	0x20001a8c
 8009c7c:	e000ed04 	.word	0xe000ed04

08009c80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009c80:	b480      	push	{r7}
 8009c82:	b085      	sub	sp, #20
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009c88:	4b0e      	ldr	r3, [pc, #56]	; (8009cc4 <prvGetNextExpireTime+0x44>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d101      	bne.n	8009c96 <prvGetNextExpireTime+0x16>
 8009c92:	2201      	movs	r2, #1
 8009c94:	e000      	b.n	8009c98 <prvGetNextExpireTime+0x18>
 8009c96:	2200      	movs	r2, #0
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d105      	bne.n	8009cb0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ca4:	4b07      	ldr	r3, [pc, #28]	; (8009cc4 <prvGetNextExpireTime+0x44>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	68db      	ldr	r3, [r3, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	60fb      	str	r3, [r7, #12]
 8009cae:	e001      	b.n	8009cb4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3714      	adds	r7, #20
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr
 8009cc2:	bf00      	nop
 8009cc4:	20001a84 	.word	0x20001a84

08009cc8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b084      	sub	sp, #16
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009cd0:	f7ff fa7e 	bl	80091d0 <xTaskGetTickCount>
 8009cd4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009cd6:	4b0b      	ldr	r3, [pc, #44]	; (8009d04 <prvSampleTimeNow+0x3c>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	68fa      	ldr	r2, [r7, #12]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d205      	bcs.n	8009cec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009ce0:	f000 f936 	bl	8009f50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	601a      	str	r2, [r3, #0]
 8009cea:	e002      	b.n	8009cf2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009cf2:	4a04      	ldr	r2, [pc, #16]	; (8009d04 <prvSampleTimeNow+0x3c>)
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3710      	adds	r7, #16
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	20001a94 	.word	0x20001a94

08009d08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b086      	sub	sp, #24
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	607a      	str	r2, [r7, #4]
 8009d14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009d16:	2300      	movs	r3, #0
 8009d18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	68ba      	ldr	r2, [r7, #8]
 8009d1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	68fa      	ldr	r2, [r7, #12]
 8009d24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009d26:	68ba      	ldr	r2, [r7, #8]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d812      	bhi.n	8009d54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	1ad2      	subs	r2, r2, r3
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	699b      	ldr	r3, [r3, #24]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d302      	bcc.n	8009d42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	617b      	str	r3, [r7, #20]
 8009d40:	e01b      	b.n	8009d7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009d42:	4b10      	ldr	r3, [pc, #64]	; (8009d84 <prvInsertTimerInActiveList+0x7c>)
 8009d44:	681a      	ldr	r2, [r3, #0]
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	3304      	adds	r3, #4
 8009d4a:	4619      	mov	r1, r3
 8009d4c:	4610      	mov	r0, r2
 8009d4e:	f7fe fa08 	bl	8008162 <vListInsert>
 8009d52:	e012      	b.n	8009d7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d206      	bcs.n	8009d6a <prvInsertTimerInActiveList+0x62>
 8009d5c:	68ba      	ldr	r2, [r7, #8]
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d302      	bcc.n	8009d6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009d64:	2301      	movs	r3, #1
 8009d66:	617b      	str	r3, [r7, #20]
 8009d68:	e007      	b.n	8009d7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d6a:	4b07      	ldr	r3, [pc, #28]	; (8009d88 <prvInsertTimerInActiveList+0x80>)
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	3304      	adds	r3, #4
 8009d72:	4619      	mov	r1, r3
 8009d74:	4610      	mov	r0, r2
 8009d76:	f7fe f9f4 	bl	8008162 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009d7a:	697b      	ldr	r3, [r7, #20]
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3718      	adds	r7, #24
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	20001a88 	.word	0x20001a88
 8009d88:	20001a84 	.word	0x20001a84

08009d8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b08e      	sub	sp, #56	; 0x38
 8009d90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d92:	e0ca      	b.n	8009f2a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	da18      	bge.n	8009dcc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009d9a:	1d3b      	adds	r3, r7, #4
 8009d9c:	3304      	adds	r3, #4
 8009d9e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d10a      	bne.n	8009dbc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009daa:	f383 8811 	msr	BASEPRI, r3
 8009dae:	f3bf 8f6f 	isb	sy
 8009db2:	f3bf 8f4f 	dsb	sy
 8009db6:	61fb      	str	r3, [r7, #28]
}
 8009db8:	bf00      	nop
 8009dba:	e7fe      	b.n	8009dba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009dc2:	6850      	ldr	r0, [r2, #4]
 8009dc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009dc6:	6892      	ldr	r2, [r2, #8]
 8009dc8:	4611      	mov	r1, r2
 8009dca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	f2c0 80aa 	blt.w	8009f28 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dda:	695b      	ldr	r3, [r3, #20]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d004      	beq.n	8009dea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de2:	3304      	adds	r3, #4
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7fe f9f5 	bl	80081d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009dea:	463b      	mov	r3, r7
 8009dec:	4618      	mov	r0, r3
 8009dee:	f7ff ff6b 	bl	8009cc8 <prvSampleTimeNow>
 8009df2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2b09      	cmp	r3, #9
 8009df8:	f200 8097 	bhi.w	8009f2a <prvProcessReceivedCommands+0x19e>
 8009dfc:	a201      	add	r2, pc, #4	; (adr r2, 8009e04 <prvProcessReceivedCommands+0x78>)
 8009dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e02:	bf00      	nop
 8009e04:	08009e2d 	.word	0x08009e2d
 8009e08:	08009e2d 	.word	0x08009e2d
 8009e0c:	08009e2d 	.word	0x08009e2d
 8009e10:	08009ea1 	.word	0x08009ea1
 8009e14:	08009eb5 	.word	0x08009eb5
 8009e18:	08009eff 	.word	0x08009eff
 8009e1c:	08009e2d 	.word	0x08009e2d
 8009e20:	08009e2d 	.word	0x08009e2d
 8009e24:	08009ea1 	.word	0x08009ea1
 8009e28:	08009eb5 	.word	0x08009eb5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e32:	f043 0301 	orr.w	r3, r3, #1
 8009e36:	b2da      	uxtb	r2, r3
 8009e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009e3e:	68ba      	ldr	r2, [r7, #8]
 8009e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e42:	699b      	ldr	r3, [r3, #24]
 8009e44:	18d1      	adds	r1, r2, r3
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e4c:	f7ff ff5c 	bl	8009d08 <prvInsertTimerInActiveList>
 8009e50:	4603      	mov	r3, r0
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d069      	beq.n	8009f2a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e58:	6a1b      	ldr	r3, [r3, #32]
 8009e5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e64:	f003 0304 	and.w	r3, r3, #4
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d05e      	beq.n	8009f2a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009e6c:	68ba      	ldr	r2, [r7, #8]
 8009e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e70:	699b      	ldr	r3, [r3, #24]
 8009e72:	441a      	add	r2, r3
 8009e74:	2300      	movs	r3, #0
 8009e76:	9300      	str	r3, [sp, #0]
 8009e78:	2300      	movs	r3, #0
 8009e7a:	2100      	movs	r1, #0
 8009e7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e7e:	f7ff fe05 	bl	8009a8c <xTimerGenericCommand>
 8009e82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009e84:	6a3b      	ldr	r3, [r7, #32]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d14f      	bne.n	8009f2a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8e:	f383 8811 	msr	BASEPRI, r3
 8009e92:	f3bf 8f6f 	isb	sy
 8009e96:	f3bf 8f4f 	dsb	sy
 8009e9a:	61bb      	str	r3, [r7, #24]
}
 8009e9c:	bf00      	nop
 8009e9e:	e7fe      	b.n	8009e9e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ea6:	f023 0301 	bic.w	r3, r3, #1
 8009eaa:	b2da      	uxtb	r2, r3
 8009eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009eb2:	e03a      	b.n	8009f2a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009eba:	f043 0301 	orr.w	r3, r3, #1
 8009ebe:	b2da      	uxtb	r2, r3
 8009ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009ec6:	68ba      	ldr	r2, [r7, #8]
 8009ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ece:	699b      	ldr	r3, [r3, #24]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d10a      	bne.n	8009eea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed8:	f383 8811 	msr	BASEPRI, r3
 8009edc:	f3bf 8f6f 	isb	sy
 8009ee0:	f3bf 8f4f 	dsb	sy
 8009ee4:	617b      	str	r3, [r7, #20]
}
 8009ee6:	bf00      	nop
 8009ee8:	e7fe      	b.n	8009ee8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eec:	699a      	ldr	r2, [r3, #24]
 8009eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef0:	18d1      	adds	r1, r2, r3
 8009ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ef6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ef8:	f7ff ff06 	bl	8009d08 <prvInsertTimerInActiveList>
					break;
 8009efc:	e015      	b.n	8009f2a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f04:	f003 0302 	and.w	r3, r3, #2
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d103      	bne.n	8009f14 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009f0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f0e:	f000 fbdf 	bl	800a6d0 <vPortFree>
 8009f12:	e00a      	b.n	8009f2a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f1a:	f023 0301 	bic.w	r3, r3, #1
 8009f1e:	b2da      	uxtb	r2, r3
 8009f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009f26:	e000      	b.n	8009f2a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009f28:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f2a:	4b08      	ldr	r3, [pc, #32]	; (8009f4c <prvProcessReceivedCommands+0x1c0>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	1d39      	adds	r1, r7, #4
 8009f30:	2200      	movs	r2, #0
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7fe fc16 	bl	8008764 <xQueueReceive>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	f47f af2a 	bne.w	8009d94 <prvProcessReceivedCommands+0x8>
	}
}
 8009f40:	bf00      	nop
 8009f42:	bf00      	nop
 8009f44:	3730      	adds	r7, #48	; 0x30
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
 8009f4a:	bf00      	nop
 8009f4c:	20001a8c 	.word	0x20001a8c

08009f50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b088      	sub	sp, #32
 8009f54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f56:	e048      	b.n	8009fea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f58:	4b2d      	ldr	r3, [pc, #180]	; (800a010 <prvSwitchTimerLists+0xc0>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	68db      	ldr	r3, [r3, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f62:	4b2b      	ldr	r3, [pc, #172]	; (800a010 <prvSwitchTimerLists+0xc0>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	68db      	ldr	r3, [r3, #12]
 8009f68:	68db      	ldr	r3, [r3, #12]
 8009f6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	3304      	adds	r3, #4
 8009f70:	4618      	mov	r0, r3
 8009f72:	f7fe f92f 	bl	80081d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	6a1b      	ldr	r3, [r3, #32]
 8009f7a:	68f8      	ldr	r0, [r7, #12]
 8009f7c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f84:	f003 0304 	and.w	r3, r3, #4
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d02e      	beq.n	8009fea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	699b      	ldr	r3, [r3, #24]
 8009f90:	693a      	ldr	r2, [r7, #16]
 8009f92:	4413      	add	r3, r2
 8009f94:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009f96:	68ba      	ldr	r2, [r7, #8]
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d90e      	bls.n	8009fbc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	68ba      	ldr	r2, [r7, #8]
 8009fa2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	68fa      	ldr	r2, [r7, #12]
 8009fa8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009faa:	4b19      	ldr	r3, [pc, #100]	; (800a010 <prvSwitchTimerLists+0xc0>)
 8009fac:	681a      	ldr	r2, [r3, #0]
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	3304      	adds	r3, #4
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	4610      	mov	r0, r2
 8009fb6:	f7fe f8d4 	bl	8008162 <vListInsert>
 8009fba:	e016      	b.n	8009fea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	9300      	str	r3, [sp, #0]
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	693a      	ldr	r2, [r7, #16]
 8009fc4:	2100      	movs	r1, #0
 8009fc6:	68f8      	ldr	r0, [r7, #12]
 8009fc8:	f7ff fd60 	bl	8009a8c <xTimerGenericCommand>
 8009fcc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d10a      	bne.n	8009fea <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd8:	f383 8811 	msr	BASEPRI, r3
 8009fdc:	f3bf 8f6f 	isb	sy
 8009fe0:	f3bf 8f4f 	dsb	sy
 8009fe4:	603b      	str	r3, [r7, #0]
}
 8009fe6:	bf00      	nop
 8009fe8:	e7fe      	b.n	8009fe8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009fea:	4b09      	ldr	r3, [pc, #36]	; (800a010 <prvSwitchTimerLists+0xc0>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d1b1      	bne.n	8009f58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009ff4:	4b06      	ldr	r3, [pc, #24]	; (800a010 <prvSwitchTimerLists+0xc0>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009ffa:	4b06      	ldr	r3, [pc, #24]	; (800a014 <prvSwitchTimerLists+0xc4>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a04      	ldr	r2, [pc, #16]	; (800a010 <prvSwitchTimerLists+0xc0>)
 800a000:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a002:	4a04      	ldr	r2, [pc, #16]	; (800a014 <prvSwitchTimerLists+0xc4>)
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	6013      	str	r3, [r2, #0]
}
 800a008:	bf00      	nop
 800a00a:	3718      	adds	r7, #24
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}
 800a010:	20001a84 	.word	0x20001a84
 800a014:	20001a88 	.word	0x20001a88

0800a018 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a01e:	f000 f969 	bl	800a2f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a022:	4b15      	ldr	r3, [pc, #84]	; (800a078 <prvCheckForValidListAndQueue+0x60>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d120      	bne.n	800a06c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a02a:	4814      	ldr	r0, [pc, #80]	; (800a07c <prvCheckForValidListAndQueue+0x64>)
 800a02c:	f7fe f848 	bl	80080c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a030:	4813      	ldr	r0, [pc, #76]	; (800a080 <prvCheckForValidListAndQueue+0x68>)
 800a032:	f7fe f845 	bl	80080c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a036:	4b13      	ldr	r3, [pc, #76]	; (800a084 <prvCheckForValidListAndQueue+0x6c>)
 800a038:	4a10      	ldr	r2, [pc, #64]	; (800a07c <prvCheckForValidListAndQueue+0x64>)
 800a03a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a03c:	4b12      	ldr	r3, [pc, #72]	; (800a088 <prvCheckForValidListAndQueue+0x70>)
 800a03e:	4a10      	ldr	r2, [pc, #64]	; (800a080 <prvCheckForValidListAndQueue+0x68>)
 800a040:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a042:	2300      	movs	r3, #0
 800a044:	9300      	str	r3, [sp, #0]
 800a046:	4b11      	ldr	r3, [pc, #68]	; (800a08c <prvCheckForValidListAndQueue+0x74>)
 800a048:	4a11      	ldr	r2, [pc, #68]	; (800a090 <prvCheckForValidListAndQueue+0x78>)
 800a04a:	2110      	movs	r1, #16
 800a04c:	200a      	movs	r0, #10
 800a04e:	f7fe f953 	bl	80082f8 <xQueueGenericCreateStatic>
 800a052:	4603      	mov	r3, r0
 800a054:	4a08      	ldr	r2, [pc, #32]	; (800a078 <prvCheckForValidListAndQueue+0x60>)
 800a056:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a058:	4b07      	ldr	r3, [pc, #28]	; (800a078 <prvCheckForValidListAndQueue+0x60>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d005      	beq.n	800a06c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a060:	4b05      	ldr	r3, [pc, #20]	; (800a078 <prvCheckForValidListAndQueue+0x60>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	490b      	ldr	r1, [pc, #44]	; (800a094 <prvCheckForValidListAndQueue+0x7c>)
 800a066:	4618      	mov	r0, r3
 800a068:	f7fe fd6c 	bl	8008b44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a06c:	f000 f972 	bl	800a354 <vPortExitCritical>
}
 800a070:	bf00      	nop
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
 800a076:	bf00      	nop
 800a078:	20001a8c 	.word	0x20001a8c
 800a07c:	20001a5c 	.word	0x20001a5c
 800a080:	20001a70 	.word	0x20001a70
 800a084:	20001a84 	.word	0x20001a84
 800a088:	20001a88 	.word	0x20001a88
 800a08c:	20001b38 	.word	0x20001b38
 800a090:	20001a98 	.word	0x20001a98
 800a094:	0800aea0 	.word	0x0800aea0

0800a098 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a098:	b480      	push	{r7}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	3b04      	subs	r3, #4
 800a0a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a0b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	3b04      	subs	r3, #4
 800a0b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	f023 0201 	bic.w	r2, r3, #1
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	3b04      	subs	r3, #4
 800a0c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a0c8:	4a0c      	ldr	r2, [pc, #48]	; (800a0fc <pxPortInitialiseStack+0x64>)
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	3b14      	subs	r3, #20
 800a0d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	3b04      	subs	r3, #4
 800a0de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f06f 0202 	mvn.w	r2, #2
 800a0e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	3b20      	subs	r3, #32
 800a0ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3714      	adds	r7, #20
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr
 800a0fc:	0800a101 	.word	0x0800a101

0800a100 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a100:	b480      	push	{r7}
 800a102:	b085      	sub	sp, #20
 800a104:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a106:	2300      	movs	r3, #0
 800a108:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a10a:	4b12      	ldr	r3, [pc, #72]	; (800a154 <prvTaskExitError+0x54>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a112:	d00a      	beq.n	800a12a <prvTaskExitError+0x2a>
	__asm volatile
 800a114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a118:	f383 8811 	msr	BASEPRI, r3
 800a11c:	f3bf 8f6f 	isb	sy
 800a120:	f3bf 8f4f 	dsb	sy
 800a124:	60fb      	str	r3, [r7, #12]
}
 800a126:	bf00      	nop
 800a128:	e7fe      	b.n	800a128 <prvTaskExitError+0x28>
	__asm volatile
 800a12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a12e:	f383 8811 	msr	BASEPRI, r3
 800a132:	f3bf 8f6f 	isb	sy
 800a136:	f3bf 8f4f 	dsb	sy
 800a13a:	60bb      	str	r3, [r7, #8]
}
 800a13c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a13e:	bf00      	nop
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d0fc      	beq.n	800a140 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a146:	bf00      	nop
 800a148:	bf00      	nop
 800a14a:	3714      	adds	r7, #20
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr
 800a154:	2000001c 	.word	0x2000001c
	...

0800a160 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a160:	4b07      	ldr	r3, [pc, #28]	; (800a180 <pxCurrentTCBConst2>)
 800a162:	6819      	ldr	r1, [r3, #0]
 800a164:	6808      	ldr	r0, [r1, #0]
 800a166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a16a:	f380 8809 	msr	PSP, r0
 800a16e:	f3bf 8f6f 	isb	sy
 800a172:	f04f 0000 	mov.w	r0, #0
 800a176:	f380 8811 	msr	BASEPRI, r0
 800a17a:	4770      	bx	lr
 800a17c:	f3af 8000 	nop.w

0800a180 <pxCurrentTCBConst2>:
 800a180:	2000155c 	.word	0x2000155c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a184:	bf00      	nop
 800a186:	bf00      	nop

0800a188 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a188:	4808      	ldr	r0, [pc, #32]	; (800a1ac <prvPortStartFirstTask+0x24>)
 800a18a:	6800      	ldr	r0, [r0, #0]
 800a18c:	6800      	ldr	r0, [r0, #0]
 800a18e:	f380 8808 	msr	MSP, r0
 800a192:	f04f 0000 	mov.w	r0, #0
 800a196:	f380 8814 	msr	CONTROL, r0
 800a19a:	b662      	cpsie	i
 800a19c:	b661      	cpsie	f
 800a19e:	f3bf 8f4f 	dsb	sy
 800a1a2:	f3bf 8f6f 	isb	sy
 800a1a6:	df00      	svc	0
 800a1a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a1aa:	bf00      	nop
 800a1ac:	e000ed08 	.word	0xe000ed08

0800a1b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b086      	sub	sp, #24
 800a1b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a1b6:	4b46      	ldr	r3, [pc, #280]	; (800a2d0 <xPortStartScheduler+0x120>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a46      	ldr	r2, [pc, #280]	; (800a2d4 <xPortStartScheduler+0x124>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d10a      	bne.n	800a1d6 <xPortStartScheduler+0x26>
	__asm volatile
 800a1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c4:	f383 8811 	msr	BASEPRI, r3
 800a1c8:	f3bf 8f6f 	isb	sy
 800a1cc:	f3bf 8f4f 	dsb	sy
 800a1d0:	613b      	str	r3, [r7, #16]
}
 800a1d2:	bf00      	nop
 800a1d4:	e7fe      	b.n	800a1d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a1d6:	4b3e      	ldr	r3, [pc, #248]	; (800a2d0 <xPortStartScheduler+0x120>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a3f      	ldr	r2, [pc, #252]	; (800a2d8 <xPortStartScheduler+0x128>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d10a      	bne.n	800a1f6 <xPortStartScheduler+0x46>
	__asm volatile
 800a1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e4:	f383 8811 	msr	BASEPRI, r3
 800a1e8:	f3bf 8f6f 	isb	sy
 800a1ec:	f3bf 8f4f 	dsb	sy
 800a1f0:	60fb      	str	r3, [r7, #12]
}
 800a1f2:	bf00      	nop
 800a1f4:	e7fe      	b.n	800a1f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a1f6:	4b39      	ldr	r3, [pc, #228]	; (800a2dc <xPortStartScheduler+0x12c>)
 800a1f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	b2db      	uxtb	r3, r3
 800a200:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	22ff      	movs	r2, #255	; 0xff
 800a206:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a210:	78fb      	ldrb	r3, [r7, #3]
 800a212:	b2db      	uxtb	r3, r3
 800a214:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a218:	b2da      	uxtb	r2, r3
 800a21a:	4b31      	ldr	r3, [pc, #196]	; (800a2e0 <xPortStartScheduler+0x130>)
 800a21c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a21e:	4b31      	ldr	r3, [pc, #196]	; (800a2e4 <xPortStartScheduler+0x134>)
 800a220:	2207      	movs	r2, #7
 800a222:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a224:	e009      	b.n	800a23a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a226:	4b2f      	ldr	r3, [pc, #188]	; (800a2e4 <xPortStartScheduler+0x134>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	3b01      	subs	r3, #1
 800a22c:	4a2d      	ldr	r2, [pc, #180]	; (800a2e4 <xPortStartScheduler+0x134>)
 800a22e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a230:	78fb      	ldrb	r3, [r7, #3]
 800a232:	b2db      	uxtb	r3, r3
 800a234:	005b      	lsls	r3, r3, #1
 800a236:	b2db      	uxtb	r3, r3
 800a238:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a23a:	78fb      	ldrb	r3, [r7, #3]
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a242:	2b80      	cmp	r3, #128	; 0x80
 800a244:	d0ef      	beq.n	800a226 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a246:	4b27      	ldr	r3, [pc, #156]	; (800a2e4 <xPortStartScheduler+0x134>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f1c3 0307 	rsb	r3, r3, #7
 800a24e:	2b04      	cmp	r3, #4
 800a250:	d00a      	beq.n	800a268 <xPortStartScheduler+0xb8>
	__asm volatile
 800a252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a256:	f383 8811 	msr	BASEPRI, r3
 800a25a:	f3bf 8f6f 	isb	sy
 800a25e:	f3bf 8f4f 	dsb	sy
 800a262:	60bb      	str	r3, [r7, #8]
}
 800a264:	bf00      	nop
 800a266:	e7fe      	b.n	800a266 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a268:	4b1e      	ldr	r3, [pc, #120]	; (800a2e4 <xPortStartScheduler+0x134>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	021b      	lsls	r3, r3, #8
 800a26e:	4a1d      	ldr	r2, [pc, #116]	; (800a2e4 <xPortStartScheduler+0x134>)
 800a270:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a272:	4b1c      	ldr	r3, [pc, #112]	; (800a2e4 <xPortStartScheduler+0x134>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a27a:	4a1a      	ldr	r2, [pc, #104]	; (800a2e4 <xPortStartScheduler+0x134>)
 800a27c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	b2da      	uxtb	r2, r3
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a286:	4b18      	ldr	r3, [pc, #96]	; (800a2e8 <xPortStartScheduler+0x138>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4a17      	ldr	r2, [pc, #92]	; (800a2e8 <xPortStartScheduler+0x138>)
 800a28c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a290:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a292:	4b15      	ldr	r3, [pc, #84]	; (800a2e8 <xPortStartScheduler+0x138>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4a14      	ldr	r2, [pc, #80]	; (800a2e8 <xPortStartScheduler+0x138>)
 800a298:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a29c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a29e:	f000 f8dd 	bl	800a45c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a2a2:	4b12      	ldr	r3, [pc, #72]	; (800a2ec <xPortStartScheduler+0x13c>)
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a2a8:	f000 f8fc 	bl	800a4a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a2ac:	4b10      	ldr	r3, [pc, #64]	; (800a2f0 <xPortStartScheduler+0x140>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a0f      	ldr	r2, [pc, #60]	; (800a2f0 <xPortStartScheduler+0x140>)
 800a2b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a2b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a2b8:	f7ff ff66 	bl	800a188 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a2bc:	f7ff f852 	bl	8009364 <vTaskSwitchContext>
	prvTaskExitError();
 800a2c0:	f7ff ff1e 	bl	800a100 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a2c4:	2300      	movs	r3, #0
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3718      	adds	r7, #24
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	e000ed00 	.word	0xe000ed00
 800a2d4:	410fc271 	.word	0x410fc271
 800a2d8:	410fc270 	.word	0x410fc270
 800a2dc:	e000e400 	.word	0xe000e400
 800a2e0:	20001b88 	.word	0x20001b88
 800a2e4:	20001b8c 	.word	0x20001b8c
 800a2e8:	e000ed20 	.word	0xe000ed20
 800a2ec:	2000001c 	.word	0x2000001c
 800a2f0:	e000ef34 	.word	0xe000ef34

0800a2f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b083      	sub	sp, #12
 800a2f8:	af00      	add	r7, sp, #0
	__asm volatile
 800a2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fe:	f383 8811 	msr	BASEPRI, r3
 800a302:	f3bf 8f6f 	isb	sy
 800a306:	f3bf 8f4f 	dsb	sy
 800a30a:	607b      	str	r3, [r7, #4]
}
 800a30c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a30e:	4b0f      	ldr	r3, [pc, #60]	; (800a34c <vPortEnterCritical+0x58>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	3301      	adds	r3, #1
 800a314:	4a0d      	ldr	r2, [pc, #52]	; (800a34c <vPortEnterCritical+0x58>)
 800a316:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a318:	4b0c      	ldr	r3, [pc, #48]	; (800a34c <vPortEnterCritical+0x58>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d10f      	bne.n	800a340 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a320:	4b0b      	ldr	r3, [pc, #44]	; (800a350 <vPortEnterCritical+0x5c>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	b2db      	uxtb	r3, r3
 800a326:	2b00      	cmp	r3, #0
 800a328:	d00a      	beq.n	800a340 <vPortEnterCritical+0x4c>
	__asm volatile
 800a32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32e:	f383 8811 	msr	BASEPRI, r3
 800a332:	f3bf 8f6f 	isb	sy
 800a336:	f3bf 8f4f 	dsb	sy
 800a33a:	603b      	str	r3, [r7, #0]
}
 800a33c:	bf00      	nop
 800a33e:	e7fe      	b.n	800a33e <vPortEnterCritical+0x4a>
	}
}
 800a340:	bf00      	nop
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr
 800a34c:	2000001c 	.word	0x2000001c
 800a350:	e000ed04 	.word	0xe000ed04

0800a354 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a35a:	4b12      	ldr	r3, [pc, #72]	; (800a3a4 <vPortExitCritical+0x50>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d10a      	bne.n	800a378 <vPortExitCritical+0x24>
	__asm volatile
 800a362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a366:	f383 8811 	msr	BASEPRI, r3
 800a36a:	f3bf 8f6f 	isb	sy
 800a36e:	f3bf 8f4f 	dsb	sy
 800a372:	607b      	str	r3, [r7, #4]
}
 800a374:	bf00      	nop
 800a376:	e7fe      	b.n	800a376 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a378:	4b0a      	ldr	r3, [pc, #40]	; (800a3a4 <vPortExitCritical+0x50>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	3b01      	subs	r3, #1
 800a37e:	4a09      	ldr	r2, [pc, #36]	; (800a3a4 <vPortExitCritical+0x50>)
 800a380:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a382:	4b08      	ldr	r3, [pc, #32]	; (800a3a4 <vPortExitCritical+0x50>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d105      	bne.n	800a396 <vPortExitCritical+0x42>
 800a38a:	2300      	movs	r3, #0
 800a38c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	f383 8811 	msr	BASEPRI, r3
}
 800a394:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a396:	bf00      	nop
 800a398:	370c      	adds	r7, #12
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr
 800a3a2:	bf00      	nop
 800a3a4:	2000001c 	.word	0x2000001c
	...

0800a3b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a3b0:	f3ef 8009 	mrs	r0, PSP
 800a3b4:	f3bf 8f6f 	isb	sy
 800a3b8:	4b15      	ldr	r3, [pc, #84]	; (800a410 <pxCurrentTCBConst>)
 800a3ba:	681a      	ldr	r2, [r3, #0]
 800a3bc:	f01e 0f10 	tst.w	lr, #16
 800a3c0:	bf08      	it	eq
 800a3c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a3c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ca:	6010      	str	r0, [r2, #0]
 800a3cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a3d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a3d4:	f380 8811 	msr	BASEPRI, r0
 800a3d8:	f3bf 8f4f 	dsb	sy
 800a3dc:	f3bf 8f6f 	isb	sy
 800a3e0:	f7fe ffc0 	bl	8009364 <vTaskSwitchContext>
 800a3e4:	f04f 0000 	mov.w	r0, #0
 800a3e8:	f380 8811 	msr	BASEPRI, r0
 800a3ec:	bc09      	pop	{r0, r3}
 800a3ee:	6819      	ldr	r1, [r3, #0]
 800a3f0:	6808      	ldr	r0, [r1, #0]
 800a3f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3f6:	f01e 0f10 	tst.w	lr, #16
 800a3fa:	bf08      	it	eq
 800a3fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a400:	f380 8809 	msr	PSP, r0
 800a404:	f3bf 8f6f 	isb	sy
 800a408:	4770      	bx	lr
 800a40a:	bf00      	nop
 800a40c:	f3af 8000 	nop.w

0800a410 <pxCurrentTCBConst>:
 800a410:	2000155c 	.word	0x2000155c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a414:	bf00      	nop
 800a416:	bf00      	nop

0800a418 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b082      	sub	sp, #8
 800a41c:	af00      	add	r7, sp, #0
	__asm volatile
 800a41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a422:	f383 8811 	msr	BASEPRI, r3
 800a426:	f3bf 8f6f 	isb	sy
 800a42a:	f3bf 8f4f 	dsb	sy
 800a42e:	607b      	str	r3, [r7, #4]
}
 800a430:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a432:	f7fe fedd 	bl	80091f0 <xTaskIncrementTick>
 800a436:	4603      	mov	r3, r0
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d003      	beq.n	800a444 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a43c:	4b06      	ldr	r3, [pc, #24]	; (800a458 <xPortSysTickHandler+0x40>)
 800a43e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a442:	601a      	str	r2, [r3, #0]
 800a444:	2300      	movs	r3, #0
 800a446:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	f383 8811 	msr	BASEPRI, r3
}
 800a44e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a450:	bf00      	nop
 800a452:	3708      	adds	r7, #8
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}
 800a458:	e000ed04 	.word	0xe000ed04

0800a45c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a45c:	b480      	push	{r7}
 800a45e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a460:	4b0b      	ldr	r3, [pc, #44]	; (800a490 <vPortSetupTimerInterrupt+0x34>)
 800a462:	2200      	movs	r2, #0
 800a464:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a466:	4b0b      	ldr	r3, [pc, #44]	; (800a494 <vPortSetupTimerInterrupt+0x38>)
 800a468:	2200      	movs	r2, #0
 800a46a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a46c:	4b0a      	ldr	r3, [pc, #40]	; (800a498 <vPortSetupTimerInterrupt+0x3c>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4a0a      	ldr	r2, [pc, #40]	; (800a49c <vPortSetupTimerInterrupt+0x40>)
 800a472:	fba2 2303 	umull	r2, r3, r2, r3
 800a476:	099b      	lsrs	r3, r3, #6
 800a478:	4a09      	ldr	r2, [pc, #36]	; (800a4a0 <vPortSetupTimerInterrupt+0x44>)
 800a47a:	3b01      	subs	r3, #1
 800a47c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a47e:	4b04      	ldr	r3, [pc, #16]	; (800a490 <vPortSetupTimerInterrupt+0x34>)
 800a480:	2207      	movs	r2, #7
 800a482:	601a      	str	r2, [r3, #0]
}
 800a484:	bf00      	nop
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr
 800a48e:	bf00      	nop
 800a490:	e000e010 	.word	0xe000e010
 800a494:	e000e018 	.word	0xe000e018
 800a498:	20000010 	.word	0x20000010
 800a49c:	10624dd3 	.word	0x10624dd3
 800a4a0:	e000e014 	.word	0xe000e014

0800a4a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a4a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a4b4 <vPortEnableVFP+0x10>
 800a4a8:	6801      	ldr	r1, [r0, #0]
 800a4aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a4ae:	6001      	str	r1, [r0, #0]
 800a4b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a4b2:	bf00      	nop
 800a4b4:	e000ed88 	.word	0xe000ed88

0800a4b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b085      	sub	sp, #20
 800a4bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a4be:	f3ef 8305 	mrs	r3, IPSR
 800a4c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2b0f      	cmp	r3, #15
 800a4c8:	d914      	bls.n	800a4f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a4ca:	4a17      	ldr	r2, [pc, #92]	; (800a528 <vPortValidateInterruptPriority+0x70>)
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	4413      	add	r3, r2
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a4d4:	4b15      	ldr	r3, [pc, #84]	; (800a52c <vPortValidateInterruptPriority+0x74>)
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	7afa      	ldrb	r2, [r7, #11]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d20a      	bcs.n	800a4f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e2:	f383 8811 	msr	BASEPRI, r3
 800a4e6:	f3bf 8f6f 	isb	sy
 800a4ea:	f3bf 8f4f 	dsb	sy
 800a4ee:	607b      	str	r3, [r7, #4]
}
 800a4f0:	bf00      	nop
 800a4f2:	e7fe      	b.n	800a4f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a4f4:	4b0e      	ldr	r3, [pc, #56]	; (800a530 <vPortValidateInterruptPriority+0x78>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a4fc:	4b0d      	ldr	r3, [pc, #52]	; (800a534 <vPortValidateInterruptPriority+0x7c>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	429a      	cmp	r2, r3
 800a502:	d90a      	bls.n	800a51a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a508:	f383 8811 	msr	BASEPRI, r3
 800a50c:	f3bf 8f6f 	isb	sy
 800a510:	f3bf 8f4f 	dsb	sy
 800a514:	603b      	str	r3, [r7, #0]
}
 800a516:	bf00      	nop
 800a518:	e7fe      	b.n	800a518 <vPortValidateInterruptPriority+0x60>
	}
 800a51a:	bf00      	nop
 800a51c:	3714      	adds	r7, #20
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr
 800a526:	bf00      	nop
 800a528:	e000e3f0 	.word	0xe000e3f0
 800a52c:	20001b88 	.word	0x20001b88
 800a530:	e000ed0c 	.word	0xe000ed0c
 800a534:	20001b8c 	.word	0x20001b8c

0800a538 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b08a      	sub	sp, #40	; 0x28
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a540:	2300      	movs	r3, #0
 800a542:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a544:	f7fe fd98 	bl	8009078 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a548:	4b5b      	ldr	r3, [pc, #364]	; (800a6b8 <pvPortMalloc+0x180>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d101      	bne.n	800a554 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a550:	f000 f920 	bl	800a794 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a554:	4b59      	ldr	r3, [pc, #356]	; (800a6bc <pvPortMalloc+0x184>)
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	4013      	ands	r3, r2
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	f040 8093 	bne.w	800a688 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d01d      	beq.n	800a5a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a568:	2208      	movs	r2, #8
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	4413      	add	r3, r2
 800a56e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f003 0307 	and.w	r3, r3, #7
 800a576:	2b00      	cmp	r3, #0
 800a578:	d014      	beq.n	800a5a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f023 0307 	bic.w	r3, r3, #7
 800a580:	3308      	adds	r3, #8
 800a582:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f003 0307 	and.w	r3, r3, #7
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d00a      	beq.n	800a5a4 <pvPortMalloc+0x6c>
	__asm volatile
 800a58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a592:	f383 8811 	msr	BASEPRI, r3
 800a596:	f3bf 8f6f 	isb	sy
 800a59a:	f3bf 8f4f 	dsb	sy
 800a59e:	617b      	str	r3, [r7, #20]
}
 800a5a0:	bf00      	nop
 800a5a2:	e7fe      	b.n	800a5a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d06e      	beq.n	800a688 <pvPortMalloc+0x150>
 800a5aa:	4b45      	ldr	r3, [pc, #276]	; (800a6c0 <pvPortMalloc+0x188>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d869      	bhi.n	800a688 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a5b4:	4b43      	ldr	r3, [pc, #268]	; (800a6c4 <pvPortMalloc+0x18c>)
 800a5b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a5b8:	4b42      	ldr	r3, [pc, #264]	; (800a6c4 <pvPortMalloc+0x18c>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5be:	e004      	b.n	800a5ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5cc:	685b      	ldr	r3, [r3, #4]
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d903      	bls.n	800a5dc <pvPortMalloc+0xa4>
 800a5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d1f1      	bne.n	800a5c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a5dc:	4b36      	ldr	r3, [pc, #216]	; (800a6b8 <pvPortMalloc+0x180>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d050      	beq.n	800a688 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a5e6:	6a3b      	ldr	r3, [r7, #32]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	2208      	movs	r2, #8
 800a5ec:	4413      	add	r3, r2
 800a5ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	6a3b      	ldr	r3, [r7, #32]
 800a5f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5fa:	685a      	ldr	r2, [r3, #4]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	1ad2      	subs	r2, r2, r3
 800a600:	2308      	movs	r3, #8
 800a602:	005b      	lsls	r3, r3, #1
 800a604:	429a      	cmp	r2, r3
 800a606:	d91f      	bls.n	800a648 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	4413      	add	r3, r2
 800a60e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a610:	69bb      	ldr	r3, [r7, #24]
 800a612:	f003 0307 	and.w	r3, r3, #7
 800a616:	2b00      	cmp	r3, #0
 800a618:	d00a      	beq.n	800a630 <pvPortMalloc+0xf8>
	__asm volatile
 800a61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a61e:	f383 8811 	msr	BASEPRI, r3
 800a622:	f3bf 8f6f 	isb	sy
 800a626:	f3bf 8f4f 	dsb	sy
 800a62a:	613b      	str	r3, [r7, #16]
}
 800a62c:	bf00      	nop
 800a62e:	e7fe      	b.n	800a62e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a632:	685a      	ldr	r2, [r3, #4]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	1ad2      	subs	r2, r2, r3
 800a638:	69bb      	ldr	r3, [r7, #24]
 800a63a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a642:	69b8      	ldr	r0, [r7, #24]
 800a644:	f000 f908 	bl	800a858 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a648:	4b1d      	ldr	r3, [pc, #116]	; (800a6c0 <pvPortMalloc+0x188>)
 800a64a:	681a      	ldr	r2, [r3, #0]
 800a64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	1ad3      	subs	r3, r2, r3
 800a652:	4a1b      	ldr	r2, [pc, #108]	; (800a6c0 <pvPortMalloc+0x188>)
 800a654:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a656:	4b1a      	ldr	r3, [pc, #104]	; (800a6c0 <pvPortMalloc+0x188>)
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	4b1b      	ldr	r3, [pc, #108]	; (800a6c8 <pvPortMalloc+0x190>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	429a      	cmp	r2, r3
 800a660:	d203      	bcs.n	800a66a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a662:	4b17      	ldr	r3, [pc, #92]	; (800a6c0 <pvPortMalloc+0x188>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	4a18      	ldr	r2, [pc, #96]	; (800a6c8 <pvPortMalloc+0x190>)
 800a668:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66c:	685a      	ldr	r2, [r3, #4]
 800a66e:	4b13      	ldr	r3, [pc, #76]	; (800a6bc <pvPortMalloc+0x184>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	431a      	orrs	r2, r3
 800a674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a676:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a67a:	2200      	movs	r2, #0
 800a67c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a67e:	4b13      	ldr	r3, [pc, #76]	; (800a6cc <pvPortMalloc+0x194>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	3301      	adds	r3, #1
 800a684:	4a11      	ldr	r2, [pc, #68]	; (800a6cc <pvPortMalloc+0x194>)
 800a686:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a688:	f7fe fd04 	bl	8009094 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a68c:	69fb      	ldr	r3, [r7, #28]
 800a68e:	f003 0307 	and.w	r3, r3, #7
 800a692:	2b00      	cmp	r3, #0
 800a694:	d00a      	beq.n	800a6ac <pvPortMalloc+0x174>
	__asm volatile
 800a696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a69a:	f383 8811 	msr	BASEPRI, r3
 800a69e:	f3bf 8f6f 	isb	sy
 800a6a2:	f3bf 8f4f 	dsb	sy
 800a6a6:	60fb      	str	r3, [r7, #12]
}
 800a6a8:	bf00      	nop
 800a6aa:	e7fe      	b.n	800a6aa <pvPortMalloc+0x172>
	return pvReturn;
 800a6ac:	69fb      	ldr	r3, [r7, #28]
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3728      	adds	r7, #40	; 0x28
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	bf00      	nop
 800a6b8:	20005798 	.word	0x20005798
 800a6bc:	200057ac 	.word	0x200057ac
 800a6c0:	2000579c 	.word	0x2000579c
 800a6c4:	20005790 	.word	0x20005790
 800a6c8:	200057a0 	.word	0x200057a0
 800a6cc:	200057a4 	.word	0x200057a4

0800a6d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b086      	sub	sp, #24
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d04d      	beq.n	800a77e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a6e2:	2308      	movs	r3, #8
 800a6e4:	425b      	negs	r3, r3
 800a6e6:	697a      	ldr	r2, [r7, #20]
 800a6e8:	4413      	add	r3, r2
 800a6ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	685a      	ldr	r2, [r3, #4]
 800a6f4:	4b24      	ldr	r3, [pc, #144]	; (800a788 <vPortFree+0xb8>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4013      	ands	r3, r2
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d10a      	bne.n	800a714 <vPortFree+0x44>
	__asm volatile
 800a6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a702:	f383 8811 	msr	BASEPRI, r3
 800a706:	f3bf 8f6f 	isb	sy
 800a70a:	f3bf 8f4f 	dsb	sy
 800a70e:	60fb      	str	r3, [r7, #12]
}
 800a710:	bf00      	nop
 800a712:	e7fe      	b.n	800a712 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d00a      	beq.n	800a732 <vPortFree+0x62>
	__asm volatile
 800a71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a720:	f383 8811 	msr	BASEPRI, r3
 800a724:	f3bf 8f6f 	isb	sy
 800a728:	f3bf 8f4f 	dsb	sy
 800a72c:	60bb      	str	r3, [r7, #8]
}
 800a72e:	bf00      	nop
 800a730:	e7fe      	b.n	800a730 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	685a      	ldr	r2, [r3, #4]
 800a736:	4b14      	ldr	r3, [pc, #80]	; (800a788 <vPortFree+0xb8>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	4013      	ands	r3, r2
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d01e      	beq.n	800a77e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d11a      	bne.n	800a77e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	685a      	ldr	r2, [r3, #4]
 800a74c:	4b0e      	ldr	r3, [pc, #56]	; (800a788 <vPortFree+0xb8>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	43db      	mvns	r3, r3
 800a752:	401a      	ands	r2, r3
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a758:	f7fe fc8e 	bl	8009078 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	685a      	ldr	r2, [r3, #4]
 800a760:	4b0a      	ldr	r3, [pc, #40]	; (800a78c <vPortFree+0xbc>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4413      	add	r3, r2
 800a766:	4a09      	ldr	r2, [pc, #36]	; (800a78c <vPortFree+0xbc>)
 800a768:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a76a:	6938      	ldr	r0, [r7, #16]
 800a76c:	f000 f874 	bl	800a858 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a770:	4b07      	ldr	r3, [pc, #28]	; (800a790 <vPortFree+0xc0>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	3301      	adds	r3, #1
 800a776:	4a06      	ldr	r2, [pc, #24]	; (800a790 <vPortFree+0xc0>)
 800a778:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a77a:	f7fe fc8b 	bl	8009094 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a77e:	bf00      	nop
 800a780:	3718      	adds	r7, #24
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop
 800a788:	200057ac 	.word	0x200057ac
 800a78c:	2000579c 	.word	0x2000579c
 800a790:	200057a8 	.word	0x200057a8

0800a794 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a794:	b480      	push	{r7}
 800a796:	b085      	sub	sp, #20
 800a798:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a79a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a79e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a7a0:	4b27      	ldr	r3, [pc, #156]	; (800a840 <prvHeapInit+0xac>)
 800a7a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f003 0307 	and.w	r3, r3, #7
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d00c      	beq.n	800a7c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	3307      	adds	r3, #7
 800a7b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f023 0307 	bic.w	r3, r3, #7
 800a7ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a7bc:	68ba      	ldr	r2, [r7, #8]
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	1ad3      	subs	r3, r2, r3
 800a7c2:	4a1f      	ldr	r2, [pc, #124]	; (800a840 <prvHeapInit+0xac>)
 800a7c4:	4413      	add	r3, r2
 800a7c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a7cc:	4a1d      	ldr	r2, [pc, #116]	; (800a844 <prvHeapInit+0xb0>)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a7d2:	4b1c      	ldr	r3, [pc, #112]	; (800a844 <prvHeapInit+0xb0>)
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	68ba      	ldr	r2, [r7, #8]
 800a7dc:	4413      	add	r3, r2
 800a7de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a7e0:	2208      	movs	r2, #8
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	1a9b      	subs	r3, r3, r2
 800a7e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f023 0307 	bic.w	r3, r3, #7
 800a7ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	4a15      	ldr	r2, [pc, #84]	; (800a848 <prvHeapInit+0xb4>)
 800a7f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a7f6:	4b14      	ldr	r3, [pc, #80]	; (800a848 <prvHeapInit+0xb4>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a7fe:	4b12      	ldr	r3, [pc, #72]	; (800a848 <prvHeapInit+0xb4>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	2200      	movs	r2, #0
 800a804:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	68fa      	ldr	r2, [r7, #12]
 800a80e:	1ad2      	subs	r2, r2, r3
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a814:	4b0c      	ldr	r3, [pc, #48]	; (800a848 <prvHeapInit+0xb4>)
 800a816:	681a      	ldr	r2, [r3, #0]
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	4a0a      	ldr	r2, [pc, #40]	; (800a84c <prvHeapInit+0xb8>)
 800a822:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	4a09      	ldr	r2, [pc, #36]	; (800a850 <prvHeapInit+0xbc>)
 800a82a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a82c:	4b09      	ldr	r3, [pc, #36]	; (800a854 <prvHeapInit+0xc0>)
 800a82e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a832:	601a      	str	r2, [r3, #0]
}
 800a834:	bf00      	nop
 800a836:	3714      	adds	r7, #20
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr
 800a840:	20001b90 	.word	0x20001b90
 800a844:	20005790 	.word	0x20005790
 800a848:	20005798 	.word	0x20005798
 800a84c:	200057a0 	.word	0x200057a0
 800a850:	2000579c 	.word	0x2000579c
 800a854:	200057ac 	.word	0x200057ac

0800a858 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a858:	b480      	push	{r7}
 800a85a:	b085      	sub	sp, #20
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a860:	4b28      	ldr	r3, [pc, #160]	; (800a904 <prvInsertBlockIntoFreeList+0xac>)
 800a862:	60fb      	str	r3, [r7, #12]
 800a864:	e002      	b.n	800a86c <prvInsertBlockIntoFreeList+0x14>
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	60fb      	str	r3, [r7, #12]
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	429a      	cmp	r2, r3
 800a874:	d8f7      	bhi.n	800a866 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	68ba      	ldr	r2, [r7, #8]
 800a880:	4413      	add	r3, r2
 800a882:	687a      	ldr	r2, [r7, #4]
 800a884:	429a      	cmp	r2, r3
 800a886:	d108      	bne.n	800a89a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	685a      	ldr	r2, [r3, #4]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	441a      	add	r2, r3
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	68ba      	ldr	r2, [r7, #8]
 800a8a4:	441a      	add	r2, r3
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d118      	bne.n	800a8e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	4b15      	ldr	r3, [pc, #84]	; (800a908 <prvInsertBlockIntoFreeList+0xb0>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d00d      	beq.n	800a8d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	685a      	ldr	r2, [r3, #4]
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	441a      	add	r2, r3
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	601a      	str	r2, [r3, #0]
 800a8d4:	e008      	b.n	800a8e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a8d6:	4b0c      	ldr	r3, [pc, #48]	; (800a908 <prvInsertBlockIntoFreeList+0xb0>)
 800a8d8:	681a      	ldr	r2, [r3, #0]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	601a      	str	r2, [r3, #0]
 800a8de:	e003      	b.n	800a8e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681a      	ldr	r2, [r3, #0]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a8e8:	68fa      	ldr	r2, [r7, #12]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d002      	beq.n	800a8f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	687a      	ldr	r2, [r7, #4]
 800a8f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8f6:	bf00      	nop
 800a8f8:	3714      	adds	r7, #20
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr
 800a902:	bf00      	nop
 800a904:	20005790 	.word	0x20005790
 800a908:	20005798 	.word	0x20005798

0800a90c <__cxa_pure_virtual>:
 800a90c:	b508      	push	{r3, lr}
 800a90e:	f000 f80d 	bl	800a92c <_ZSt9terminatev>

0800a912 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800a912:	b508      	push	{r3, lr}
 800a914:	4780      	blx	r0
 800a916:	f000 f80e 	bl	800a936 <abort>
	...

0800a91c <_ZSt13get_terminatev>:
 800a91c:	4b02      	ldr	r3, [pc, #8]	; (800a928 <_ZSt13get_terminatev+0xc>)
 800a91e:	6818      	ldr	r0, [r3, #0]
 800a920:	f3bf 8f5b 	dmb	ish
 800a924:	4770      	bx	lr
 800a926:	bf00      	nop
 800a928:	20000020 	.word	0x20000020

0800a92c <_ZSt9terminatev>:
 800a92c:	b508      	push	{r3, lr}
 800a92e:	f7ff fff5 	bl	800a91c <_ZSt13get_terminatev>
 800a932:	f7ff ffee 	bl	800a912 <_ZN10__cxxabiv111__terminateEPFvvE>

0800a936 <abort>:
 800a936:	b508      	push	{r3, lr}
 800a938:	2006      	movs	r0, #6
 800a93a:	f000 f873 	bl	800aa24 <raise>
 800a93e:	2001      	movs	r0, #1
 800a940:	f7f8 ffa4 	bl	800388c <_exit>

0800a944 <__errno>:
 800a944:	4b01      	ldr	r3, [pc, #4]	; (800a94c <__errno+0x8>)
 800a946:	6818      	ldr	r0, [r3, #0]
 800a948:	4770      	bx	lr
 800a94a:	bf00      	nop
 800a94c:	20000024 	.word	0x20000024

0800a950 <__libc_init_array>:
 800a950:	b570      	push	{r4, r5, r6, lr}
 800a952:	4d0d      	ldr	r5, [pc, #52]	; (800a988 <__libc_init_array+0x38>)
 800a954:	4c0d      	ldr	r4, [pc, #52]	; (800a98c <__libc_init_array+0x3c>)
 800a956:	1b64      	subs	r4, r4, r5
 800a958:	10a4      	asrs	r4, r4, #2
 800a95a:	2600      	movs	r6, #0
 800a95c:	42a6      	cmp	r6, r4
 800a95e:	d109      	bne.n	800a974 <__libc_init_array+0x24>
 800a960:	4d0b      	ldr	r5, [pc, #44]	; (800a990 <__libc_init_array+0x40>)
 800a962:	4c0c      	ldr	r4, [pc, #48]	; (800a994 <__libc_init_array+0x44>)
 800a964:	f000 f9b0 	bl	800acc8 <_init>
 800a968:	1b64      	subs	r4, r4, r5
 800a96a:	10a4      	asrs	r4, r4, #2
 800a96c:	2600      	movs	r6, #0
 800a96e:	42a6      	cmp	r6, r4
 800a970:	d105      	bne.n	800a97e <__libc_init_array+0x2e>
 800a972:	bd70      	pop	{r4, r5, r6, pc}
 800a974:	f855 3b04 	ldr.w	r3, [r5], #4
 800a978:	4798      	blx	r3
 800a97a:	3601      	adds	r6, #1
 800a97c:	e7ee      	b.n	800a95c <__libc_init_array+0xc>
 800a97e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a982:	4798      	blx	r3
 800a984:	3601      	adds	r6, #1
 800a986:	e7f2      	b.n	800a96e <__libc_init_array+0x1e>
 800a988:	0800b058 	.word	0x0800b058
 800a98c:	0800b058 	.word	0x0800b058
 800a990:	0800b058 	.word	0x0800b058
 800a994:	0800b060 	.word	0x0800b060

0800a998 <memcpy>:
 800a998:	440a      	add	r2, r1
 800a99a:	4291      	cmp	r1, r2
 800a99c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9a0:	d100      	bne.n	800a9a4 <memcpy+0xc>
 800a9a2:	4770      	bx	lr
 800a9a4:	b510      	push	{r4, lr}
 800a9a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9ae:	4291      	cmp	r1, r2
 800a9b0:	d1f9      	bne.n	800a9a6 <memcpy+0xe>
 800a9b2:	bd10      	pop	{r4, pc}

0800a9b4 <memset>:
 800a9b4:	4402      	add	r2, r0
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d100      	bne.n	800a9be <memset+0xa>
 800a9bc:	4770      	bx	lr
 800a9be:	f803 1b01 	strb.w	r1, [r3], #1
 800a9c2:	e7f9      	b.n	800a9b8 <memset+0x4>

0800a9c4 <realloc>:
 800a9c4:	4b02      	ldr	r3, [pc, #8]	; (800a9d0 <realloc+0xc>)
 800a9c6:	460a      	mov	r2, r1
 800a9c8:	4601      	mov	r1, r0
 800a9ca:	6818      	ldr	r0, [r3, #0]
 800a9cc:	f000 b8da 	b.w	800ab84 <_realloc_r>
 800a9d0:	20000024 	.word	0x20000024

0800a9d4 <_raise_r>:
 800a9d4:	291f      	cmp	r1, #31
 800a9d6:	b538      	push	{r3, r4, r5, lr}
 800a9d8:	4604      	mov	r4, r0
 800a9da:	460d      	mov	r5, r1
 800a9dc:	d904      	bls.n	800a9e8 <_raise_r+0x14>
 800a9de:	2316      	movs	r3, #22
 800a9e0:	6003      	str	r3, [r0, #0]
 800a9e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a9e6:	bd38      	pop	{r3, r4, r5, pc}
 800a9e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a9ea:	b112      	cbz	r2, 800a9f2 <_raise_r+0x1e>
 800a9ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a9f0:	b94b      	cbnz	r3, 800aa06 <_raise_r+0x32>
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	f000 f830 	bl	800aa58 <_getpid_r>
 800a9f8:	462a      	mov	r2, r5
 800a9fa:	4601      	mov	r1, r0
 800a9fc:	4620      	mov	r0, r4
 800a9fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa02:	f000 b817 	b.w	800aa34 <_kill_r>
 800aa06:	2b01      	cmp	r3, #1
 800aa08:	d00a      	beq.n	800aa20 <_raise_r+0x4c>
 800aa0a:	1c59      	adds	r1, r3, #1
 800aa0c:	d103      	bne.n	800aa16 <_raise_r+0x42>
 800aa0e:	2316      	movs	r3, #22
 800aa10:	6003      	str	r3, [r0, #0]
 800aa12:	2001      	movs	r0, #1
 800aa14:	e7e7      	b.n	800a9e6 <_raise_r+0x12>
 800aa16:	2400      	movs	r4, #0
 800aa18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aa1c:	4628      	mov	r0, r5
 800aa1e:	4798      	blx	r3
 800aa20:	2000      	movs	r0, #0
 800aa22:	e7e0      	b.n	800a9e6 <_raise_r+0x12>

0800aa24 <raise>:
 800aa24:	4b02      	ldr	r3, [pc, #8]	; (800aa30 <raise+0xc>)
 800aa26:	4601      	mov	r1, r0
 800aa28:	6818      	ldr	r0, [r3, #0]
 800aa2a:	f7ff bfd3 	b.w	800a9d4 <_raise_r>
 800aa2e:	bf00      	nop
 800aa30:	20000024 	.word	0x20000024

0800aa34 <_kill_r>:
 800aa34:	b538      	push	{r3, r4, r5, lr}
 800aa36:	4d07      	ldr	r5, [pc, #28]	; (800aa54 <_kill_r+0x20>)
 800aa38:	2300      	movs	r3, #0
 800aa3a:	4604      	mov	r4, r0
 800aa3c:	4608      	mov	r0, r1
 800aa3e:	4611      	mov	r1, r2
 800aa40:	602b      	str	r3, [r5, #0]
 800aa42:	f7f8 ff13 	bl	800386c <_kill>
 800aa46:	1c43      	adds	r3, r0, #1
 800aa48:	d102      	bne.n	800aa50 <_kill_r+0x1c>
 800aa4a:	682b      	ldr	r3, [r5, #0]
 800aa4c:	b103      	cbz	r3, 800aa50 <_kill_r+0x1c>
 800aa4e:	6023      	str	r3, [r4, #0]
 800aa50:	bd38      	pop	{r3, r4, r5, pc}
 800aa52:	bf00      	nop
 800aa54:	200057b8 	.word	0x200057b8

0800aa58 <_getpid_r>:
 800aa58:	f7f8 bf00 	b.w	800385c <_getpid>

0800aa5c <sbrk_aligned>:
 800aa5c:	b570      	push	{r4, r5, r6, lr}
 800aa5e:	4e0e      	ldr	r6, [pc, #56]	; (800aa98 <sbrk_aligned+0x3c>)
 800aa60:	460c      	mov	r4, r1
 800aa62:	6831      	ldr	r1, [r6, #0]
 800aa64:	4605      	mov	r5, r0
 800aa66:	b911      	cbnz	r1, 800aa6e <sbrk_aligned+0x12>
 800aa68:	f000 f8bc 	bl	800abe4 <_sbrk_r>
 800aa6c:	6030      	str	r0, [r6, #0]
 800aa6e:	4621      	mov	r1, r4
 800aa70:	4628      	mov	r0, r5
 800aa72:	f000 f8b7 	bl	800abe4 <_sbrk_r>
 800aa76:	1c43      	adds	r3, r0, #1
 800aa78:	d00a      	beq.n	800aa90 <sbrk_aligned+0x34>
 800aa7a:	1cc4      	adds	r4, r0, #3
 800aa7c:	f024 0403 	bic.w	r4, r4, #3
 800aa80:	42a0      	cmp	r0, r4
 800aa82:	d007      	beq.n	800aa94 <sbrk_aligned+0x38>
 800aa84:	1a21      	subs	r1, r4, r0
 800aa86:	4628      	mov	r0, r5
 800aa88:	f000 f8ac 	bl	800abe4 <_sbrk_r>
 800aa8c:	3001      	adds	r0, #1
 800aa8e:	d101      	bne.n	800aa94 <sbrk_aligned+0x38>
 800aa90:	f04f 34ff 	mov.w	r4, #4294967295
 800aa94:	4620      	mov	r0, r4
 800aa96:	bd70      	pop	{r4, r5, r6, pc}
 800aa98:	200057b4 	.word	0x200057b4

0800aa9c <_malloc_r>:
 800aa9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaa0:	1ccd      	adds	r5, r1, #3
 800aaa2:	f025 0503 	bic.w	r5, r5, #3
 800aaa6:	3508      	adds	r5, #8
 800aaa8:	2d0c      	cmp	r5, #12
 800aaaa:	bf38      	it	cc
 800aaac:	250c      	movcc	r5, #12
 800aaae:	2d00      	cmp	r5, #0
 800aab0:	4607      	mov	r7, r0
 800aab2:	db01      	blt.n	800aab8 <_malloc_r+0x1c>
 800aab4:	42a9      	cmp	r1, r5
 800aab6:	d905      	bls.n	800aac4 <_malloc_r+0x28>
 800aab8:	230c      	movs	r3, #12
 800aaba:	603b      	str	r3, [r7, #0]
 800aabc:	2600      	movs	r6, #0
 800aabe:	4630      	mov	r0, r6
 800aac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aac4:	4e2e      	ldr	r6, [pc, #184]	; (800ab80 <_malloc_r+0xe4>)
 800aac6:	f000 f89d 	bl	800ac04 <__malloc_lock>
 800aaca:	6833      	ldr	r3, [r6, #0]
 800aacc:	461c      	mov	r4, r3
 800aace:	bb34      	cbnz	r4, 800ab1e <_malloc_r+0x82>
 800aad0:	4629      	mov	r1, r5
 800aad2:	4638      	mov	r0, r7
 800aad4:	f7ff ffc2 	bl	800aa5c <sbrk_aligned>
 800aad8:	1c43      	adds	r3, r0, #1
 800aada:	4604      	mov	r4, r0
 800aadc:	d14d      	bne.n	800ab7a <_malloc_r+0xde>
 800aade:	6834      	ldr	r4, [r6, #0]
 800aae0:	4626      	mov	r6, r4
 800aae2:	2e00      	cmp	r6, #0
 800aae4:	d140      	bne.n	800ab68 <_malloc_r+0xcc>
 800aae6:	6823      	ldr	r3, [r4, #0]
 800aae8:	4631      	mov	r1, r6
 800aaea:	4638      	mov	r0, r7
 800aaec:	eb04 0803 	add.w	r8, r4, r3
 800aaf0:	f000 f878 	bl	800abe4 <_sbrk_r>
 800aaf4:	4580      	cmp	r8, r0
 800aaf6:	d13a      	bne.n	800ab6e <_malloc_r+0xd2>
 800aaf8:	6821      	ldr	r1, [r4, #0]
 800aafa:	3503      	adds	r5, #3
 800aafc:	1a6d      	subs	r5, r5, r1
 800aafe:	f025 0503 	bic.w	r5, r5, #3
 800ab02:	3508      	adds	r5, #8
 800ab04:	2d0c      	cmp	r5, #12
 800ab06:	bf38      	it	cc
 800ab08:	250c      	movcc	r5, #12
 800ab0a:	4629      	mov	r1, r5
 800ab0c:	4638      	mov	r0, r7
 800ab0e:	f7ff ffa5 	bl	800aa5c <sbrk_aligned>
 800ab12:	3001      	adds	r0, #1
 800ab14:	d02b      	beq.n	800ab6e <_malloc_r+0xd2>
 800ab16:	6823      	ldr	r3, [r4, #0]
 800ab18:	442b      	add	r3, r5
 800ab1a:	6023      	str	r3, [r4, #0]
 800ab1c:	e00e      	b.n	800ab3c <_malloc_r+0xa0>
 800ab1e:	6822      	ldr	r2, [r4, #0]
 800ab20:	1b52      	subs	r2, r2, r5
 800ab22:	d41e      	bmi.n	800ab62 <_malloc_r+0xc6>
 800ab24:	2a0b      	cmp	r2, #11
 800ab26:	d916      	bls.n	800ab56 <_malloc_r+0xba>
 800ab28:	1961      	adds	r1, r4, r5
 800ab2a:	42a3      	cmp	r3, r4
 800ab2c:	6025      	str	r5, [r4, #0]
 800ab2e:	bf18      	it	ne
 800ab30:	6059      	strne	r1, [r3, #4]
 800ab32:	6863      	ldr	r3, [r4, #4]
 800ab34:	bf08      	it	eq
 800ab36:	6031      	streq	r1, [r6, #0]
 800ab38:	5162      	str	r2, [r4, r5]
 800ab3a:	604b      	str	r3, [r1, #4]
 800ab3c:	4638      	mov	r0, r7
 800ab3e:	f104 060b 	add.w	r6, r4, #11
 800ab42:	f000 f865 	bl	800ac10 <__malloc_unlock>
 800ab46:	f026 0607 	bic.w	r6, r6, #7
 800ab4a:	1d23      	adds	r3, r4, #4
 800ab4c:	1af2      	subs	r2, r6, r3
 800ab4e:	d0b6      	beq.n	800aabe <_malloc_r+0x22>
 800ab50:	1b9b      	subs	r3, r3, r6
 800ab52:	50a3      	str	r3, [r4, r2]
 800ab54:	e7b3      	b.n	800aabe <_malloc_r+0x22>
 800ab56:	6862      	ldr	r2, [r4, #4]
 800ab58:	42a3      	cmp	r3, r4
 800ab5a:	bf0c      	ite	eq
 800ab5c:	6032      	streq	r2, [r6, #0]
 800ab5e:	605a      	strne	r2, [r3, #4]
 800ab60:	e7ec      	b.n	800ab3c <_malloc_r+0xa0>
 800ab62:	4623      	mov	r3, r4
 800ab64:	6864      	ldr	r4, [r4, #4]
 800ab66:	e7b2      	b.n	800aace <_malloc_r+0x32>
 800ab68:	4634      	mov	r4, r6
 800ab6a:	6876      	ldr	r6, [r6, #4]
 800ab6c:	e7b9      	b.n	800aae2 <_malloc_r+0x46>
 800ab6e:	230c      	movs	r3, #12
 800ab70:	603b      	str	r3, [r7, #0]
 800ab72:	4638      	mov	r0, r7
 800ab74:	f000 f84c 	bl	800ac10 <__malloc_unlock>
 800ab78:	e7a1      	b.n	800aabe <_malloc_r+0x22>
 800ab7a:	6025      	str	r5, [r4, #0]
 800ab7c:	e7de      	b.n	800ab3c <_malloc_r+0xa0>
 800ab7e:	bf00      	nop
 800ab80:	200057b0 	.word	0x200057b0

0800ab84 <_realloc_r>:
 800ab84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab88:	4680      	mov	r8, r0
 800ab8a:	4614      	mov	r4, r2
 800ab8c:	460e      	mov	r6, r1
 800ab8e:	b921      	cbnz	r1, 800ab9a <_realloc_r+0x16>
 800ab90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab94:	4611      	mov	r1, r2
 800ab96:	f7ff bf81 	b.w	800aa9c <_malloc_r>
 800ab9a:	b92a      	cbnz	r2, 800aba8 <_realloc_r+0x24>
 800ab9c:	f000 f83e 	bl	800ac1c <_free_r>
 800aba0:	4625      	mov	r5, r4
 800aba2:	4628      	mov	r0, r5
 800aba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aba8:	f000 f884 	bl	800acb4 <_malloc_usable_size_r>
 800abac:	4284      	cmp	r4, r0
 800abae:	4607      	mov	r7, r0
 800abb0:	d802      	bhi.n	800abb8 <_realloc_r+0x34>
 800abb2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800abb6:	d812      	bhi.n	800abde <_realloc_r+0x5a>
 800abb8:	4621      	mov	r1, r4
 800abba:	4640      	mov	r0, r8
 800abbc:	f7ff ff6e 	bl	800aa9c <_malloc_r>
 800abc0:	4605      	mov	r5, r0
 800abc2:	2800      	cmp	r0, #0
 800abc4:	d0ed      	beq.n	800aba2 <_realloc_r+0x1e>
 800abc6:	42bc      	cmp	r4, r7
 800abc8:	4622      	mov	r2, r4
 800abca:	4631      	mov	r1, r6
 800abcc:	bf28      	it	cs
 800abce:	463a      	movcs	r2, r7
 800abd0:	f7ff fee2 	bl	800a998 <memcpy>
 800abd4:	4631      	mov	r1, r6
 800abd6:	4640      	mov	r0, r8
 800abd8:	f000 f820 	bl	800ac1c <_free_r>
 800abdc:	e7e1      	b.n	800aba2 <_realloc_r+0x1e>
 800abde:	4635      	mov	r5, r6
 800abe0:	e7df      	b.n	800aba2 <_realloc_r+0x1e>
	...

0800abe4 <_sbrk_r>:
 800abe4:	b538      	push	{r3, r4, r5, lr}
 800abe6:	4d06      	ldr	r5, [pc, #24]	; (800ac00 <_sbrk_r+0x1c>)
 800abe8:	2300      	movs	r3, #0
 800abea:	4604      	mov	r4, r0
 800abec:	4608      	mov	r0, r1
 800abee:	602b      	str	r3, [r5, #0]
 800abf0:	f7f8 fe56 	bl	80038a0 <_sbrk>
 800abf4:	1c43      	adds	r3, r0, #1
 800abf6:	d102      	bne.n	800abfe <_sbrk_r+0x1a>
 800abf8:	682b      	ldr	r3, [r5, #0]
 800abfa:	b103      	cbz	r3, 800abfe <_sbrk_r+0x1a>
 800abfc:	6023      	str	r3, [r4, #0]
 800abfe:	bd38      	pop	{r3, r4, r5, pc}
 800ac00:	200057b8 	.word	0x200057b8

0800ac04 <__malloc_lock>:
 800ac04:	4801      	ldr	r0, [pc, #4]	; (800ac0c <__malloc_lock+0x8>)
 800ac06:	f000 b85d 	b.w	800acc4 <__retarget_lock_acquire_recursive>
 800ac0a:	bf00      	nop
 800ac0c:	200057bc 	.word	0x200057bc

0800ac10 <__malloc_unlock>:
 800ac10:	4801      	ldr	r0, [pc, #4]	; (800ac18 <__malloc_unlock+0x8>)
 800ac12:	f000 b858 	b.w	800acc6 <__retarget_lock_release_recursive>
 800ac16:	bf00      	nop
 800ac18:	200057bc 	.word	0x200057bc

0800ac1c <_free_r>:
 800ac1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac1e:	2900      	cmp	r1, #0
 800ac20:	d044      	beq.n	800acac <_free_r+0x90>
 800ac22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac26:	9001      	str	r0, [sp, #4]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	f1a1 0404 	sub.w	r4, r1, #4
 800ac2e:	bfb8      	it	lt
 800ac30:	18e4      	addlt	r4, r4, r3
 800ac32:	f7ff ffe7 	bl	800ac04 <__malloc_lock>
 800ac36:	4a1e      	ldr	r2, [pc, #120]	; (800acb0 <_free_r+0x94>)
 800ac38:	9801      	ldr	r0, [sp, #4]
 800ac3a:	6813      	ldr	r3, [r2, #0]
 800ac3c:	b933      	cbnz	r3, 800ac4c <_free_r+0x30>
 800ac3e:	6063      	str	r3, [r4, #4]
 800ac40:	6014      	str	r4, [r2, #0]
 800ac42:	b003      	add	sp, #12
 800ac44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac48:	f7ff bfe2 	b.w	800ac10 <__malloc_unlock>
 800ac4c:	42a3      	cmp	r3, r4
 800ac4e:	d908      	bls.n	800ac62 <_free_r+0x46>
 800ac50:	6825      	ldr	r5, [r4, #0]
 800ac52:	1961      	adds	r1, r4, r5
 800ac54:	428b      	cmp	r3, r1
 800ac56:	bf01      	itttt	eq
 800ac58:	6819      	ldreq	r1, [r3, #0]
 800ac5a:	685b      	ldreq	r3, [r3, #4]
 800ac5c:	1949      	addeq	r1, r1, r5
 800ac5e:	6021      	streq	r1, [r4, #0]
 800ac60:	e7ed      	b.n	800ac3e <_free_r+0x22>
 800ac62:	461a      	mov	r2, r3
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	b10b      	cbz	r3, 800ac6c <_free_r+0x50>
 800ac68:	42a3      	cmp	r3, r4
 800ac6a:	d9fa      	bls.n	800ac62 <_free_r+0x46>
 800ac6c:	6811      	ldr	r1, [r2, #0]
 800ac6e:	1855      	adds	r5, r2, r1
 800ac70:	42a5      	cmp	r5, r4
 800ac72:	d10b      	bne.n	800ac8c <_free_r+0x70>
 800ac74:	6824      	ldr	r4, [r4, #0]
 800ac76:	4421      	add	r1, r4
 800ac78:	1854      	adds	r4, r2, r1
 800ac7a:	42a3      	cmp	r3, r4
 800ac7c:	6011      	str	r1, [r2, #0]
 800ac7e:	d1e0      	bne.n	800ac42 <_free_r+0x26>
 800ac80:	681c      	ldr	r4, [r3, #0]
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	6053      	str	r3, [r2, #4]
 800ac86:	4421      	add	r1, r4
 800ac88:	6011      	str	r1, [r2, #0]
 800ac8a:	e7da      	b.n	800ac42 <_free_r+0x26>
 800ac8c:	d902      	bls.n	800ac94 <_free_r+0x78>
 800ac8e:	230c      	movs	r3, #12
 800ac90:	6003      	str	r3, [r0, #0]
 800ac92:	e7d6      	b.n	800ac42 <_free_r+0x26>
 800ac94:	6825      	ldr	r5, [r4, #0]
 800ac96:	1961      	adds	r1, r4, r5
 800ac98:	428b      	cmp	r3, r1
 800ac9a:	bf04      	itt	eq
 800ac9c:	6819      	ldreq	r1, [r3, #0]
 800ac9e:	685b      	ldreq	r3, [r3, #4]
 800aca0:	6063      	str	r3, [r4, #4]
 800aca2:	bf04      	itt	eq
 800aca4:	1949      	addeq	r1, r1, r5
 800aca6:	6021      	streq	r1, [r4, #0]
 800aca8:	6054      	str	r4, [r2, #4]
 800acaa:	e7ca      	b.n	800ac42 <_free_r+0x26>
 800acac:	b003      	add	sp, #12
 800acae:	bd30      	pop	{r4, r5, pc}
 800acb0:	200057b0 	.word	0x200057b0

0800acb4 <_malloc_usable_size_r>:
 800acb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acb8:	1f18      	subs	r0, r3, #4
 800acba:	2b00      	cmp	r3, #0
 800acbc:	bfbc      	itt	lt
 800acbe:	580b      	ldrlt	r3, [r1, r0]
 800acc0:	18c0      	addlt	r0, r0, r3
 800acc2:	4770      	bx	lr

0800acc4 <__retarget_lock_acquire_recursive>:
 800acc4:	4770      	bx	lr

0800acc6 <__retarget_lock_release_recursive>:
 800acc6:	4770      	bx	lr

0800acc8 <_init>:
 800acc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acca:	bf00      	nop
 800accc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acce:	bc08      	pop	{r3}
 800acd0:	469e      	mov	lr, r3
 800acd2:	4770      	bx	lr

0800acd4 <_fini>:
 800acd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acd6:	bf00      	nop
 800acd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acda:	bc08      	pop	{r3}
 800acdc:	469e      	mov	lr, r3
 800acde:	4770      	bx	lr
